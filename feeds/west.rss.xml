<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>兄弟成长于天蓝时代</title><link>https://szuwest.github.io/</link><description>West's blog</description><atom:link href="https://szuwest.github.io/feeds/west.rss.xml" rel="self"></atom:link><lastBuildDate>Mon, 21 Feb 2022 00:00:00 +0800</lastBuildDate><item><title>湾湾日记(OneDairy)介绍</title><link>https://szuwest.github.io/onediary.html</link><description>&lt;h1&gt;湾湾日记(OneDairy)介绍&lt;/h1&gt;
&lt;h2&gt;念念不忘的缘由&lt;/h2&gt;
&lt;p&gt;大约在5，6年前，是在2017年左右吧，我就一直有个想法，做一个适应自己需求的日记APP。当时我在网上找了很多个日记APP，都没有我自己想要的。我当时还在知乎的一个讨论日记的帖子上发表看法。说一个理想的日记APP应该是怎么样的。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;非常同意你说的最后重要的两点。我觉得日志首先是要本地存储的，即使没有网络一样照写不误。然后是可以自动保存到服务器的云端的，随时可以找回，永不丢失。后来看了一些评论，觉得还是要支持导出功能，这样即使开发者不维护或者公司倒闭，可以手动导出自己存储。

我准备做一个这样的日记APP^_^。所以你用了这么多日记APP，最喜欢哪个？我可以参考一下
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这么多年过去了，我看那个帖子也还在更新。不过里面提到的大部分APP我都有用过，很多都不能满足我的需求。当然我刚去看了下，有些人提到的新APP貌似还可以，我没有试过。&lt;/p&gt;
&lt;p&gt;如今已经2022年，过去5年了。当时我说要自己写一个APP，这么多年终于可以说实现了第一个初级版本。。。-_-&lt;/p&gt;
&lt;p&gt;其实我当时就基本想清楚了核心功能，而且我还专门写了一个讲解我核心思想的PPT。并且2017年我也确实写了一个安卓版的demo版。后来是因为我换工作了，很忙，就暂停了。然后我2018年工作的关系我接触了react-native，我想法就是要采用跨平台的平台开发日记APP。因为我的一个重要想法就是日记APP要跨平台，安卓和iOS的体验高度一致。再后来我又接触了Flutter，我决心要用Flutter来写我的日记APP。当初安卓的demo版就抛弃了。&lt;/p&gt;
&lt;h2&gt;必有回响的付出&lt;/h2&gt;
&lt;p&gt;虽然我很想写这个APP，但是由于工作忙，我一直没有多少时间写。另外我也一直在想，我写的日记APP跟别的有什么不同，是不是真的没有已存在的日记APP能满足我。这些我想了很多，期间有过怀疑，到底值不值得我去做。我的备忘录里记录我一些新想法，新功能。我就断断续续写了些。另外数据库的设计费了我很大脑筋。虽然我在写安卓demo版的时候已经想了很多，但是写Flutter版的时候我又改进了一些。新增了一些想法。另外还有一个阻碍了我进度的原因，就是我对Flutter框架也不是很熟。很多都是边查边做，边做边查，这就会很慢，没有比我原生的写法快。但是采用Flutter是对的，因为我的目标是跨平台，我不想在安卓上实现过的功能，在iOS又重复写一遍。&lt;/p&gt;
&lt;p&gt;2021年，我老婆怀孕了，我决定要在我孩子出生之前写完，就当做给她/他的一个礼物。这给我了无比大的动力，我终于会在周末时间熬一下夜去赶工。。。&lt;/p&gt;
&lt;p&gt;虽然最终没有在我的女儿出生之前写完这个日记APP，但是也终于在我休陪产假期间写完了第一个版本。算是一个里程碑了，5年多了终于有了一个初步结果。&lt;/p&gt;
&lt;h2&gt;湾湾日记--OneDiary&lt;/h2&gt;
&lt;p&gt;这个日记APP名字叫湾湾日记，英文名加OneDiary
它的核心功能有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不需要账号，也不需要网络&lt;/li&gt;
&lt;li&gt;跨平台，安卓和iOS体验高度一致&lt;/li&gt;
&lt;li&gt;同时支持文本，图片，视频，语音，涂鸦方式写日记&lt;/li&gt;
&lt;li&gt;自动获取地理位置，天气&lt;/li&gt;
&lt;li&gt;支持日记分享为长图片&lt;/li&gt;
&lt;li&gt;支持日记导出为PDF&lt;/li&gt;
&lt;li&gt;以上功能都免费&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当然还有其他功能，例如时间支持农历展示，支持给日记打标签等。&lt;/p&gt;
&lt;p&gt;还有一个非常核心的功能没实现，就是&lt;strong&gt;云端存储&lt;/strong&gt;，&lt;strong&gt;手机之间日记同步&lt;/strong&gt;。这两个功能都很复杂，而且云端存储很耗钱，所以我想法是加一个手机之间日记迁移的功能，这样完全不开云端存储也没问题。换了手机也很方便。但是云端存储功能还是不能缺少的。这些都等以后再说吧，看看有没有人会用这个APP，会不会有人喜欢。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;谨以这APP献给我的太太和刚出生不久的可爱女儿^_^&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最后，如果想下载这个APP，在iPhone在苹果商店搜索湾湾日记。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AppStore下载地址&lt;/strong&gt; &lt;a href="https://apps.apple.com/app/%E6%B9%BE%E6%B9%BE%E6%97%A5%E8%AE%B0-%E9%9A%8F%E6%97%B6%E9%9A%8F%E5%9C%B0%E7%94%A8%E6%89%8B%E6%9C%BA%E5%86%99%E6%97%A5%E8%AE%B0/id1610312891"&gt;点击这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;安卓手机，如果有Google play，则在Google play搜索湾湾日记。&lt;/p&gt;
&lt;p&gt;酷安应用市场的下载地址：&lt;a href="https://www.coolapk.com/apk/292550"&gt;点击这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;蒲公英下载地址：
&lt;a href="https://www.pgyer.com/7QkA"&gt;湾湾日记安卓下载地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="截图1" src="IMG_SP_1.jpeg" /&gt; &lt;img alt="截图2" src="IMG_SP_2.jpeg" /&gt; &lt;img alt="截图3" src="IMG_SP_3.jpeg" /&gt; &lt;img alt="截图4" src="IMG_SP_4.jpeg" /&gt; &lt;img alt="截图5" src="IMG_SP_5.jpeg" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Mon, 21 Feb 2022 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2022-02-21:onediary.html</guid><category>湾湾日记 OneDairy</category></item><item><title>湾湾日记(OneDairy)的隐私政策</title><link>https://szuwest.github.io/privacy.html</link><description>&lt;h1&gt;湾湾日记(OneDairy)的隐私政策&lt;/h1&gt;
&lt;p&gt;湾湾日记(OneDiary)应用深知个人信息对您的重要性，并会尽全力保护您的个人信息安全可靠。我们致力于维持您对我们的信任，恪守以下原则，保护您的个人信息：权责一致原则、目的明确原则、选择同意原则、最少够用原则、确保安全原则、主体参与原则、公开透明原则等。同时，我们承诺，我们将按业界成熟的安全标准，采取相应的安全保护措施来保护您的个人信息。 请在使用我们的产品（或服务）前，仔细阅读并了解本《隐私权政策》。&lt;/p&gt;
&lt;p&gt;一、我们如何收集和使用您的个人信息&lt;/p&gt;
&lt;p&gt;个人信息是指以电子或者其他方式记录的能够单独或者与其他信息结合识别特定自然人身份或者反映特定自然人活动情况的各种信息。 我们仅会出于本政策所述的以下目的，收集和使用您的个人信息：&lt;/p&gt;
&lt;p&gt;（一）我们不出售任何商品，同时也不展示任何商品&lt;/p&gt;
&lt;p&gt;（二）开展内部数据分析和研究，第三方SDK统计服务，改善我们的产品或服务
我们收集数据是根据您与我们的互动和您所做出的选择，包括您的隐私设置以及您使用的产品和功能。我们收集的数据可能包括SDK/API/JS代码版本、浏览器、互联网服务提供商、IP地址、平台、时间戳、应用标识符、应用程序版本、应用分发渠道、独立设备标识符、iOS广告标识符（IDFA)、安卓广告主标识符、网卡（MAC）地址、设备型号、终端制造厂商、终端设备操作系统版本、会话启动/停止时间、语言所在地、时区和网络状态（WiFi等）、硬盘、CPU和电池使用情况等。
当我们要将信息用于本策略未载明的其它用途时，会事先征求您的同意。
当我们要将基于特定目的收集而来的信息用于其他目的时，会事先征求您的同意。&lt;/p&gt;
&lt;p&gt;二、我们如何共享、转让、公开披露您的个人信息&lt;/p&gt;
&lt;p&gt;（一）共享&lt;/p&gt;
&lt;p&gt;我们不会向其他任何公司、组织和个人分享您的个人信息，但以下情况除外：
1、在获取明确同意的情况下共享：获得您的明确同意后，我们会与其他方共享您的个人信息。
2、我们可能会根据法律法规规定，或按政府主管部门的强制性要求，对外共享您的个人信息。
3、与我们的关联公司共享：您的个人信息可能会与我们关联公司共享。我们只会共享必要的个人信息，且受本隐私政策中所声明目的的约束。关联公司如要改变个人信息的处理目的，将再次征求您的授权同意。
我们的关联公司包括:【无】。
4、与授权合作伙伴共享：仅为实现本隐私权政策中声明的目的，我们的某些服务将由授权合作伙伴提供。我们可能会与合作伙伴共享您的某些个人信息，以提供更好的客户服务和用户体验。例如，我们聘请来提供第三方数据统计和分析服务的公司可能需要采集和访问个人数据以进行数据统计和分析。在这种情况下，这些公司 必须遵守我们的数据隐私和安全要求。我们仅会出于合法、正当、必要、特定、明确的目的共享您的个人信息，并且只会共享提供服务所必要的个人信息。&lt;/p&gt;
&lt;p&gt;（二）转让&lt;/p&gt;
&lt;p&gt;我们不会将您的个人信息转让给任何公司、组织和个人，但以下情况除外：
1、在获取明确同意的情况下转让：获得您的明确同意后，我们会向其他方转让您的个人信息；
2、在涉及合并、收购或破产清算时，如涉及到个人信息转让，我们会在要求新的持有您个人信息的公司、组织继续受此隐私政策的约束，否则我们将要求该公司、组织重新向您征求授权同意。&lt;/p&gt;
&lt;p&gt;（三）公开披露&lt;/p&gt;
&lt;p&gt;我们仅会在以下情况下，公开披露您的个人信息：
1、获得您明确同意后；
2、基于法律的披露：在法律、法律程序、诉讼或政府主管部门强制性要求的情况下，我们可能会公开披露您的个人信息。&lt;/p&gt;
&lt;p&gt;三、我们如何保护您的个人信息&lt;/p&gt;
&lt;p&gt;（一）我们已使用符合业界标准的安全防护措施保护您提供的个人信息，防止数据遭到未经授权访问、公开披露、使用、修改、损坏或丢失。我们会采取一切合理可行的措施，保护您的个人信息。例如，在您的浏览器与“服务”之间交换数据（如信用卡信息）时受 SSL 加密保护；我们同时对我们网站提供 https 安全浏览方式；我们会使用加密技术确保数据的保密性；我们会使用受信赖的保护机制防止数据遭到恶意攻击；我们会部署访问控制机制，确保只有授权人员才可访问个人信息；以及我们会举办安全和隐私保护培训课程，加强员工对于保护个人信息重要性的认识。&lt;/p&gt;
&lt;p&gt;（二）我们会采取一切合理可行的措施，确保未收集无关的个人信息。我们只会在达成本政策所述目的所需的期限内保留您的个人信息，除非需要延长保留期或受到法律的允许。&lt;/p&gt;
&lt;p&gt;（三）互联网并非绝对安全的环境，而且电子邮件、即时通讯、及与其他我们用户的交流方式并未加密，我们强烈建议您不要通过此类方式发送个人信息。请使用复杂密码，协助我们保证您的账号安全。&lt;/p&gt;
&lt;p&gt;（四）互联网环境并非百分之百安全，我们将尽力确保或担保您发送给我们的任何信息的安全性。如果我们的物理、技术、或管理防护设施遭到破坏，导致信息被非授权访问、公开披露、篡改、或毁坏，导致您的合法权益受损，我们将承担相应的法律责任。&lt;/p&gt;
&lt;p&gt;（五）在不幸发生个人信息安全事件后，我们将按照法律法规的要求，及时向您告知：安全事件的基本情况和可能的影响、我们已采取或将要采取的处置措施、您可自主防范和降低风险的建议、对您的补救措施等。我们将及时将事件相关情况以邮件、信函、电话、推送通知等方式告知您，难以逐一告知个人信息主体时，我们会采取合理、有效的方式发布公告。
同时，我们还将按照监管部门要求，主动上报个人信息安全事件的处置情况。&lt;/p&gt;
&lt;p&gt;四、本隐私权政策如何更新
我们可能适时会对本隐私权政策进行调整或变更，本隐私权政策的任何更新将以标注更新时间的方式公布在我们网站上，除法律法规或监管规定另有强制性规定外，经调整或变更的内容一经通知或公布后的7日后生效。如您在隐私权政策调整或变更后继续使用我们提供的任一服务或访问我们相关网站的，我们相信这代表您已充分阅读、理解并接受修改后的隐私权政策并受其约束。&lt;/p&gt;
&lt;p&gt;有任何疑问请联系szhanfeng203@gmail.com&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Sun, 20 Feb 2022 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2022-02-20:privacy.html</guid><category>湾湾日记 OneDairy</category></item><item><title>湾湾日记(OneDairy)的技术支持</title><link>https://szuwest.github.io/support.html</link><description>&lt;h1&gt;湾湾日记(OneDairy)&lt;/h1&gt;
&lt;p&gt;湾湾日记(OneDairy)由深圳天蓝时代科技有限公司开发。&lt;/p&gt;
&lt;h2&gt;中文介绍&lt;/h2&gt;
&lt;p&gt;这是一款专门为手机打造的日记APP。简单易用，无需登录，甚至无需网络，随时随地都可以记录。支持文本，图片，视频，语音，甚至涂鸦方式写日记。&lt;/p&gt;
&lt;p&gt;小时候我们写日记，老师经常教导我们，时间、地点、人物、事件是写日记的4大要素。我们APP完全支持这4大要素。时间地点自动获取，人物事件可以通过打标签的方式记录。另外还支持，天气和心情标签。&lt;/p&gt;
&lt;p&gt;日记的分享和迁移也是现代日记本必要支持的功能。我们APP支持截图分享，导出PDF。&lt;/p&gt;
&lt;h2&gt;English Introduction&lt;/h2&gt;
&lt;p&gt;This is a diary app built specifically for cellphone. Simple and easy to use, no login required, no network required. You can write diary at Anytime, anywhere. it support text, pictures, videos, voice, and drawing picture to write a diary.&lt;/p&gt;
&lt;p&gt;When we were children, we kept diaries, and teachers often taught us that time: place, people, and events are the 4 elements of writing a diary. Our APP fully supports these four elements. Time and place are automatically obtained, and character events can be recorded by tagging. It Also supports weather and mood tags.&lt;/p&gt;
&lt;p&gt;The sharing and migration of diaries is also a necessary support feature for modern diaries. Our APP supports screenshot sharing, to export diary to PDF.&lt;/p&gt;
&lt;h2&gt;技术支持（Tech Support）&lt;/h2&gt;
&lt;p&gt;有问题或者建议请发邮件到szhanfeng203@gmail.com&lt;/p&gt;
&lt;p&gt;Any question or feedback, please send email to szhanfeng203@gmail.com&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Sun, 20 Feb 2022 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2022-02-20:support.html</guid><category>湾湾日记 OneDairy</category></item><item><title>2021年年度总结</title><link>https://szuwest.github.io/2021nian-nian-du-zong-jie.html</link><description>&lt;h1&gt;2021年年度总结&lt;/h1&gt;
&lt;p&gt;今年马上要过去了，这一年发生了很多事，不过也可以说是过得很充实的一年。&lt;/p&gt;
&lt;h2&gt;生活与家庭&lt;/h2&gt;
&lt;p&gt;首先是我们家马上要迎来一个小天使，预产期在2月中。这小宝宝来之不易，从备孕开始，就做了很多工作，去了很多次医院，吃了很多药。后来怀上，孕早期我老婆每天都要去打针，几乎天天去医院。然后她还孕反很严重，很容易呕吐和累。总算挺过来了，现在就是好好休养，等待天使降临。名字已经准备好，我也做好了心理准备，希望一切顺利。&lt;/p&gt;
&lt;h2&gt;工作&lt;/h2&gt;
&lt;p&gt;今年没想到公司变动很大，大到几乎难以相信。&lt;/p&gt;
&lt;p&gt;首先是6月份我的上司离职了，据说是因为家庭（孩子）的缘故。我听到这个消息的时候整个脸都黑了，这是同事说的。当时我们正在吃饭，老板突然组织饭局，在吃饭的时候说的。我确实怔住了，因为我没预想到会这个样子，我以为他至少会做到公司上市。我的上市是个比我还年轻的人，不过我们的工作年限应该差不多。他是复旦高材生，人很聪明。不过最重要我觉得还是他做事比较认真负责。我觉得我们有很多相似的地方，所以我觉得我们配合起来挺好的。有他在这个公司我觉得还是放心的。但是他的家庭确实是个问题，上海人来深圳工作本来就是个不稳定的因数。他小孩好像是3岁，正是需要父亲的时候，所以我也很理解。他做到了公司的技术合伙人位置，从职位角度上看也到头了，公司短期来也无法上市，离开也是一种选择。&lt;/p&gt;
&lt;p&gt;公司并不会说没了谁就不行了。虽然他的离开我认为对公司来说是个损失。他的工作被拆分了几个人接手，不过即使过了好几个月，有很多东西都还未完全接手好，有些工作必须是他那个位置的人才好做，不过并不会有人接替他的位置。&lt;/p&gt;
&lt;p&gt;可是更大的变动还在后面。12月初老板Z突然找我到阳台聊天，第一句话就说他要离开了。然后就讲了一些其他东西。我没想到老板也有“离开”自己公司的时候。不过由于之前经历过上司的离职，这次造成的瞬间冲击没那么大，但是它是慢而久的那种。然后回想起之前的种种事情，原来是这么回事，一切都跟这个有关。当然，这个老板离开，就有另外一个老板掌管全部了。公司有两个联合创始人，老板Z和老板C。离开的创始人老板Z股份更多一点，是董事长。后来另外一个创始人老板C，也就是现今的唯一老板，他告诉我老板Z离开的原因：投资方的要求。从这件事我认识到，资本其实是一个很残酷的东西，并没有什么人情味可讲，利益就是一切。&lt;/p&gt;
&lt;p&gt;我想要是我要被迫离开自己创立的公司，我一定无法接受。从这一点来讲，离开的老板也是做了很大的牺牲，换了我，我想我可能无法做到他这样。以后我要是创业，我一定要避免这种事情发生。&lt;/p&gt;
&lt;p&gt;老板Z的离开，可能也导致了现在我们的部分负责人X离开。自从之前的负责人，也就是我的前上司离开后，X就成了我们部分负责人。他是老员工，据说跟了老板Z很久，当负责人也无可争议。他的离开据说也是因为家里小孩的缘故。不过不管什么原因，他离开了那我就可能要担负起整个IT部分的管理工作。老板C也跟我沟通过，由于我是一直做移动开发，做部门负责人肯定得懂服务器和后端开发，所以我最近一直在学习服务器的相关知识，学习后端开发。工作这么多人，我当然也了解过后端开发的一些知识，也玩过一下云服务。不过我从来没在公司做过后端开发。&lt;/p&gt;
&lt;p&gt;最近一个月来都在学习服务器部署的技能，已经熟悉了AWS和阿里云的一些架构和功能，部署了几个测试服务器。好在我已经看过不少架构的文章，知识都是相通的，我相信给予一定的时间，应该没太大问题。我近几年来一直想做一下后端开发，补一下自己的短板，这恰好是我的机会，我得好好把握。&lt;/p&gt;
&lt;p&gt;有变化就有机会，所以你得待得时间够长。我相信我有机会可以做得比他们更好。&lt;/p&gt;
&lt;h2&gt;其他&lt;/h2&gt;
&lt;p&gt;这一年我大部分都不算太忙，我还看了一些书，例如刘慈欣的《三体》。三部我都买了，不过现在只看了第一部，还不错，但是没超出我的预期。&lt;/p&gt;
&lt;p&gt;最近研究了Flutter framework的源码，收获还挺多。感觉自己代码理解能力提高了，可能是工作经历丰富了的缘故。&lt;/p&gt;
&lt;p&gt;一直来我都想把我念念想的一个APP给做了。而下半年我终于下定决心要在宝宝出生前做出第一版。所以我利于闲暇时间写了很多代码，现在算地基搭好了，垒了一部分上层。最近因为学些服务器相关知识，没那么多时间来弄了。不过快要到春节了，春节可以写一波。争取孩子出生前上线第一版。&lt;/p&gt;
&lt;h2&gt;2022年展望&lt;/h2&gt;
&lt;p&gt;2021年整体还算可以，发生了太多事，有按照预想的，有完全计划外的。2022年我会有人生的一个新阶段：当爸爸。那会是怎么的感觉，现在还不知道。职业上应该也能有突破，希望能迈入新阶段。不管怎样，我相信我的后端技能肯定有很大提升。&lt;/p&gt;
&lt;p&gt;希望2022年一切更好。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Fri, 31 Dec 2021 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2021-12-31:2021nian-nian-du-zong-jie.html</guid><category>总结</category></item><item><title>Flutter framework源码学习（一）</title><link>https://szuwest.github.io/flutter-frameworkyuan-ma-xue-xi-yi.html</link><description>&lt;h1&gt;Flutter framework源码学习（一）&lt;/h1&gt;
&lt;p&gt;以下内容只是我在团队技术分享里的keynote的摘录，实际上在分享会上会补充很多细节，这里就略过了。&lt;/p&gt;
&lt;h2&gt;Flutter架构&lt;/h2&gt;
&lt;p&gt;Flutter主要分为engine层，framework层和embeder层，engine层主要用c++写的，framework层主要是Dart语言写的，embedder层主要是平台相关的native语言写的。这里framework的源码最容易获得，也最方便容易学习。当你安装好Flutter环境之后，在Android studio打开任意Flutter项目，就可以从你的项目代码跳转到framework代码进行研究，这边跟Android是差不都的。&lt;/p&gt;
&lt;p&gt;&lt;img alt="flutter架构" src="images/flutter-architeture.jpg" /&gt;&lt;/p&gt;
&lt;h2&gt;Flutter framework 源码目录说明&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;基于stable分支，Flutter 2.2.3版本，Dart 2.12.3&lt;/li&gt;
&lt;li&gt;flutter/packages/flutter/lib目录下：522个文件，378733行代码（大量注释）&lt;/li&gt;
&lt;li&gt;重要源码目录说明&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;目录&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;flutter/packages/flutter/lib&lt;/td&gt;
&lt;td&gt;framework源码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;flutter/example/layers/raw&lt;/td&gt;
&lt;td&gt;raw目录下的例子有助于理解framework的底层layer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;flutter/bin/cache/artifacts/engine&lt;/td&gt;
&lt;td&gt;编译后的engine二进制文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;flutter/bin/cache/dart-sdk&lt;/td&gt;
&lt;td&gt;dark sdk源码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;flutter/bin/cache/pkg/sky_engine/lib&lt;/td&gt;
&lt;td&gt;framework底层源码&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;源码特点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;大量使用断言：普通的断言语句和断言代码块&lt;/li&gt;
&lt;li&gt;大量使用mixin来复用代码&lt;/li&gt;
&lt;li&gt;类属性使用getter和setter访问器&lt;/li&gt;
&lt;li&gt;异常捕获：try-catch-finally 增强程序健壮性&lt;/li&gt;
&lt;li&gt;用native关键字来定义在c++实现的方法&lt;/li&gt;
&lt;li&gt;@pragma(‘vm:entry-point')表明类或属性在c++中使用&lt;/li&gt;
&lt;li&gt;特别的语法：级联操作符 .. ，is! (当对象不是相应类型时返回 true)&lt;/li&gt;
&lt;li&gt;特别表达式：result = expr1 ?? expr2（若expr1为null, 返回expr2的值，否则返回expr1的值）；expr1 ??= expr2（若expr1为null, 则把expr2的值赋值给expr1）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;framework启动流程&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;默认找main.dart下的main方法&lt;/li&gt;
&lt;li&gt;启动流程：main—&amp;gt;runApp-&amp;gt;WidgetsFlutterBinding.ensureInitialized—&amp;gt;BindingBase构造函数—&amp;gt;XXBinding.initInstances&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关键代码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;oid&lt;/span&gt; &lt;span class="n"&gt;runApp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;WidgetsFlutterBinding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ensureInitialized&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="n"&gt;scheduleAttachRootWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="n"&gt;scheduleWarmUpFrame&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;WidgetsBinding&lt;/span&gt; &lt;span class="n"&gt;ensureInitialized&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WidgetsBinding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;WidgetsFlutterBinding&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;WidgetsBinding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;BindingBase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="p"&gt;....&lt;/span&gt;
    &lt;span class="n"&gt;initInstances&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;.....&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;mixin: 代码复用的利器&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;用mixin关键字定义，用on实现mixin的继承机制（类似），用with来使用mixin
一个类A使用了一个mixin B，可以简单理解为 A继承于B&lt;/li&gt;
&lt;li&gt;Class C extends B with A, 如果A，B，C中有同名方法，C的不会被覆盖。如果只有A， B有同名方法，A会覆盖B的方法。本类最优先，mixin比父类优先&lt;/li&gt;
&lt;li&gt;如果一个mixin A继承了(on)多个其他的mixin，那么一个类在使用（with）A时，必须也要使用其他的mixin。mixin使用通过super调用父mixin的方法。&lt;/li&gt;
&lt;li&gt;一个类使用（with）了多个mixin，那么出现同名冲突时最右的优先级最高(可以认为从右往左单向继承，越往左父层级越高)&lt;/li&gt;
&lt;li&gt;mixin本质是一个没有构造函数的类。不能直接实例化，专门用来代码复用，实现多继承的机制，但是没有c++多继承那么复杂。&lt;/li&gt;
&lt;li&gt;dart run test_main.dart 可直接运行dart源码，这很方便写测试代码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;把上面5点都理解了，就理解了mixin的本质。我为了理解BindingXXX的启动流程，自己写了个类似的测试代码：&lt;a href="https://github.com/szuwest/code_lib/blob/main/test_mixin.dart"&gt;test_mixin&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;initInstances方法调用链&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;initInstances方法调用链: WidgetsBinding—&amp;gt;RendererBinding—&amp;gt;SemanticsBinding—&amp;gt;PaintingBinding—&amp;gt;ServicesBinding—&amp;gt;SchedulerBinding—&amp;gt;GestureBinding—&amp;gt;BindingBase&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Binding类&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;GestureBinding&lt;/td&gt;
&lt;td&gt;提供了 window.onPointerDataPacket 回调，绑定 Framework 手势子系统，是 Framework 事件模型与底层事件的绑定入口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ServicesBinding&lt;/td&gt;
&lt;td&gt;提供了 window.onPlatformMessage 回调， 用于绑定平台消息通道（message channel），主要处理原生和 Flutter 通信&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SchedulerBinding&lt;/td&gt;
&lt;td&gt;提供了 window.onBeginFrame 和 window.onDrawFrame 回调，监听刷新事件，绑定 Framework 绘制调度子系统&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PaintingBinding&lt;/td&gt;
&lt;td&gt;绑定绘制库，主要用于处理图片缓存&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SemanticsBinding&lt;/td&gt;
&lt;td&gt;语义化层与 Flutter engine 的桥梁，主要是辅助功能的底层支持&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RendererBinding&lt;/td&gt;
&lt;td&gt;提供了 window.onMetricsChanged 、window.onTextScaleFactorChanged 等回调。持有PipelineOwner和RenderView(Root RenderObject), 它是渲染树与 Flutter engine 的桥梁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WidgetsBinding&lt;/td&gt;
&lt;td&gt;提供了 window.onLocaleChanged、onBuildScheduled 等回调。持有BuildOwner和Root Element, 它是 Flutter widget 层与 engine 的桥梁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BindingBase&lt;/td&gt;
&lt;td&gt;是其他Binding的基类，主要定义initInstances方法和公有属性window&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;三个树的创建&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;通过attachRootWidget方法先后创建了RenderObjectToWidgetAdapter和RenderObjectToWidgetElement&lt;/li&gt;
&lt;li&gt;RenderObjectToWidgetAdapter是root widget，它的child是APP的顶层widget。RenderObjectToWidgetAdapter的key是GlobalObjectKey&lt;/li&gt;
&lt;li&gt;RenderObjectToWidgetElement是root element, 持有root widget和root RenderObject。它被创建之后调用了mount方法。&lt;/li&gt;
&lt;li&gt;RenderView是 root RenderObject，由RenderBinding创建，它持有window&lt;/li&gt;
&lt;li&gt;WidgetBinding持有root element，而root element持有root widget和render object。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;window：Framework和Engine的桥梁&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ui.window是SingletonFlutterWindow，是Framework和Engine的桥梁，封装了原生跟flutter dart之间的各种回调。最后的UI渲染就是通过它传给engine的&lt;/li&gt;
&lt;li&gt;UI渲染数据是通过render方法传给engine层的&lt;/li&gt;
&lt;li&gt;window持有PlatformDispatcher，几乎所有的回调都是通过PlatformDispatcher来跟平台交互的&lt;/li&gt;
&lt;li&gt;onBeginFrame和onDrawFrame由engine主动调用，这两个callback都在SchedulerBinding里设置了。onBeginFrame最终会调用到一些动画相关的东西，onDrawFrame会调用到drawFrame，并将渲染数据通过window的render传给engine&lt;/li&gt;
&lt;li&gt;scheduleFrame:由flutter层调用，告知engine适时（VSync信号到来）回调onBeginFrame和onDrawFrame&lt;/li&gt;
&lt;li&gt;scheduleFrame和onDrawFrame配合就可以做到不断的更新界面&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;window这个类很关键，不同的framework版本还不太一样，但是渲染更新的接口都在这。&lt;/p&gt;
&lt;h3&gt;VSync信号&lt;/h3&gt;
&lt;p&gt;不管是手机还是电脑，为了更新显示画面，显示器是以固定的频率刷新的。当一帧图像绘制完毕后准备绘制下一帧时，显示器会发出一个垂直同步信号（VSync）
 下面两种图可以帮助理解VSync信号原理
 &lt;img alt="VSync信号" src="images/vsync.png" /&gt;
 &lt;img alt="VSync信号和渲染过程" src="draw-vsync.webp" /&gt;&lt;/p&gt;
&lt;h2&gt;Flutter帧渲染的整体流程&lt;/h2&gt;
&lt;p&gt;通过Widget Tree和Element Tree生成绘制树RenderObject Tree。RenderObject Tree会再进行Layout布局和Paint渲染等步骤生成Layer Tree，组装成scene，通过window传给engine层。在Flutter Engine层中，主要对Layer Tree进行光栅化、合成和上屏的操作。flutter中的layer，scene实际上只是c++层中的layer，scene的封装.&lt;/p&gt;
&lt;p&gt;&lt;img alt="渲染过程" src="images/painting.jpg" /&gt;&lt;/p&gt;
&lt;h2&gt;扩展：直接使用layer和window渲染界面&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;直接绕过三个树，采用底层layer来画控件（又回到命令式编程），连XXBinding的初始化都省了&lt;/li&gt;
&lt;li&gt;flutter/example/layers/raw的例子&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;raw目录下的例子真的挺有意思，一定要去看看，有意想不到的收获。&lt;/p&gt;
&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zhuanlan.zhihu.com/p/158089384"&gt;Flutter 核心原理与混合开发模式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zhuanlan.zhihu.com/p/208798157"&gt;Flutter框架层启动源码剖析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.csdn.net/XSF50717/article/details/104279579"&gt;Flutter UI渲染分析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://xiaozhuanlan.com/topic/7610425893"&gt;Flutter 核心原理：Flutter帧渲染的整体流程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://xieguanglei.github.io/blog/post/flutter-code-chapter-01.html"&gt;Flutter Framework 源码解析（ 1 ）—— 开篇和绘图引擎的用法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;如果你觉得这篇文章有用，请打赏小钱喝杯咖啡^_^
&lt;img alt="打赏" src="https://raw.githubusercontent.com/szuwest/szuwest.github.io/master/images/2018-02-21%20133111.jpg" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Sun, 19 Sep 2021 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2021-09-19:flutter-frameworkyuan-ma-xue-xi-yi.html</guid><category>Flutter framework</category></item><item><title>HashMap与红黑树学习总结</title><link>https://szuwest.github.io/hashmap-redblacktree.html</link><description>&lt;h1&gt;HashMap与红黑树学习总结&lt;/h1&gt;
&lt;h2&gt;HashMap解读（JDK1.8）&lt;/h2&gt;
&lt;h3&gt;带着问题去看代码：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;里面是怎么存储数据的(使用到的数据结构)?&lt;/li&gt;
&lt;li&gt;怎么计算哈希值，怎么解决哈希冲突?&lt;/li&gt;
&lt;li&gt;初始化容量是多少?不断加入数据时，如何进行扩容? 扩容后数据的存储位置是怎么样的 &lt;/li&gt;
&lt;li&gt;查找数据的时间复杂度 &lt;/li&gt;
&lt;li&gt;为什么要用红黑树?这里的红黑树实现有什么特点&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;HashMap特性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;hash算法效率好，高低位异或&lt;/li&gt;
&lt;li&gt;数组⻓度是2的n次幂，采用&amp;amp;运算来代替模运算&lt;/li&gt;
&lt;li&gt;采用modCount来实现failFast&lt;/li&gt;
&lt;li&gt;为LinkHashMap预留方法实现&lt;/li&gt;
&lt;li&gt;效率高，用链接来解决哈希冲突。插入数据时链接过长转为红黑树，删除数据时红黑树高度变低了转化为链表。&lt;/li&gt;
&lt;li&gt;数组扩容时链表会一分为二，红黑树也一样，红黑树甚至会转化为链表&lt;/li&gt;
&lt;li&gt;线程不安全。&lt;/li&gt;
&lt;li&gt;源代码里语句很简洁，经常一行代码包括N多赋值与判断，变量命名过 于简单&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hashtable是线程安全的，它是经典的哈希表实现(数组+ 链表)，没有红黑树。同样是哈希表，HashMap跟Hashtable的实现天差地别，可以看出HashMap追求极致的性能，而Hashtable是线程安全的，有加锁操作，性能不会好，所以就采用了最简单的实现&lt;/p&gt;
&lt;h2&gt;红黑树&lt;/h2&gt;
&lt;h3&gt;红黑树的由来&lt;/h3&gt;
&lt;p&gt;要完全理解红黑树，必须把下面这些概念都完全搞清楚。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;树》二叉树》二叉排序树》自平衡二叉树》2-3树和2-3-4树 (B树)》红黑树&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;树，只有一个父节点，有若干个子节点&lt;/li&gt;
&lt;li&gt;二叉排序树(Binary Sort Tree)，又称二叉查找树(Binary Search Tree)，又称 二叉搜索树。任意一个节点，它的值比它左孩子的值要大，比它右孩子的值要小&lt;/li&gt;
&lt;li&gt;平衡二叉树， 又叫AVL树（它的名字是它的发明者们的缩写），是一个二叉搜索树，它的任意一个节点的左右孩子高度差不超过1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;B树&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;B树是一种平衡的多路搜索树&lt;/li&gt;
&lt;li&gt;1 个节点可以存储超过 2 个元素(多个元素从小到大排 列)、可以拥有超过 2 个子节点。一个节点存储的元素个 数是它的儿子个数减1&lt;/li&gt;
&lt;li&gt;拥有二叉搜索树的一些性质  &lt;/li&gt;
&lt;li&gt;绝对平衡:每个节点的所有子树高度一致 &lt;/li&gt;
&lt;li&gt;2-3树和2-3-4树是B树的特例，2-3树是最简单的B树&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;2-3树、2-3-4树与红黑树&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2-3树、2-3-4树虽然能保持平衡，但是计算机不好实现&lt;/li&gt;
&lt;li&gt;红黑树(Red Black Tree) 是一种自平衡二叉查找树。红黑树是近似平衡 的二叉树，左右子树高差有可能大于 1，但是他的平均性能要好于AVL树&lt;/li&gt;
&lt;li&gt;红黑树对应的理论模型可以是2-3树，也可以是2-3-4树。普遍红黑树的实 现是采用2-3-4树模型&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因为2-3（2-3-4）树不好实现，所有把它当做一种模型，采用二叉树的方式（代码较好实现）来实现这个模型。这个就是红黑树。这就是红黑树的由来（&lt;strong&gt;当然这是我的猜测&lt;/strong&gt;）。&lt;/p&gt;
&lt;p&gt;红黑树怎么实现这个模型的呢？2-3树一个节点能存两个值，二叉树只能存一个值，所以要把2-3树拆分成两个节点：一个红色，一个黑色。红色代码它可以向上跟它的父节点合并成一个节点，对应的就是2-3树里有两个值元素的节点。这是就是基础。剩下就的就是定各种规则来让红黑树符合2-3树的特征。也就有了红黑树的5个规则。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一张重要的图：2-3-4树与红黑树&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;&lt;img alt="2-3-4树与红黑树" src="images/WechatIMG290.png" /&gt;&lt;/p&gt;
&lt;h3&gt;红黑树5个特性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;1) 节点是红色或黑色&lt;/li&gt;
&lt;li&gt;2) 根节点是黑色&lt;/li&gt;
&lt;li&gt;3) 空节点(NIL节点，有些文章也叫叶子节点)是黑色的&lt;/li&gt;
&lt;li&gt;4) 每个红色节点的两个子节点都是黑色。(从每个叶子到根的所 有路径上不能有两个连续的红色节点)&lt;/li&gt;
&lt;li&gt;5 )从任一节点到其每个叶子的路径上包含的黑色节点数量都相同 &lt;/li&gt;
&lt;li&gt;附加特性:插入的节点设为红色&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;红黑树5个特性(Why）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1)红色在2-3-4树模型中代表要跟父节点合并成一个节点 &lt;/li&gt;
&lt;li&gt;2)根节点没有父节点，没有办法合并，所以根节点不能是红色的&lt;/li&gt;
&lt;li&gt;3)由于根据特性1任何节点都有颜色，空节点也应该有颜色，被定义为 黑色在代码实现上比较方便(看TreeMap的实现就很明显)。&lt;/li&gt;
&lt;li&gt;第4和第5特性要结合一起来看，第5点规定从根到叶子节点的路径上只 算黑色节点数，而第4点规定红色节点不能连续，这两点保证了红黑树 的左右两个子树的高度差不会太大。这也是它性能不错的原因。&lt;/li&gt;
&lt;li&gt;附加特性:在代码实现红黑树的时候，插入的代码设为红色，红色的节 点不影响平衡(第5点特性)，这样可以减少对树的旋转操作&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你理解了上面的why，就不会再怕记不住它的5条规则了。&lt;/p&gt;
&lt;h3&gt;节点插入与删除涉及操作&lt;/h3&gt;
&lt;p&gt;为了保持红黑树的平衡(即符合红黑树的5个特性)，节点 插入或删除需要做一些操作:
1. 变色 
2. 左旋转或右旋转，或者将两种旋转组合
3. 涉及到的节点:当前插入的节点，兄弟节点，当前节点的父节点，爷爷节点，叔叔节点&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;插入总结&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;先看父，再看叔叔，然后看爷爷。若爷孙三代不在直线， 先父转，再变色, 再爷转。
这一句话概括了几乎所有情况。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;删除总结&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;要想理解红黑树的删除，必须先理解二叉排序树的删除操作。&lt;/p&gt;
&lt;p&gt;二叉查找树的结点无非是有两个子结点，有一个子结点和叶子结 点三种，其中有两个子结点的 M 结点的删除逻辑是：
&lt;em&gt; 首先寻找 M 结点左子树最大或右子树最小的结点 X
&lt;/em&gt; 然后把 X 结点的值复制到 M 结点
* 最后删除 X 结点，而这个结点要么是叶子结点，要么就只有一个 孩子&lt;/p&gt;
&lt;p&gt;所以，删除任一结点的问题就简化成了: &lt;strong&gt;删除一个最多只有一个孩 子的结点的情况(要么没有孩子，要么只有一个孩子)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;红黑树删除节点要领&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;删除红色叶子节点不影响平衡&lt;/li&gt;
&lt;li&gt;删除黑色节点会影响树的平衡，所以想办法从孩子节点， 或者兄弟节点，或者父节点借一个红色节点过来，并把它 变黑，这样树就恢复平衡了。&lt;/li&gt;
&lt;li&gt;如果没办法借到红色节点，只能将平衡交给父节点处理，递归向上调整。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;红黑树的实现&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;HashMap中的红黑树特性:代码复杂，成员变量多，包含 双向链表结构，空间冗余&lt;/li&gt;
&lt;li&gt;TreeMap: 按照2-3-4树模型实现，代码可读性强&lt;/li&gt;
&lt;li&gt;重复造轮子:手动实现一个红黑树&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;TreeMap是学习红黑树的最佳源码，没有之一。HashMap里的红黑树相当复杂，在删除一个具有两个孩子节点的地方不太一样，它是直接交换两个节点的，这点开始看得我头疼。&lt;/p&gt;
&lt;h3&gt;对网上红黑树参考资料吐槽&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;没有把红黑树规则3说清楚(说叶子节点是黑色的很容易让 人误解)&lt;/li&gt;
&lt;li&gt;大部分没有讲红黑树怎么来的，有什么用&lt;/li&gt;
&lt;li&gt;没有讲解红黑树的删除操作(删除比插入更复杂)&lt;/li&gt;
&lt;li&gt;对代码的解读只是简单的代码注释，估计作者也是半懂不 懂的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我写了个《HashMap、红黑树与B树》的PPT给我们团队做技术分享。该PPT已转为PDF传到了GitHub，感兴趣的可以看看。&lt;a href="https://github.com/szuwest/share_ppt"&gt;地址在这&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;终极疑问&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;红黑树最差情况是怎样的?&lt;/li&gt;
&lt;li&gt;基于2-3树和基于2-3-4树模型实现的红黑树有什么区别?&lt;/li&gt;
&lt;li&gt;HashMap里的红黑树数据结构什么搞那么复杂?(包含双向链表， 空间冗余)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;如果你觉得这篇文章有用，请打赏小钱喝杯咖啡^_^
&lt;img alt="打赏" src="https://raw.githubusercontent.com/szuwest/szuwest.github.io/master/images/2018-02-21%20133111.jpg" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Fri, 11 Jun 2021 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2021-06-11:hashmap-redblacktree.html</guid><category>HashMap 红黑树</category></item><item><title>Flutter APP加入信鸽推送通知方案</title><link>https://szuwest.github.io/flutter-appjia-ru-xin-ge-tui-song-tong-zhi-fang-an.html</link><description>&lt;h1&gt;Flutter APP加入信鸽推送通知方案&lt;/h1&gt;
&lt;p&gt;最近我们团队又采用Flutter开发一款新APP。而且最近由于信鸽（现在又叫腾讯云移动推送）修改按量收费，我们决定在新APP里加入信鸽SDK来做推送通知功能。&lt;/p&gt;
&lt;p&gt;我们之前主要主APP里已经使用了信鸽SDK来做推送通知功能，但这次是第一次在Flutter开发的APP上加入推送通知功能。当我们完全加入该功能之后，我觉得可以将这个技术方案分享一下。&lt;/p&gt;
&lt;p&gt;其实加入信鸽SDK的方式跟原生APP是一样的，只是在处理推送通知页面跳转方式不一样而已。&lt;/p&gt;
&lt;p&gt;先说说信鸽SDK的优势和注意事项。信鸽SDK以前是免费的，在去年才改成收费的，并入了腾讯云。所以他们才改名叫腾讯云移动推送。信鸽SDK还算比较稳定，毕竟是大厂开发的。收费后新增了很多统计功能，有一个重要的数据是通知开启率，还有就是通知点击率，还是很有用的数据。改成收费的的新版SDK有个问题，会跟我们的采用的iOS版的growingIO统计SDK冲突，导致growingIO活跃用户丢失。最后跟growingIO开发人员反馈后，修改growingIO SDK采用的统计方式才正常。&lt;/p&gt;
&lt;p&gt;安卓版的信鸽SDK集成了几大厂商的通道，比较容易集成到自己项目里，这也是他的优势。然后为了推送通知能尽量在两端保持一致，这里要专门提一下推送配置。&lt;/p&gt;
&lt;h2&gt;推送配置&lt;/h2&gt;
&lt;p&gt;我觉得这一点对于推送通知很重要，尽量将两端的配置保持一致，服务器或者运营编辑在推送一条消息的时候，可以较简单的完成，不容易出错。在安卓端，我们采用客户端自定义方式，即自定义intent-filter里的data字段里的scheme，host，path字段。这里scheme，host一般是固定的，每个页面的path不同。而iOS里采用开启附加参数方式。附加参数里有个必须字段就是path字段。这里两端的path字段就是一致，而且还可以根据页面情况增加其他参数。&lt;/p&gt;
&lt;p&gt;AndroidManifest.xml配置&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;activity&lt;/span&gt; &lt;span class="na"&gt;android:name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;.MainActivity&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;intent-filter&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;action&lt;/span&gt; &lt;span class="na"&gt;android:name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;android.intent.action.VIEW&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;category&lt;/span&gt; &lt;span class="na"&gt;android:name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;android.intent.category.DEFAULT&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;category&lt;/span&gt; &lt;span class="na"&gt;android:name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;android.intent.category.BROWSABLE&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
         &lt;span class="nt"&gt;&amp;lt;data&lt;/span&gt;
             &lt;span class="na"&gt;android:host=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;myhost&amp;quot;&lt;/span&gt;
             &lt;span class="na"&gt;android:path=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/main&amp;quot;&lt;/span&gt;
             &lt;span class="na"&gt;android:scheme=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;myscheme&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/intent-filter&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/activity&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;信鸽里的推送配置（采用客户端自定义方式）,还可以往页面传递参数param1&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;myscheme://myhost/main?param1=xx
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;信鸽里的iOS配置，开启高级配置里的&lt;strong&gt;附加参数&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;path=main
param1=xxx
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;服务器API推送也是按照类似的方式配置参数，跟服务器开发人员约定好了就行了。&lt;/p&gt;
&lt;p&gt;采用这种方式，可以专门写个文档，将每个要推送的页面对应的path,需要的额外参数都定义好，服务器开发人员或者运营编辑都可以查阅这个文档来创建推送。非常方便。&lt;/p&gt;
&lt;p&gt;那APP收到推送后将如何处理呢？其实也很简单。&lt;/p&gt;
&lt;p&gt;安卓端点击通知将会拉起相应配置的activity，在activity的onCreate或者onNewIntent方法里获取到intent，intent.getData获取到Uri,就可以提前里面的参宿parma1了。&lt;/p&gt;
&lt;p&gt;iOS端用户点击通知后会打开APP，信鸽已经处理了是冷启动和后台再次唤醒进入APP的情况，都会统一回调到一个接口，在回调接口里获取到一个字典数据。在早期免费版信鸽里，配置发附加参数就在这个字典里。改成收费版后，他们把附加参数转成json字符串放入了一个叫custom的字段里存储。将custom里的josn字符串取出来，再解析成字典就，就可以获取里面的path和param1参数了。然后再根据path来跳转到相应的页面，不再累述。&lt;/p&gt;
&lt;h2&gt;Flutter如何处理页面跳转&lt;/h2&gt;
&lt;p&gt;Flutter跟原生页面不同，但是Flutter页面天生支持path跳转，因为它是基于路由的。
Flutter APP接入信鸽跟原生APP是一样的，问题就在怎么将path传递到Flutter。这很简单，通过EventChannel。&lt;/p&gt;
&lt;p&gt;Flutter APP的iOS端几乎和原生一样，变了的是，将path和param1参数通过event channel传递到Flutter层。&lt;/p&gt;
&lt;p&gt;但是安卓端就稍微变了下。安卓原生APP有很多activity，每个activity都配置一个独立的path。到了Flutter APP只需一个MainActivity就可以了。&lt;/p&gt;
&lt;p&gt;安卓的配置就变成了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;myscheme://myhost/main?path=page2&amp;amp;param1=xx
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里myscheme://myhost/main就是不需要变的了（除非你还有的activity存在），要跳转的页面通过path参数来决定。native端MainActivity收到通知后需要将path等参宿传递到Flutter层&lt;/p&gt;
&lt;p&gt;native端需要注意点：
这里需要特别注意当native端收到推送通知回调时，Flutter的event channel可能没有准备好，需要先将数据用一个变量存起来，等event channel准备好之后，再传递到Flutter，然后将数据清除。&lt;/p&gt;
&lt;p&gt;这里特别说明一下，两端都是给Flutter层传递一个map数据：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{path:page2,param1:xxx}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Flutter层处理&lt;/h3&gt;
&lt;p&gt;Flutter层处理也有一定技巧。在main函数执行的之后，就要开始注册监听event channel。
当event channel收到数据通知的时候，拿到数据map。然后用map里的path来做跳转。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="err"&gt;接收&lt;/span&gt;&lt;span class="nt"&gt;native&lt;/span&gt;&lt;span class="err"&gt;传递来的参数&lt;/span&gt;&lt;span class="nt"&gt;obj&lt;/span&gt;
  &lt;span class="nt"&gt;void&lt;/span&gt; &lt;span class="nt"&gt;_onReceivePush&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;Object&lt;/span&gt; &lt;span class="nt"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;WGLog.log(&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;_onReceivePush&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;);&lt;/span&gt;
&lt;span class="s1"&gt;    if (obj != null &amp;amp;&amp;amp; obj is Map) {&lt;/span&gt;
&lt;span class="s1"&gt;      Map&amp;lt;String, dynamic&amp;gt; pushData = Map&amp;lt;String, dynamic&amp;gt;.from(obj);&lt;/span&gt;
&lt;span class="s1"&gt;      String path = pushData&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;path&amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="s1"&gt;;&lt;/span&gt;
&lt;span class="s1"&gt;      if (path != null &amp;amp;&amp;amp; path.length &amp;gt; 0) {&lt;/span&gt;
&lt;span class="s1"&gt;        if (!path.startsWith(&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;)) {&lt;/span&gt;
&lt;span class="s1"&gt;          path = &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nt"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;UserManager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;isLogin&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="err"&gt;_handlePush(path,&lt;/span&gt; &lt;span class="err"&gt;pushData)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nt"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;//未登录的情况，先缓存数据登录后再使用&lt;/span&gt;
          &lt;span class="err"&gt;gPushData&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="err"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="err"&gt;WGToast.showToast(&amp;quot;请先登录&amp;quot;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="err"&gt;}&lt;/span&gt; &lt;span class="nt"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;WGLog.log(&amp;quot;path&lt;/span&gt; &lt;span class="err"&gt;$path&lt;/span&gt; &lt;span class="err"&gt;error&amp;quot;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;}&lt;/span&gt;

  &lt;span class="nt"&gt;void&lt;/span&gt; &lt;span class="nt"&gt;_handlePush&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;String&lt;/span&gt; &lt;span class="nt"&gt;path&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;dynamic&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;if&lt;/span&gt; &lt;span class="err"&gt;(path&lt;/span&gt; &lt;span class="err"&gt;==&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;/home&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;||&lt;/span&gt; &lt;span class="err"&gt;path&lt;/span&gt; &lt;span class="err"&gt;==&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;/main&amp;quot;)&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
      &lt;span class="err"&gt;//首页&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nt"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="err"&gt;Navigator.pushNamed(context,&lt;/span&gt; &lt;span class="err"&gt;path,&lt;/span&gt; &lt;span class="n"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最重要的是 &lt;strong&gt;Navigator.pushNamed(context, path, arguments: args)&lt;/strong&gt;这句代码。这args就是从native层传过来的map，里面可能包含要跳转页面的参数。&lt;/p&gt;
&lt;p&gt;因为Flutter是基于路由的，所以路由注册很重要，还有相关页面如何获取或者处理传递过来的参数呢？
在MaterialApp的构造函数里有几个很重要的参数，routes，onGenerateRoute，onUnknownRoute。我们主要设置这几个参数来管理整个Flutter页面的路由。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyApp&lt;/span&gt; &lt;span class="kr"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;StatelessWidget&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// This widget is the root of your application.&lt;/span&gt;
  &lt;span class="kd"&gt;@override&lt;/span&gt;
  &lt;span class="nx"&gt;Widget&lt;/span&gt; &lt;span class="nx"&gt;build&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;BuildContext&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;MaterialApp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;xxxx&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="c1"&gt;//注册页面&lt;/span&gt;
      &lt;span class="nx"&gt;routes&lt;/span&gt;: &lt;span class="kt"&gt;AppRouter.routes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;onGenerateRoute&lt;/span&gt;: &lt;span class="kt"&gt;AppRouter.generateRoute&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;onUnknownRoute&lt;/span&gt;: &lt;span class="kt"&gt;AppRouter.unknownRoute&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;home&lt;/span&gt;: &lt;span class="kt"&gt;MainPage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;xxx&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;routes表示注册的路由表。当Navigator push一个命名路由的时候，会先到这个路由表里找对应path的路由，如果表里没有，就会进入onGenerateRoute，你可以在这里即时生成路由页面来处理，也可以不处理。如果onGenerateRoute没有处理，就会进入onUnknownRoute定义的路由页面。&lt;/p&gt;
&lt;p&gt;我是这样配置的：
不需要额外参数的页面，直接注册在routes路由表里，需要传递额外参数才能打开的页面，放到onGenerateRoute动态生成（因为这里可以直接获取到外部传入的args），最后准备一个UnknownPage.而且这个UnknownPage很重要。设想你的APP已经发布了1.0，2.0，3.0版本。现在向全部用户发送推送消息，这个消息对应的页面是2.0版本才加入的，那么还在用1.0版本的用户收到这个通知后会怎么样。他会进入这个UnknownPage，你可以在这个页面提示他的APP版本太低，给个升级按钮，点击后可以跳转到商店去升级APP。&lt;/p&gt;
&lt;p&gt;我把路由处理逻辑都放在一个这门的类来处理AppRouter。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppRouter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="c1"&gt;///注册路由。routes比generateRoute的优先级高，先在routes找，找不到再到generateRoute找，最后找不到的话就进入unknownRoute&lt;/span&gt;
  &lt;span class="c1"&gt;///&lt;/span&gt;
  &lt;span class="kr"&gt;static&lt;/span&gt; &lt;span class="kr"&gt;final&lt;/span&gt; &lt;span class="nx"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;WidgetBuilder&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;routes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="s1"&gt;&amp;#39;/home&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;BuildContext&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;HomePage&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;/bindSuc&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;BuildContext&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;BindSucPage&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;/orderList&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;BuildContext&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;OrderListPage&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="c1"&gt;// 我的订单列表&lt;/span&gt;
 &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="c1"&gt;//要注意页面参数的配置&lt;/span&gt;
  &lt;span class="kr"&gt;static&lt;/span&gt; &lt;span class="kr"&gt;final&lt;/span&gt; &lt;span class="nx"&gt;RouteFactory&lt;/span&gt; &lt;span class="nx"&gt;generateRoute&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;WGLog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;settings ${settings.toString()} &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dynamic&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;arguments&lt;/span&gt; &lt;span class="kr"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dynamic&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/project&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nb"&gt;String&lt;/span&gt; &lt;span class="nx"&gt;pid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pid&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;project&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;HomeProject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;: &lt;span class="kt"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;MaterialPageRoute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nx"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;ProjectDetailPage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;project&lt;/span&gt;: &lt;span class="kt"&gt;project&lt;/span&gt;&lt;span class="p"&gt;,);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/applyDetail&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nb"&gt;String&lt;/span&gt; &lt;span class="nx"&gt;_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_id&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ApplyInfoModel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;apply_id&lt;/span&gt;: &lt;span class="kt"&gt;_id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;MaterialPageRoute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nx"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;ApplyOrderDetailPage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;model&lt;/span&gt;: &lt;span class="kt"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;//....&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="c1"&gt;/// 未知路由页面。一般是APP版本太低，推送过来的页面未定义&lt;/span&gt;
  &lt;span class="kr"&gt;static&lt;/span&gt; &lt;span class="kr"&gt;final&lt;/span&gt; &lt;span class="nx"&gt;RouteFactory&lt;/span&gt; &lt;span class="nx"&gt;unknownRoute&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;MaterialPageRoute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;UnknownPage&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我认为generateRoute里的处理非常奇妙。设想有一个页面是一定要传一个id才可以正常浏览的。一般我们都会把这个页面的构造函数定义一个参数，由外部初始化的时候传入。如果将这个页面也支持注册到路由表routes里，那么你要获取传递过去的参数就有点麻烦了。你可能需要在该页面里面通过 &lt;strong&gt;var args=ModalRoute.of(context).settings.arguments&lt;/strong&gt;方式来获取。这样不直观。&lt;/p&gt;
&lt;p&gt;所以我认为这样处理Flutter的跳转是比较完美的方式。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;如果你觉得这篇文章有用，请打赏小钱喝杯咖啡^_^
&lt;img alt="打赏" src="https://raw.githubusercontent.com/szuwest/szuwest.github.io/master/images/2018-02-21%20133111.jpg" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Wed, 03 Feb 2021 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2021-02-03:flutter-appjia-ru-xin-ge-tui-song-tong-zhi-fang-an.html</guid><category>Flutter 推送通知 信鸽</category></item><item><title>我的35岁</title><link>https://szuwest.github.io/wo-de-35sui.html</link><description>&lt;h1&gt;我的35岁&lt;/h1&gt;
&lt;p&gt;35岁是一道坎，因为很多文章说程序员过了35岁就很容易失业了。&lt;/p&gt;
&lt;p&gt;35岁真的是人生的一道坎，不只事业，其他方方面面也是。&lt;/p&gt;
&lt;p&gt;有个词语叫&lt;strong&gt;三十而立&lt;/strong&gt;，大家都说30岁是人生的一道坎，一个分界线。其实我认为35才是，特别是对于现代的我们。&lt;/p&gt;
&lt;p&gt;三十岁确实也是一个分界线，很多事情都开始变得不一样，但是这个时候的人往往还没开始准备好的，或者还并未真正意识到它的不同。随着后面几年的经历，会慢慢变得不同，人的想法也慢慢经历一些转变，一些之前不会想的事情慢慢开始考虑了，一些从没经历的事情也都开始经历，各种压力随之而来，各种焦虑而不止。&lt;/p&gt;
&lt;p&gt;我32，33岁第一次经历深夜无法入睡的焦虑，那是因为买房。时时刻刻的焦虑，有时候无法入睡。后来当我确定来买这套房子，叫了首付之后，我彻底睡了个安稳觉。&lt;/p&gt;
&lt;p&gt;可是没有过一年我又开始焦虑，焦虑公司会倒闭我找不到好的工作。也开始焦虑自己的未来。后来我换到了这家公司后，才没那么焦虑了。但是未来仍然不算稳当。&lt;/p&gt;
&lt;p&gt;所以，35岁思考的更多，家庭，事业，生活，健康。我现在觉得健康是如此之重要，什么叫中年人不敢生病。而且，我还有不少操心放不下的。最近一年来我经常半夜醒来睡不着。&lt;/p&gt;
&lt;p&gt;35的我考虑了更多将来的事情，因为你现在不想，以后就更难了。给自己更多准备，更多的后路，就避免被动。&lt;/p&gt;
&lt;p&gt;这些年来，因为自己是leader的缘故，可以看到更多以前看不到的东西，思考得更多了。我觉得35岁不是程序员生涯的结束，而恰恰是其职业生涯高峰的开始。因为这个阶段的程序员经验丰富，什么都经历过，做出来的东西有保障。有些人说35岁没有混到管理层真是白混了。但是哪里有那么多管理岗位呢？国内的IT行业也开始越来越成熟，那种乱加班的现象也少了，人们也越来越注重工作和生活的平衡。所以我觉得35岁的程序员生涯远未结束。&lt;/p&gt;
&lt;p&gt;35岁的家庭生活经历更多矛盾，体验了更多的痛苦。有时候我甚至怀疑生活的本质是痛苦。不管怎样，生活还是得一步步进行下去。&lt;/p&gt;
&lt;p&gt;35岁是一道坎。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Sun, 29 Nov 2020 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2020-11-29:wo-de-35sui.html</guid><category>35岁</category></item><item><title>移动端文档边缘检测AI方案</title><link>https://szuwest.github.io/yi-dong-duan-wen-dang-bian-yuan-jian-ce-aifang-an.html</link><description>&lt;h1&gt;移动端文档边缘检测AI方案&lt;/h1&gt;
&lt;h3&gt;需求&lt;/h3&gt;
&lt;p&gt;先说一下我们的需求：
我们需要用户拿手机扫描自己的体检单，然后我们识别体检单的内容，结构化数据后存起来用。
这里面解决方案一般都是手机客户端拍一张照片上传到服务器识别。而这张照片的好处直接影响了服务器的识别准确率。如果照片里有掺杂这别的内容就更不好了，最好照片里只有文档内容。这里就使用到了边缘检测技术。&lt;/p&gt;
&lt;h3&gt;传统的边缘检测技术&lt;/h3&gt;
&lt;p&gt;在传统的边缘检测方案中，大部分都是采用OpenCV里的边缘检测算法。OpenCV库在图像处理和识别方面真是鼎鼎大名，运用十分广泛。OpenCV库里的用到的叫cany和findContours算法，而且cany还有好几个版本。但是这个算法也不完美，很容易识别错，因为现实的场景也很复杂。&lt;/p&gt;
&lt;h3&gt;HED算法方案&lt;/h3&gt;
&lt;p&gt;现在哪里都流行用AI算法来优化。我在网上找到了fengjian大神的文章。原来我很早的时候就看到他写的&lt;a href="http://fengjian0106.github.io/2017/05/08/Document-Scanning-With-TensorFlow-And-OpenCV/"&gt;这篇&lt;/a&gt;文章。然后就按照他的方案来开干。我运行了他的demo，大致能得到满意的效果。但是他的文章很旧了，用到的TensorFlow还是很老版本，而且只开源了iOS版本。&lt;/p&gt;
&lt;p&gt;经过我们的摸索，还有参考了别的一些demo，我终于把它移植到了TensorFlowLite，而且我还做了安卓的版本。这样两端的解决方案一致，可以运用到正式项目中。&lt;/p&gt;
&lt;p&gt;当然，我们自己也做了很多优化，还有自己重新收集了一些我们场景的照片来训练新的模型。最终达到了不错的效果。&lt;/p&gt;
&lt;p&gt;我把最初移植做的demo放到github上，给有需要的人参考。这里最大优势就是安卓和iOS的方案都有。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/szuwest/doc_detect_android"&gt;安卓版本&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/szuwest/doc_detect_ios"&gt;iOS版本&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;如果你觉得这篇文章有用，请打赏小钱喝杯咖啡^_^
&lt;img alt="打赏" src="https://raw.githubusercontent.com/szuwest/szuwest.github.io/master/images/2018-02-21%20133111.jpg" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Fri, 27 Nov 2020 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2020-11-27:yi-dong-duan-wen-dang-bian-yuan-jian-ce-aifang-an.html</guid><category>边缘检测 HED OpenCV TensorFlowLite</category></item><item><title>APP推送和APP换起技术方案探讨</title><link>https://szuwest.github.io/apptui-song-he-apphuan-qi-ji-zhu-fang-an-tan-tao.html</link><description>&lt;h1&gt;APP推送和APP换起技术方案探讨&lt;/h1&gt;
&lt;h3&gt;目标：&lt;/h3&gt;
&lt;p&gt;尽量将APP两端设计成统一的方案，减少服务器适配工作量，最好可扩展，能复用。&lt;/p&gt;
&lt;h3&gt;方案说明：&lt;/h3&gt;
&lt;p&gt;我们知道APP推送目的是将对用户有用的信息，主动推给APP，作为通知信息展示，用户通过点击通知进入APP相关页面。&lt;/p&gt;
&lt;p&gt;这里只要涉及服务器端和APP端两个技术点：服务器推送什么样的信息过来，APP这边如何解析接收到的信息，打开相应的界面和解析数据。&lt;/p&gt;
&lt;p&gt;服务器只有一个，所以尽量让服务器发送给两端的数据较为一致，这需要一开始就应该想好整个系统的设计方案。&lt;/p&gt;
&lt;p&gt;安卓和iOS是两个完全不同的平台，相关技术栈也不一样。不过基本都要依赖厂商的通讯通道来个APP发通知：苹果有自己的APN通道，Google也有自己的通道，当然在中国，各个厂商有自己的通道。有很多第三方SDK都整合多家厂商的通道。我们使用了信鸽（腾讯云移动推送）的SDK。之所以选他家，主要是他们集成了主流的厂商，文档也还可以（以前他们有免费版）。&lt;/p&gt;
&lt;p&gt;为了能拉起APP不同的界面，我们需要定义一套规则。iOS的方案比较固定，只能通过json参数，这是它系统框架决定的。而安卓就不太一样，不同的厂商支持不同的方式，APP存活状态和未启动状态也不太一样。不过有一个方案是所有情形都适用的：就是通过定义Activity的scheme方式。&lt;/p&gt;
&lt;p&gt;scheme方式是一种URI，我们经常用的URL地址也是一种URI。URI在iOS或者安卓都经常使用来拉起页面。例如我们的APP主页可以定义URI为: wegene://com.wegene.app/main。这里wegene为schema，host为com.wegene.app，path为/main，还可以携带参数。wegene://com.wegene.app/main?index=1表示首页的第二个tab（index从0开始算）。&lt;/p&gt;
&lt;p&gt;这样的话，服务器要推送信息的时候，只需设置path和相关参数就行了。iOS端和安卓端专门弄一个组装函数来组装path和参数：安卓端拼凑URI，设置为action；iOS端将path和参数组成json就行。&lt;/p&gt;
&lt;p&gt;安卓端需要通过intentFilter设置好action，然后在activity中获取参数。这里需要注意的是如果APP是未启动的状态，那么这个activity将是第一个被启动的页面，越过了你的启动屏甚至首页，所以要考虑是否要登陆鉴权，必要数据是否已经获取到等问题。iOS端则需要从通知回调里拿到数据，解析出来path和参数信息。这里面要考虑冷启动的时候，根据path来跳转相关界面时，首页是否已经初始化完成。不然可能会出问题，例如要获取NavigationController来push操作，但是NavigationController还未初始化完成。&lt;/p&gt;
&lt;p&gt;安卓端每个页面都要设置intentFilter和定义path，而且越过了主界面。当用户看完推送界面并关闭了那个页面，很多APP都会进而打开APP主页。安卓其实也可以统一先打开主页，然后再由主页打开相关页面。这里需要服务器通知配置URI为首页的URI，然后将要跳转的path作为参数附在URI后面。当然这里的path值需要URL编码，跟其他参数一样都要编码。然后在主页通过intent的data里解析出来path和其他参数，进而打开相关页面。&lt;/p&gt;
&lt;p&gt;通过设置特殊scheme的方式来进行推送跳转有很多好处。例如iOS和安卓两端通用；不但支持推送拉起，也支持其他APP或者网页拉起（当然网页还有更好的方式）。如果path设置的跟网页的路由一直，那就更容易三端保持一致性了。&lt;/p&gt;
&lt;h3&gt;APP唤起&lt;/h3&gt;
&lt;p&gt;我们经常希望自己的APP能被其他应用唤起，进而提高活跃度。APP唤起主要有三种情形：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由系统唤起，例如收到推送通知&lt;/li&gt;
&lt;li&gt;有第三方APP唤起，例如有合作APP唤起&lt;/li&gt;
&lt;li&gt;通过网页端直接唤起&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过推送唤起上面已经说了，通过第三方APP唤起其实也基本一样，主要通过预定义的scheme唤起。安卓端是跟推送完全一致的，iOS端推送是系统自动唤起的，第三方APP是通过scheme来唤起通信的。网页端其实也可以通过scheme方式来唤起，只是网页端多了些限制（会先弹出一个系统确认框）。&lt;/p&gt;
&lt;p&gt;不过网页端有更好的实现方式：直接通过URL来唤起APP相应界面。安卓端这种技术叫APP Link，iOS端叫 Universal Link。其实安卓的APP Link应该是参考iOS的UniversalLink来做的，所以他们的技术基本一致，都要要服务器验证。这里不讲具体的实现细节了。&lt;/p&gt;
&lt;h4&gt;微信唤起APP，hybrid APP，推送&lt;/h4&gt;
&lt;p&gt;这里特别说一下微信唤起APP。以前要在微信里拉起自己的APP，很困难，会因为他限制了scheme方式和UniversalLink（AppLink）方式。不过最近微信开放了他的一些能力。例如APP里可以直接拉起微信小程序不受数量限制，微信里可以拉起第三个APP了。这些都是通过微信SDK实现的。&lt;/p&gt;
&lt;p&gt;这跟hybrid APP，推送有什么关系呢？其实没太大关系。但是如果你的APP是hybrid APP，有内嵌网页，经常要拦截URL跳转原生界面，也经常要推送消息跳转原生界面，就可以将他们都联系起来。&lt;/p&gt;
&lt;p&gt;微信唤起APP可以传入一些参数，这个参数如果是当前网页URL就好了。然后APP里内嵌网页经常要拦截网页URL，然后推送信息里也可以专门定义一个URL参数来指定要跳转的页面。这里就可能专门建立一个类来处理URL的跳转了，因为他们的跳转逻辑是一致的。这样就可以做到最大的逻辑复用，减少bug。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;如果你觉得这篇文章有用，请打赏小钱喝杯咖啡^_^
&lt;img alt="打赏" src="https://raw.githubusercontent.com/szuwest/szuwest.github.io/master/images/2018-02-21%20133111.jpg" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Tue, 04 Aug 2020 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2020-08-04:apptui-song-he-apphuan-qi-ji-zhu-fang-an-tan-tao.html</guid><category>推送 唤起 拉起</category></item><item><title>我的十年</title><link>https://szuwest.github.io/wo-de-shi-nian.html</link><description>&lt;h1&gt;我的十年&lt;/h1&gt;
&lt;p&gt;明天就是我工作十年时间了，真没想到时间过得这么快，完全不等你也不管你怎样。&lt;/p&gt;
&lt;h3&gt;工作轨迹&lt;/h3&gt;
&lt;p&gt;2010年5月底，我终于做完了毕业答辩。只休息了几天，我就拿着我的毕业答辩去公司报道。我第一家公司是叫国民技术，一家做芯片的公司。我去做芯片验证工程师。做了差不多一年，我觉得我还是做回我的老本行--软件开发。先是去了一家小公司工作学习，后来是去了迅雷，做了一年多想去创业就加入了一个初创公司。在初创公司待了差不多一年又回到迅雷。在迅雷又工作了3年半，后来被老领导挖去了一家人工智能创业公司。本想着抱大腿的，谁知公司风云突变，一年时间大家又各奔东西。我自己加入了现在的这家公司，一直到现在。十年时间，除了迅雷和现在这家公司待的时间长一些，其他的公司都只待了一年左右，也是挺感慨的。&lt;/p&gt;
&lt;h3&gt;得与失&lt;/h3&gt;
&lt;p&gt;回想这十年，我不算成功，也不算失败吧。除了第一年是做偏底层的东西，九年时间我都是做移动开发，在iOS和安卓端也算积累了算丰富的经验，也还算专注。刚开始的时候我自己还做了很多小应用，在移动手机爆发时代也通过广告赚了点零用钱。后来工作忙和谈恋爱就没怎么继续了。在管理方面有点小经验，在迅雷的时候短暂带过团队，在这个公司从零开始建立小团队和项目，也算开可以吧。&lt;/p&gt;
&lt;p&gt;比较遗憾的是我没有做过后端开发。移动端局限还是太多，要想深入技术，还是后端开发比较好。希望以后能在这方面改善。&lt;/p&gt;
&lt;p&gt;十年来也让我更认清了自己，我一直以为自己只要够努力，技术一定能达到自己的要求。但是随着时间的推移，我认清自己没有技术上的天赋，而大学的时候，由于主观跟客观的原因，我没能按照意愿学好知识，要想在技术上拔尖，就更加难了。不过我也认识到，并不是技术很牛逼，才会成功。每个人都有自己的长处，而且我相信就凭我现在的能力，只要自己将来能找对方向，也仍然可以成功过。&lt;/p&gt;
&lt;h3&gt;人生与生活&lt;/h3&gt;
&lt;p&gt;想想20年前，我还是个六年级的小学生。10年前我刚大学毕业，而今已经30多了。每个10年，人生都变化很大。这个十年，我也是从一无所有，到买车，结婚，买房，准备生孩子。除了还没有孩子，其他我觉得都还行，基本达到自己的要求。和老婆一起也很多年，生活也还不错，竟然有效磕碰，但这就是生活。我最近3年来，脑子里明显感觉到自己跟年轻的不一样，感到自己不再是以前的自己，自己是成熟了。我想这就是10年的磨砺吧&lt;/p&gt;
&lt;p&gt;自己在同学和年纪相近的同事当中，算不上成功，也不是最差的。貌似现在有联系的同学也没有出现已实现财富自由的人。大家都在为将来努力。因为买房的缘故，我背负了一些债务，之前有些压力，现在好了很多。&lt;/p&gt;
&lt;h3&gt;展望下个十年&lt;/h3&gt;
&lt;p&gt;有个港剧里有个经典台词：人生能有几个十年。&lt;/p&gt;
&lt;p&gt;我最近感悟，人一定要提前规划自己的未来，思考自己的未来之路。越早思考越好，然后为之谋划，这样才能成功。&lt;/p&gt;
&lt;p&gt;我想象十年后的我又是什么样的呢？其实还真是不太好说，但是有几点是希望自己能做到的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;一是希望自己保持身体健康
我觉得这是最重要的。这是一切的基础。随着年纪增长，我觉得自己的身体已不如从前，而且一些小毛病就会随之而来。只有身体健康，才能继续工作，保持收入，才能照顾他人，享受生活。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;希望自己继续保持学习的习惯。最近我发现自己能安静的看书了。在我步入高中之后，我觉得我很难安静的学习看书。现在我觉得我开始找回我自己了，这是好事，希望能继续。作为技术从业人员，活到老，学到老，要跟上时代。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;希望自己在经济条件比较好之后，自己创业。这是我一直的梦想。虽然我最近变通了下，觉得不一定得创业，也可以做自由职业者。不过我的宗旨是：为自己而活，为自己打工，不为别人。&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Mon, 25 May 2020 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2020-05-25:wo-de-shi-nian.html</guid><category>十年 心得</category></item><item><title>《深度学习入门》读后感</title><link>https://szuwest.github.io/shen-du-xue-xi-ru-men-du-hou-gan.html</link><description>&lt;h1&gt;《深度学习入门：基于Python的理论与实现》读后感&lt;/h1&gt;
&lt;p&gt;最近因为做一个功能要用到深度学习相关知识和TensorFlowLite，我决定认真的学一下深度学习的知识。以前总觉得AI太高大上，怕自己看不懂。但是这次做这个功能让我意识到，如果自己再不学习，过几年可能就太晚了。我估计三五年之后，AI会渗透到各行各业，连APP开发也需要掌握一些深度学习的知识。&lt;/p&gt;
&lt;p&gt;先说一下我们APP做的这个功能：用相机扫描检验单（体检单），将检验单截图上传到服务器，服务器进行OCR识别，并将数据结构化，用于生成用户的基因报告。这里涉及到APP开发的部分是将相机中的检验单检测并裁剪出来，上传到服务器识别。这里识别和裁剪部分很重要。将检验单准确的裁剪出来，可以提升OCR准确率。如果随意拍了一张图片，除了检验单部分，可能还包含了其他杂乱的背景，甚至其他不相关的文字内容。所以只将检验单部分裁剪出来是很重要的。&lt;/p&gt;
&lt;p&gt;如果采用传统的OpenCV边缘检测方法来在图片中来找检验单，效果不尽人意。但是如果采用深度学习的方式来找检验单，那就可以得到很好的效果。当然这也是我们从fengjian大神博客学到的。我们采用他的方法，自己准备了一批数据训练，得到一个模型。而我们APP的任务就是在手机上采用TensorFlowLite运行我们的模型来推断得到相关结果。&lt;/p&gt;
&lt;p&gt;因为做这个功能，我了解了下TensorFlowlite，但是我们深度学习却是了解不多。所以我决定找本书来学习一下。网上查了下，《深度学习入门：基于Python的理论与实现》这本书挺受好评，问了下我同事，他也看过这书，说写得不错，可以看下。所以我就入手了。看得过程中，我就觉得这本书真是一本好书，是&lt;strong&gt;写给普通程序员的深度学习入门书&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;这本书真的写得挺好，理由：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由浅入深，从Python基础，感知机，最简单的神经网络，再卷积神经网络，循序渐进。&lt;/li&gt;
&lt;li&gt;几乎每行代码都进行说明，还有完整的运行示例。真的是只有日本人这么细致的人才写得出来。这是我真实感受。虽说Python是一门挺简单的语言，但是它有大量的库，特别是numpy有很多函数，对于本身就没有用过Python的人来说，不解释代码的意思根本很难看懂。而且代码跟理论结合理解，非常符合程序员思维。&lt;/li&gt;
&lt;li&gt;加入了大量的图标来解释说明。不管是一些数学原理，推导过程，计算过程，都有图表进行说明。&lt;/li&gt;
&lt;li&gt;内容编排比较合理，很多需要预备的知识先在前面讲了。例如Python基础，numpy基础。激活函数，导数，数值微分，梯度，误差反向传播。可以看得出作者精心编排。我自己数学一般，我看起来只有后面的两章很吃力，其他的都还好。我觉得这得益于作者的内容编排&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;网上有不少人说这本书是可以零基础入门。也对也不对。如果是完全不懂计算的人，我觉得还是很难看到的，毕竟这里涉及到很多代码逻辑，我觉得至少要有一定的计算机基础和编程基础。我看这本书的时候，我特意看得很慢，而且会反复回退去查看相关章节。例如如果看到某个函数忘了是怎么实现的，就应该回退去查看它的实现和推导过程。&lt;/p&gt;
&lt;p&gt;我个人觉得这本书写得很好，看完了让人感觉原来AI不是那么复杂，仿佛自己马上可以手动实现一个神经网络。我原本对AI有点怯，怕对里面的数学看不栋。但是这本书它打消了我的恐惧，让我比较理解了深度学习，人工智能，以后面对AI不再是一个黑盒，而是能想象到它里面的实现逻辑，它为什么能学习，它是怎么学习的。&lt;/p&gt;
&lt;p&gt;当然这也只是第一步，但是我觉得这一步迈得挺好的。感谢斋藤康毅。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;更新CNN解释器&lt;/h2&gt;
&lt;p&gt;最近发现一个github开源库解释CNN的，可以结合这本一起看。这本是对CNN的讲解我觉得挺不错的，但是可能看一遍还是不是很理解，我是看了两三遍仍然觉得不够。后来看了这个CNN解释器库之后觉得好了些，因为它用图形具象化了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="cnn解释器插图" src="https://poloclub.github.io/cnn-explainer/assets/figures/convlayer_overview_demo.gif" /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;如果你觉得这篇文章有用，请打赏小钱喝杯咖啡^_^
&lt;img alt="打赏" src="https://raw.githubusercontent.com/szuwest/szuwest.github.io/master/images/2018-02-21%20133111.jpg" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Tue, 05 May 2020 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2020-05-05:shen-du-xue-xi-ru-men-du-hou-gan.html</guid><category>深度学习 人工智能 读后感</category></item><item><title>探讨从H5页面拉起APP的技术方案和问题</title><link>https://szuwest.github.io/tan-tao-cong-h5ye-mian-la-qi-appde-ji-zhu-fang-an-he-wen-ti.html</link><description>&lt;h1&gt;探讨从H5页面拉起APP的技术方案和问题&lt;/h1&gt;
&lt;p&gt;从H5页面里拉起或叫唤起APP（APP需已经安装在手机上），有两种技术方案，一种通过HTTP链接（iOS叫 Universal Link，安卓叫APP Links技术）拉起技术，一种是通过自定义scheme拉起技术（也有叫深度链接deeplink的）。这两个技术适用不同的场景，也有不同的局限性。&lt;/p&gt;
&lt;h2&gt;一、通过HTTP链接拉起&lt;/h2&gt;
&lt;p&gt;要想通过HTTP(s)链接直接拉起APP，需要APP本身做一些配置和写一些代码实现，还需要在你网站服务器配置相关的json文件。例如配置服务器host，能打开页面的path等。有些了这些配置，苹果服务器或者谷歌的服务器验证了这些配置，就可以通过相关的HTTP链接来打开APP了&lt;/p&gt;
&lt;p&gt;这里不管是iOS叫 Universal Link，还是安卓的APP Links，他们的技术方案是基本一样的，只是不同的平台稍微有些不一样的而已。基本规则是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先按照要求生成一个配置文件，json格式的，里面包括了一些必要的信息，例如安卓的包名，apk签名等，iOS的appID,匹配URL的path&lt;/li&gt;
&lt;li&gt;将配置文件放到你的网站根目录下的.wellknown目录下，让苹果或谷歌的服务器能从这里下载这个配置文件。这个文件是关键，因为苹果或谷歌要从你网站里拉取到这个配置文件。由于你的网站只有你自己有权限上传配置文件，从而保证了安全性。&lt;/li&gt;
&lt;li&gt;在你的APP里配置相关网站host。还有你的APP被拉起后怎么处理（打开相应页面）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;网络上有很多相关教程，官方文档也有，配置起来不难，测试起来有几个问题。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;确保你的手机能跟苹果或者谷歌的服务器能正常通信&lt;/li&gt;
&lt;li&gt;验证是在你安装APP的时候，只在这时候验证。所以你遇到奇怪的问题可以卸载重装试试。对于iOS来说，你修改了配置文件中的path后，要你的APP升级后或重新安装后才会生效&lt;/li&gt;
&lt;li&gt;iOS需要跨域才能跳转。就是说你配置的host是www.xxx.com,在Safari中打开www.xxx.com后，在这个页面跳转www.xxx.com/yyyy, 即使你在配置文件里配置了yyyy这个path，这里并不会拉起你APP。因为这里并没有跨域。但是在ww.xxx.com/yyyy这个页面上，你往下拖动，就会看到顶部有个banner（Safari自动生成的），可以通过这个banner打开APP。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;二、通过自定义scheme拉起&lt;/h2&gt;
&lt;p&gt;首先让我们来看一下 URL 的组成：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[scheme:][//host][path][?query][#fragment]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里一般做法是每个APP都自定义一个唯一的scheme，通过这个scheme来拉起APP。由于每个APP都会定义自己独有的scheme，所以一般还通过scheme来判断某个应用是否已安装在手机上。host是可选的，path是必须的。一般都是通过path来定义指定打开APP特定的页面，同时通过query来携带参数。HTTP链接其实就是一种特殊的scheme。&lt;/p&gt;
&lt;p&gt;通常我们都是同构scheme来拉起别人的APP的。例如超级APP微信的scheme是weixin://,淘宝APP的scheme是taobao://。&lt;/p&gt;
&lt;p&gt;scheme方式是安卓和iOS都支持的。我们微基因APP的scheme是wegene，host是com.wegene.app，首页的path是/main.要打开微基因APP首页，可以通过下面这个URL：wegene://com.wegene.app/main。我们可以在H5页面里配置这个URL超链接，点击这个超链接就可以打开APP了。&lt;/p&gt;
&lt;p&gt;当然，APP里还是要做相应处理的。iOS要先在xcode里配置scheme，还有在AppDelegate里回调里会获取到这个URL，解析这个URL，获取到path，根据是/main，就可以知道是要打开首页了。而安卓则需要在你的MainActivity的intent-filter里配置data(scheme,host,path)，action，category等(该activity要设置export为true)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;intent-filter&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;action&lt;/span&gt; &lt;span class="na"&gt;android:name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;android.intent.action.VIEW&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

                &lt;span class="nt"&gt;&amp;lt;category&lt;/span&gt; &lt;span class="na"&gt;android:name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;android.intent.category.DEFAULT&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;category&lt;/span&gt; &lt;span class="na"&gt;android:name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;android.intent.category.BROWSABLE&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

                &lt;span class="nt"&gt;&amp;lt;data&lt;/span&gt;
                    &lt;span class="na"&gt;android:host=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;com.wegene.app&amp;quot;&lt;/span&gt;
                    &lt;span class="na"&gt;android:path=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/main&amp;quot;&lt;/span&gt;
                    &lt;span class="na"&gt;android:scheme=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;wegene&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/intent-filter&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在activity里还要从intent里获取URI的data数据。&lt;/p&gt;
&lt;h2&gt;三、浏览器问题&lt;/h2&gt;
&lt;p&gt;浏览器一般有几种，一种是手机自带浏览器（安卓厂商自带浏览器，iOS的Safari），一种是通用手机浏览器，例如UC浏览器，QQ浏览器，chrome，还有一种是超级APP自带浏览器，例如微信、QQ、微博他们APP内自带浏览器&lt;/p&gt;
&lt;p&gt;超级APP自带浏览器问题：它们都禁止了通用链接方式，也基本禁用了scheme方式。但是他们提供了一种方式给用户选择：选择第三方浏览器打开。支持通用链接技术的APP可以用这种方式来被打开。&lt;/p&gt;
&lt;p&gt;手机自带浏览器，通用浏览器问题：不同的浏览器APP实现方式不一样。总的来说，一般都支持通用链接方式和scheme方式。但是有些可能浏览器会弹出一个弹窗来让用户确认是否同意拉起APP。&lt;/p&gt;
&lt;h2&gt;四、安卓端问题&lt;/h2&gt;
&lt;p&gt;虽然安卓支持APP Links技术，但是这个技术依赖于谷歌服务器的验证，而谷歌服务器是被墙的，所以是在国内基本不能用。所以在安卓端能用的技术只有scheme技术了。&lt;/p&gt;
&lt;p&gt;一般浏览器可以通过scheme来跳转，但是微信里是禁用了scheme方式的。这里一种解决方案是 微信选择第三方浏览器打开--&amp;gt;进入浏览器--&amp;gt;浏览器调用scheme--&amp;gt;进入APP相关页面。这里面浏览器页面就要做相关的检测和跳转配置了，页面多的话还要做不同页面的配置，开发量也不小。&lt;/p&gt;
&lt;p&gt;还有一种方案，就是利用应用宝的微下载和他的APPLink机制（非谷歌的APPLinks）。实现方式是 微信浏览器打开应用宝配置的页面--&amp;gt;拉起应用宝--&amp;gt;应用宝通过我们配置的scheme和path拉起我们的APP--&amp;gt;进入APP相关页面。这里应用的技术仍然是scheme技术（deeplink），我们在应用宝里配置好scheme和path，由它来拉起我们的APP。但是前提是我们要向应用宝申请，而且需要APP符合他们的一定条件才会通过申请。&lt;/p&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;总的来说要在要在H5中拉起APP，无非就是通过专属HTTP链接技术和自定义scheme技术。然而理想很丰满，现实很骨感。在国内的所有浏览器，无论是通用浏览器APP，还是超级APP自带的浏览器，都是会做一些改造和限制。当然我们最关注的是流量霸主微信，都想从他那里引流一些用户。可是微信确实最严厉的，禁止了HTTP链接拉起APP的技术，也禁用了scheme技术，只给自家APP或者合作方留了口子。现在的做法都是引导用户点击右上角的 第三个浏览器打开来拉起APP。&lt;/p&gt;
&lt;p&gt;现在我们要想适配好全面的H5拉起APP技术，也挺难的，要考虑到微信微博等超级APP禁止所有的跳转技术，还有各式各样的浏览器支持程度也不同。现实的情况是我们做APP开发的不太懂网页开发，做网页开发的又不懂我们APP开发（还有相关的跳转技术），所以难上加难。倒是可以借助开源试试。有个还不错的开源库看上去还不错（我没仔细研究过）&lt;a href="https://github.com/suanmei/callapp-lib"&gt;callapp-lib&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;如果你觉得这篇文章有用，请打赏小钱喝杯咖啡^_^
&lt;img alt="打赏" src="https://raw.githubusercontent.com/szuwest/szuwest.github.io/master/images/2018-02-21%20133111.jpg" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Sat, 07 Mar 2020 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2020-03-07:tan-tao-cong-h5ye-mian-la-qi-appde-ji-zhu-fang-an-he-wen-ti.html</guid><category>APP</category></item><item><title>上传应用到苹果一直卡住验证中（authentication with the app store）问题解决</title><link>https://szuwest.github.io/shang-chuan-ying-yong-dao-ping-guo-yi-zhi-qia-zhu-yan-zheng-zhong-authentication-with-the-app-storewen-ti-jie-jue.html</link><description>&lt;h1&gt;上传应用到苹果一直卡住验证中（authentication with the app store）问题解决&lt;/h1&gt;
&lt;p&gt;虽然最近因为新型冠状病毒导致的疫情一直在持续，我们都被迫在家办公。我们由于有一些紧急的改动需要发版，5号那天我们改好之后就准备上传APP审核。安卓APP上传到各个商店都还挺顺利，但是iOS的却遇到难题了，卡住了，卡在 &lt;strong&gt;正在验证APP - 正在通过App Store进行认证&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img alt="验证中" src="./images/app_verifying.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;自从升级了xcode11后，我一般都用&lt;strong&gt;transporter&lt;/strong&gt;来上传IPA。因为xcode上传有时候也很慢，但是transporter却是很快。但是这次transporter卡住了，一直在&lt;strong&gt;正在验证APP - 正在通过App Store进行认证&lt;/strong&gt;状态。过了很久都不动，平时几分钟就搞定了。后面我尝试了各种方法，试过xcode上传，命令行xcrun上传，搭梯子上传，通过手机热点上传，让同事他们上传，各种方法。搞了两三天，才最终搞定，真的是太悲催。感觉苹果在这块做得真是太傻逼了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;方法一：transporter，xcode上传都是卡住，xcrun上传报错&lt;/li&gt;
&lt;li&gt;方法二：搭梯子上传，transporter报错：交付到App Store时出错。xcode也报类似错误&lt;/li&gt;
&lt;li&gt;方法三：通过手机热点上传，一样卡住在同样的地方（移动信号和电信信号，没试过联通的，因为没联通手机。有人通过热点上传成功的可能是联通手机？）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;网上很多帖子都在说iTMSTransporter缓存问题，其实这个思路是对的。但是绝大部分的文章都是很老之前的了，说的都是Application Loader的事。也有一小部分说transporter的缓存问题。我试了通过transporter.app里面的iTMSTransporter来下载缓存，同样也是卡住。也试过翻墙来下载，但是貌似没什么效果。不过这个也有可能我之前的那个梯子不太好，很慢导致的。为了解决这个慢的问题，我又花了100大钞弄了个新的梯子。新的梯子网速笔记快。&lt;/p&gt;
&lt;p&gt;反正我各种方法试，交叉试，组合试，连续两天都没解决，在iOS开发群里喊没人回应，最终在cocoachina论坛看到一个有用的帖子&lt;a href="http://www.cocoachina.com/bbs/read.php?tid-1795056.html"&gt;（地址在这）&lt;/a&gt;。在这个帖子了试了一些人的方法没解决。但是其中有一个人给了个Stack Overflow的帖子地址，最终按照那个帖子的方法解决了。&lt;strong&gt;Stack Overflow&lt;/strong&gt;真TM香！还是&lt;strong&gt;Stack Overflow&lt;/strong&gt;靠谱！&lt;/p&gt;
&lt;p&gt;那个人分析得非常到位，我引用到这里。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Dec 10th 2019, Xcode Version 11.2.1, MacOS X 10.15.1&lt;/strong&gt;
&lt;br&gt;
I was facing exactly same issue yesterday and I thought it might be network issues, at least it looks like so. But this morning I had tried couple different networks and several VPN connections, none of them is working!
&lt;br&gt;
The highest voted answer here asks me to reset a cache folder named .itmstransporter under my home dir, the run a program iTMSTransporter under a specific folder, but I can't find both of them.
&lt;br&gt;
But soon I figured that it is the cache folder for the people who uses the legacy uploader program: Application Loader, which is deprecated by Apple and can be no longer found in Xcode 11. Then I found that the latest Xcode has located iTMSTransporter here:
&lt;br&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/Applications/Xcode.app/Contents/SharedFrameworks/ContentDeliveryServices.framework/itms/bin/iTMSTransporter
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;
And its cache folder is here:
&lt;br&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/Users/your_user_name/Library/Caches/com.apple.amp.itmstransporter/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;
I removed my existed cache folder, and run iTMSTransporter without any parameter, it soon started to output logs and download a bunch of files, and finished in 2 or 3 minutes. Then I tried again to upload my ipa file, it works!!!
&lt;br&gt;
CONCLUTION:
&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;1.Either the old Application Loader, or the latest Xcode, uses a Java program iTMSTransporter to process the ipa file uploading.&lt;/li&gt;
&lt;li&gt;2.To function correctly, iTMSTransporter requires a set of jar files downloaded from Internet and cached in your local folder.&lt;/li&gt;
&lt;li&gt;3.If your cache is somehow broken, or doesn't exist at all, directly invoking iTMSTransporter with functional parameters such as --upload-app in our case, iTMSTransporter DOES NOT WARN YOU, NOR FIX CACHE BY ITSELF, it just gets stuck there, SAYS NOTHING AT ALL! (Whoever wrote this iTMSTransporter, you seriously need to improve your programming sense).&lt;/li&gt;
&lt;li&gt;4.Invoking iTMSTransporter without any parameter fixes the cache.&lt;/li&gt;
&lt;li&gt;5.A functional cache is about 65MB, at Dec 10th 2019 with Xcode Version 11.2.1 (11B500)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个人总结得非常好。具体帖子在&lt;a href="https://stackoverflow.com/a/59261475"&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我要补充一点是这个&lt;strong&gt;com.apple.amp.itmstransporter&lt;/strong&gt;文件下原来的只有2.8兆左右，后面重新下载下来的68左右，相差很大，开始我没翻墙来下载，下载很慢，下载3.9兆后就不动了。命令行那里也没有打印出什么来。后来我停掉，然后打开梯子，然后重新运行命令，就下载很快了，命令行也打印出来很多信息，完成后那个缓存文件夹大约68M。然后最好关掉梯子，重新打开transporter来上传，这样就能正常上传了。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;如果你觉得这篇文章有用，请打赏小钱喝杯咖啡^_^
&lt;img alt="打赏" src="https://raw.githubusercontent.com/szuwest/szuwest.github.io/master/images/2018-02-21%20133111.jpg" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Sat, 08 Feb 2020 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2020-02-08:shang-chuan-ying-yong-dao-ping-guo-yi-zhi-qia-zhu-yan-zheng-zhong-authentication-with-the-app-storewen-ti-jie-jue.html</guid><category>验证中 一直卡住</category></item><item><title>2019年总结与2020年展望</title><link>https://szuwest.github.io/2019nian-zong-jie-yu-2020nian-zhan-wang.html</link><description>&lt;h1&gt;2019年总结与2020年展望&lt;/h1&gt;
&lt;p&gt;2019年已经成为过去，而2020年刚开始就发生了不少事。。。。&lt;/p&gt;
&lt;h2&gt;2019年总结&lt;/h2&gt;
&lt;h3&gt;工作&lt;/h3&gt;
&lt;p&gt;2019年我们团队做了不少事，上半年把所有PC版的功能都移植到了手机APP上，然后还采用了Flutter技术做了个POS机版本的APP。下半年我们做了很多新功能，下半年时间稍微充足了，没有怎么加过班，这是是好事。
一整年我们发了26个版本，平均不到半个月一个版本，迭代速度可以说是比较快了。&lt;/p&gt;
&lt;h3&gt;生活&lt;/h3&gt;
&lt;p&gt;下半年收房了，出现了一些意外的事。没想到小区旁边的地铁（地面的）没有做封闭处理，地铁经过时噪声非常大。当初我们买房子的时候，销售说地铁一定会封的。。。所以大家都进行维权，然后装修就被推迟了。维权最终没有结果，变成一个长期的事情。装修还得继续，拖了两个月后才开始装修。而且因为维权的事情，到时我老婆情绪波动很大，还过于劳累，本来已经怀孕了，但是最终没有保住。。。&lt;/p&gt;
&lt;p&gt;生活就是这样，忽然来给你一个猛头一击，把你的计划全打乱。&lt;/p&gt;
&lt;p&gt;我们下半年都是忙于装修。第一次装修总算体会到了“装修就是各种坑”。各种波折，终于也在2020年1月中把装修事情基本搞定了，只剩下几个电器未买。
初略总结一些坑吧：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;要留足充分的时候来看合同，不管是装修合同还是买主材的一些合同。装修合同一般的套路就是故意漏掉一些边角的事情，到施工的后面增加，这是给他们增加收入的途径。一般漏掉什么呢？例如门洞规格，例如房子里的天花石膏钱，油漆的颜色可以包多少个等&lt;/li&gt;
&lt;li&gt;尾款尽量留多点，如果太少了，只剩下尾款的时候，他们的工作就不积极了。因为钱不多了，不会主动推荐工作。然后很多东西都是不管不问的。他们的精力放到别的项目去了&lt;/li&gt;
&lt;li&gt;很多装修的质量，要尽早发现&lt;/li&gt;
&lt;li&gt;材料尽量货比三家&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总之第一次装修肯定是要被坑的，这个行业就是这样的。工人的手艺也不尽相同，你想要求高质量，那你必须一步一步来验收，发现问题及时整改，不然后面是整改不了的，因为装修工序本身是讲究先后顺序的。这一次装修自己也算学到了一些教训和知识吧&lt;/p&gt;
&lt;h2&gt;2020年展望&lt;/h2&gt;
&lt;p&gt;工作的话就希望公司业务能发展好吧，只有业务发展好了，我们这边才会更多用户，更多业务。&lt;/p&gt;
&lt;p&gt;技术上还需要进一步学习，团队也是如此。&lt;/p&gt;
&lt;p&gt;生活上希望亲戚朋友身体健康，最近闹出个新型肺炎，大家都很恐慌。
希望今年顺利怀上小孩，小孩顺利出生，不敢要求太多了。。。&lt;/p&gt;
&lt;p&gt;生活就是认清了生活的真相后，仍让能乐观地去前进和奋斗。加油&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Tue, 21 Jan 2020 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2020-01-21:2019nian-zong-jie-yu-2020nian-zhan-wang.html</guid><category>总结</category></item><item><title>AOP在移动开发中的应用</title><link>https://szuwest.github.io/aopzai-yi-dong-kai-fa-zhong-de-ying-yong.html</link><description>&lt;h1&gt;AOP在移动开发中的应用&lt;/h1&gt;
&lt;p&gt;下面是我在我们团队上的技术分享内容，从PPT里摘抄出来的，所有很多都是个提纲摘要&lt;/p&gt;
&lt;h2&gt;AOP简介&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;AOP，Aspect Oriented Programming，面向切面编程&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;面向切面编程是一种通过横切关注点（Cross-cutting Concerns）分离来增强代码模块性的方法，它能够在不修改业务主体代码的情况下，对它添加额外的行为。&lt;/li&gt;
&lt;li&gt;是对OOP的一种补充,是一种解耦的重要手段&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;AOP常用概念&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Join point：程序执行期间的一个点,表示方法的执行&lt;/li&gt;
&lt;li&gt;Pointcut: 切入点实际上也是从所有的连接点(Join point)挑选自己感兴趣的连接点的过程&lt;/li&gt;
&lt;li&gt;Aspect: 程序横向切割成若干的面，即Aspect.每个面被称为切面&lt;/li&gt;
&lt;li&gt;Advice: 某个特定连接点的某个方面采取的行动。不同类型的建议包括“周围(Around)”，“之前(Before)”和“之后(After)”建议&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;AOP实现原理&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;编译期间的静态织入，又称为编译时增强&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运行期间的动态代理，又称为运行时增强&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;运行时AOP&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;程序运行时，依靠预先创建或运行时创建的代理类来完成切面功能。这种方式依赖编程语言的动态能力&lt;/li&gt;
&lt;li&gt;JDK 基于接口的动态代理技术（Spring AOP），基于Java反射特性实现&lt;/li&gt;
&lt;li&gt;Objective-C的Method Swizzling和KVO，基于OC的Runtime实现&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;JDK 基于接口的动态代理技术&lt;/h4&gt;
&lt;p&gt;基于接口编程&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.text.MessageFormat&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.Date&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;interface&lt;/span&gt; &lt;span class="n"&gt;BookService&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="n"&gt;lendOut&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;bookId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Date&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BookServiceImpl&lt;/span&gt; &lt;span class="n"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;BookService&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="n"&gt;lendOut&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;bookId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Date&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MessageFormat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{0}: The book {1} is lent to {2}.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bookId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;基于反射调用&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.lang.reflect.InvocationHandler&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.lang.reflect.Method&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ServiceInvocationHandler&lt;/span&gt; &lt;span class="n"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;InvocationHandler&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;ServiceInvocationHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="n"&gt;invoke&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="n"&gt;proxy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Method&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;Throwable&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Before...&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;invoke&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;After...&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;不直接持有子类实例，持有接口实例，真正的实例对象有别人创建&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.lang.reflect.Proxy&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.Date&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Client&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;static&lt;/span&gt; &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;throws&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;BookService&lt;/span&gt; &lt;span class="n"&gt;bookService&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BookService&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Proxy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;newProxyInstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;BookService&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getClassLoader&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
                &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Class&lt;/span&gt;&lt;span class="p"&gt;[]{&lt;/span&gt; &lt;span class="n"&gt;BookService&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="err"&gt;},&lt;/span&gt;
                &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ServiceInvocationHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;BookServiceImpl&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;bookService&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lendOut&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;123&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;456&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Objective-C的Method Swizzling&lt;/h4&gt;
&lt;p&gt;NSThread的start方法扩展&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;validStart&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;@try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isCancelled&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isFinished&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isExecuting&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;NSLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;should not start&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="n"&gt;validStart&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;  &lt;span class="c1"&gt;//[self start];&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;@catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;NSException&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;NSLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;exception&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;@finally&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;NSLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;@finally&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;方法替换来实现AOP（语言本身支持runtime，非常强大的特性）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;load&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;super&lt;/span&gt; &lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="kt"&gt;Class&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;Method&lt;/span&gt; &lt;span class="n"&gt;oldMethod&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;class_getInstanceMethod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;NSSelectorFromString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;start&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;Method&lt;/span&gt; &lt;span class="n"&gt;newMethod&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;class_getInstanceMethod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;NSSelectorFromString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;validStart&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
   &lt;span class="n"&gt;method_exchangeImplementations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;oldMethod&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;newMethod&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;编译期AOP&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;编译期就把切面代码和业务代码链接起来，需要编译器或编译工具支持&lt;/li&gt;
&lt;li&gt;有些编程语言编译期生成中间代码的话，较容易支持这种AOP实现&lt;/li&gt;
&lt;li&gt;Java的AspectJ，Flutter的Dart，Android的Gradle插件Transform API&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;移动端语言对于AOP的支持&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Java：支持运行时AOP和编译时AOP&lt;/li&gt;
&lt;li&gt;Objective-C支持运行时AOP&lt;/li&gt;
&lt;li&gt;kotlin支持编译期AOP（它编译成字节码）&lt;/li&gt;
&lt;li&gt;swift支持运行时AOP（基于Objective-C的特性，局限于OC代码）&lt;/li&gt;
&lt;li&gt;Flutter Dart支持编译期AOP，编译中间产物是dill（修改编译工具）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;AOP在移动端应用：无埋点统计&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;传统埋点代码涉及各个模块，有点繁琐又没有太大技术含量&lt;/li&gt;
&lt;li&gt;无埋点采用AOP实现，解耦代码，且不容易漏统计。业务开发人员只需关注自己的业务代码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Android Gradle 工具在 1.5.0 版本后提供了 Transfrom API, 允许第三方 Plugin 在打包 dex 文件之前的编译过程中操作 .class 文件
 遍历所有要编译的class文件并对其中符合条件的方法进行修改，注入我们要调用的SDK数据搜集代码，从而实现自动埋点的目的&lt;/p&gt;
&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.jianshu.com/p/9f0a98ce8a8f"&gt;AOP设计原理&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.ibm.com/developerworks/cn/java/wa-spring1/"&gt;Spring 框架简介&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.jianshu.com/p/aa1112dbebc7"&gt;Android面向切面编程（AOP）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.jianshu.com/p/c202853059b4"&gt;Android AOP之字节码插桩&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.jianshu.com/p/250c83449dc0"&gt;应用于Android无埋点的Gradle插件解析&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://yq.aliyun.com/articles/705751"&gt;AOP for Flutter: AspectD(闲鱼团队开源框架)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://juejin.im/entry/5b2400bc51882574b55e4fc7"&gt;58无埋点数据采集技术在Android端实践&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.jianshu.com/p/37df81365edf"&gt;如何理解 Transform API&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Tue, 21 Jan 2020 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2020-01-21:aopzai-yi-dong-kai-fa-zhong-de-ying-yong.html</guid><category>AOP 移动开发</category></item><item><title>记一次WebView填坑过程--由换行符引发的血案</title><link>https://szuwest.github.io/ji-yi-ci-webviewtian-keng-guo-cheng-you-huan-xing-fu-yin-fa-de-xie-an.html</link><description>&lt;h1&gt;记一次WebView填坑过程--由换行符引发的血案&lt;/h1&gt;
&lt;p&gt;最近使用WebView掉坑了，然后艰难爬坑经历感触很深，写出来大家借鉴一下。&lt;/p&gt;
&lt;h3&gt;需求&lt;/h3&gt;
&lt;p&gt;我们有个网页需要用到很多js库，这些库比较大，而且基本上是不变的。为了提高性能，将这些网页和JS库放到本地，进行加载。变的数据从服务器获取，然后跟本地的HTML组装后显示。这种需求还是挺普遍的。&lt;/p&gt;
&lt;h3&gt;实现方式&lt;/h3&gt;
&lt;p&gt;由web的同事调试好HTML文件，他们把所有的HTML，js,css,image和资源一起打包给我们
我们把这些资源放到assets目录下（也可以专门在assets再建一个子目录来放）&lt;/p&gt;
&lt;p&gt;采用Android自带的WebView来加载和显示这些网页。有两个方法&lt;strong&gt;loadUrl&lt;/strong&gt;和&lt;strong&gt;loadDataWithBaseUrl&lt;/strong&gt;方法。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1.loadUrl("file:///android_asset/xxxxxx.html")这种方式适合HTML不需要改变的情况，直接加载展示，省时省力&lt;/p&gt;
&lt;p&gt;2.loadDataWithBaseUrl方式需要先把HTML内容现在到内存，然后再展示。这种方式可以随意修改HTML里的内容，修改好再交由WebView展示，灵活性强。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;遇到的坑&lt;/h3&gt;
&lt;p&gt;测试的时候，我们遇到同一个HTML文件，通过loadUrl方式加载展示，没有任何问题。但是通过loadDataWithBaseUrl加载展示，HTML的内容死活展示不出来&lt;/p&gt;
&lt;h3&gt;爬坑过程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;反复确认loadDataWithBaseURL的用法有没有用对，baseUrl参数没有问题。
mWebView.loadDataWithBaseURL("file:///android_asset/", htmlContent, "text/html", "utf-8", null).
网上搜资料看看别人的用法，还有查看我们工程里其他用了loadDataWithBaseURL方法的地方，都是差不多的。然后我怀疑是htmlContent有问题，是不是读取的时候出错了。
我去看从asset里读取文件的方法.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public static String getStringFromAssets(Context context,String fileName) {
        try {
            InputStreamReader inputReader = new InputStreamReader(context.getAssets().open(fileName));
            BufferedReader bufReader = new BufferedReader(inputReader);

            String line;
            StringBuilder stringBuilder = new StringBuilder();
            while ((line = bufReader.readLine()) != null) {
                stringBuilder.append(line);
            }
            return stringBuilder.toString();

        } catch (Exception e) {
            e.printStackTrace();
        }
        return &amp;quot;&amp;quot;;
    }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;看上去并没有什么问题呀。我搜了下这个方法在我们工程里的使用，发现还有很多使用的地方，他们使用都没问题。我不放弃，到网上再搜一下。全是同样的方法。我断点调试，并且把htmlContent打印出来，好像没有太大的问题呀，不是这里的问题？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2.查看我们工程里其他用了loadDataWithBaseURL方法的地方，我的用法跟他们一致。不过最终我发现我用的HTML文件跟他们用的HTML文件有不同的地方：我使用的HTML文件中
更复杂一些，在文件里引用JS资源文件，图片文件，在HTML里本身内嵌了JS代码。我猜测是内嵌JS导致的。我网上搜资料，看看是不是这样的。终于搜到一篇&lt;a href="https://wenwen.sogou.com/z/q436628432.htm"&gt;文章&lt;/a&gt;说这个问题，但是这个帖子是很久以前的。下面是它的原话：&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;使用WebView的loadUrl(url),网页中的Javascript运行正常。但是获取url的html内容后，使用loadData或者loadDataWithBaseURL之后，Javascript就不起作用了！google了一圈，似乎这是普遍问题，不知道这里的高手有法子解决不？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;貌似验证了我的想法。但是这是很久以前的帖子呀。我想Google改不会那么傻吧。后来我调试时在logcat里看到一些日志。加载网页时打印了类似下面的日志&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[INFO:CONSOLE(1)] "Uncaught SyntaxError: Unexpected identifier "&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;说明网页在解析JS的时候报错了。
我看了下网页中JavaScript，按道理的这些都是正确的，因为采用loadUrl方式加载没问题，直接在电脑上浏览器打开也没有问题。我把这些js都删掉，只加了一条console.log('1111')的打印语句。再次运行加载，没报错了！！说明内嵌JavaScript代码是可行的。那就是我们原本的JavaScript有问题了？？&lt;/p&gt;
&lt;p&gt;我把那部分JS放到一个新的单独的文件里。因为我们的HTML文件本身也引用了其他的独立JS文件。一运行，正常加载显示！JS还是那个JS，换到文件里就没问题了？&lt;/p&gt;
&lt;p&gt;所以我那时得出结论：
* 内嵌JavaScript代码在WebView的解析跟独立JS文件不太一样，可能内嵌JavaScript代码的解析要严格一些？&lt;/p&gt;
&lt;p&gt;我开始验证这个想法，去修改内嵌JavaScript代码。
我在很多地方加了console打印，看看执行到哪里报错。然后我发现貌似去掉了注释，报错就不一样了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Uncaught SyntaxError: Unexpected token。&lt;/p&gt;
&lt;p&gt;Uncaught SyntaxError: Unexpected end of input&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最后我把注释都去掉，把该加分号的地方都加上。就能正常运行了。
我初步得出以下结论：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;需要HTML文档里内嵌JavaScript代码的话，要非常注意JavaScript的语法问题。WebView对这部分的JS代码语法要求非常严，经常发生识别不了而报错的情况。
现在发现①非常注意表达式后面要加分号，不能省略分号！！②不能在JS里随便加注释。要仔细检查语法，严格遵循JS标准&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我把这些结论还加到了我们代码的注释了，以免后人采坑。&lt;/p&gt;
&lt;p&gt;到这里问题解决了，我把HTML从asset中加载出来，再HTML字符串中的一些字符串（默认数据）替换成我们从服务器取到的数据（真实用户数据），然后调用loadDataWithBaseURL方法展示。完美。&lt;/p&gt;
&lt;p&gt;到这里有些人会说loadUrl方法不是没问题吗，直接用它不就行了，折腾那么多干嘛。确实是如此，用loadUrl方法能实现我的需求，实际上我也试用了这个方法，没问题。
不过采用loadUrl的方式，实现起来不太一样。需要修改JavaScript代码。这些HTML是有web同时提供的，他们都是已经默认数据直接调试好了，一打开就能展示。采用loadUrl的方法，你不能预先修改HTML文件，只能在加载完HTML数据之后，在WebView的webclient回调方法&lt;strong&gt;onPageFinished&lt;/strong&gt;里去调用JS方法。&lt;/p&gt;
&lt;p&gt;就是说：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.你将JS里的window.onload方法去掉，让他们先不展示&lt;/li&gt;
&lt;li&gt;2.你新增一个js方法，这方法接收一些参数，然后在这个方法里调用渲染方法（即原来的window.onload里的方法）。&lt;/li&gt;
&lt;li&gt;3.在你Java代码里，在WebView的webclient回调方法&lt;strong&gt;onPageFinished&lt;/strong&gt;里去调用你新增的JS方法，把参数都传入进去。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;看到没有，这里要修改的东西还蛮多，还要要求客户端开发人员懂JS代码。&lt;/p&gt;
&lt;p&gt;采用loadDataWithBaseURL方式，理想的情况下，不需要改JS代码，直接告诉开发人员默认数据在哪里，把HTML加载进内存的时候，通过String.replace方法，把默认数据替换为真实数据，就可以了。&lt;/p&gt;
&lt;p&gt;iOS端就是这么实现的，但是Android这边实现的时候就遇到了坑。。。。
我肯定想两端实现方式保持一致，所有优先采用loadDataWithBaseURL方式。当然，你也可以让web开发人员按你的要求写好，那你也不用改动那么多。。。&lt;/p&gt;
&lt;h3&gt;背后真相&lt;/h3&gt;
&lt;p&gt;问题解决了，版本也发了。但问题的真相真的是WebView解析内嵌JavaScript比较严格吗？从现象来看，不支持注释，不能省略表达式的分号，这明显是&lt;strong&gt;换行&lt;/strong&gt;问题。
所以我想问题可能真的出现在从asset里读取文件地方。看代码就是没有明显错误，一行一行的读取进来，拼接好全部返回。网上查到的所有代码都是这么读的。&lt;/p&gt;
&lt;p&gt;那一次性读取整个文件进来呢？所有我找了下资料，将代码改成一次性读取整个文件。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public static String getStringFromAssets(ontext context,String fileName) {
        try {
            InputStreamReader inputReader = new InputStreamReader(context.getAssets().open(fileName));
            BufferedReader bufReader = new BufferedReader(inputReader);

            StringWriter out = new StringWriter();
            copy(bufReader, out);
            return out.toString();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return &amp;quot;&amp;quot;;
    }

    private static void copy(Reader in, Writer out) throws IOException {
        int c = -1;
        while((c = in.read()) != -1) {
            out.write(c);
        }
    }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;果然什么问题都没有！看logcat打印出来的内容也是跟HTML里的内容一模一样，之前方式打印出来的没有换行并没有太过在意！&lt;/p&gt;
&lt;p&gt;那只能说明bufReader.readLine的方法有问题，我网上搜了下，说这个方法会自动去掉换行。原来真相是这个么？？原来WebView一直是个&lt;strong&gt;背锅侠&lt;/strong&gt;呀，而且这个锅背了好多年😂😂。&lt;/p&gt;
&lt;p&gt;我们来看看时间的真凶readLine方法的声明：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;     * Reads a line of text.  A line is considered to be terminated by any one&lt;/span&gt;
&lt;span class="cm"&gt;     * of a line feed (&amp;#39;\n&amp;#39;), a carriage return (&amp;#39;\r&amp;#39;), or a carriage return&lt;/span&gt;
&lt;span class="cm"&gt;     * followed immediately by a linefeed.&lt;/span&gt;
&lt;span class="cm"&gt;     *&lt;/span&gt;
&lt;span class="cm"&gt;     * @return     A String containing the contents of the line, not including&lt;/span&gt;
&lt;span class="cm"&gt;     *             any line-termination characters, or null if the end of the&lt;/span&gt;
&lt;span class="cm"&gt;     *             stream has been reached&lt;/span&gt;
&lt;span class="cm"&gt;     *&lt;/span&gt;
&lt;span class="cm"&gt;     * @exception  IOException  If an I/O error occurs&lt;/span&gt;
&lt;span class="cm"&gt;     *&lt;/span&gt;
&lt;span class="cm"&gt;     * @see java.nio.file.Files#readAllLines&lt;/span&gt;
&lt;span class="cm"&gt;     */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;public&lt;span class="w"&gt; &lt;/span&gt;String&lt;span class="w"&gt; &lt;/span&gt;readLine&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;throws&lt;span class="w"&gt; &lt;/span&gt;IOException&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kr"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;readLine&lt;span class="o"&gt;(&lt;/span&gt;false&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意看return的声明&lt;strong&gt;not includingany line-termination characters&lt;/strong&gt;.
人家这里说得很清楚嘛，吐血了。。。&lt;/p&gt;
&lt;p&gt;如果你对Java很熟悉，或者对readLine()方法熟悉，你就不用折腾那么多，就不会掉坑里了。&lt;/p&gt;
&lt;p&gt;我在想为什么一直没发现呢，这个方法用了这么久，网上也这么多人用，就没人遇到问题？我猜主要原因是大部分情况下，没有换行符也没有什么影响。我们一般都是把json或HTML文件放assets里，然后读取出来使用。json文件有没有换行根本不影响！我们工程里大部分都是这种用法。如果HTML里没有内嵌JavaScript代码也没有问题！如果真有内嵌JavaScript代码了，也可以通过采用loadUrl方法来绕过，就是我之前的做法那样。&lt;/p&gt;
&lt;p&gt;只有正面刚，才会发现这里有个坑。readLine这个方法不好，太有迷惑性了。
还有就是不要随便相信网上拷来的代码！！！这些血的教训。&lt;/p&gt;
&lt;p&gt;最后附上修正版的正确的从assets里读取文件的方法。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; /**
     * 获取asset的文件，转化成String
     *
     * @param context
     * @param fileName
     * @return
     */
    public static String parseAssetsData(Context context, String fileName) {
        StringBuilder stringBuilder = new StringBuilder();
        InputStreamReader inputStreamReader = null;
        BufferedReader bfReader = null;
        try {
            AssetManager assetManager = context.getAssets();
            inputStreamReader = new InputStreamReader(assetManager.open(fileName));
            bfReader = new BufferedReader(inputStreamReader);
            String line;
            //注意！！ readLine()返回的内容已经把换行符去掉，所以要补上
            while ((line = bfReader.readLine()) != null) {
                stringBuilder.append(line);
                stringBuilder.append(&amp;quot;\n&amp;quot;);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            closeStream(inputStreamReader);
            closeStream(bfReader);
        }
        return stringBuilder.toString();
    }

    /**
     * 关闭流
     *
     * @param io
     */
    public static void closeStream(Closeable io) {
        if (io != null) {
            try {
                io.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;p&gt;如果你觉得这篇文章有用，请打赏小钱喝杯咖啡^_^
&lt;img alt="打赏" src="https://raw.githubusercontent.com/szuwest/szuwest.github.io/master/images/2018-02-21%20133111.jpg" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Sat, 27 Jul 2019 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2019-07-27:ji-yi-ci-webviewtian-keng-guo-cheng-you-huan-xing-fu-yin-fa-de-xie-an.html</guid><category>Android开发 WebView JavaScript</category></item><item><title>如何写出不太坏的代码</title><link>https://szuwest.github.io/ru-he-xie-chu-bu-tai-pi-de-dai-ma.html</link><description>&lt;h2&gt;如何写出不太坏的代码&lt;/h2&gt;
&lt;p&gt;本来想把标题定为“如何写出好代码”的，但是转念一想，觉得自己没那么牛逼，就改成了不太坏的代码。只要不要写出太糟糕的代码，不就是好代码了吗？&lt;/p&gt;
&lt;p&gt;以下只是个人的一些总结，如有异议，请出门右转。&lt;/p&gt;
&lt;h3&gt;1.注重命名&lt;/h3&gt;
&lt;p&gt;包括文件名，变量名，方法名。一般变量名以功能来命名，看它的名字就能知道它的用途是什么
遵循一些命名规范。Java中成员变量名一般以m开头，而OC中的成员变量一般以_开头&lt;/p&gt;
&lt;h3&gt;2.遵循低耦合，高内聚的原则编写代码&lt;/h3&gt;
&lt;p&gt;具体表现遵循分层分模块原则，底层模块不能依赖上层模块，逻辑层不依赖界面，绝不要把逻辑层代码和界面代码混在一起&lt;/p&gt;
&lt;h3&gt;3.针对接口编程，而不是实现编程&lt;/h3&gt;
&lt;p&gt;当一个类要暴露一些方法给外部调用或者通信时，先定义好接口。接口定义应该简单明了，不容易引起歧义，接口尽量少。最后才考虑内部实现，而且尽量不暴露给外部，尽量不需要外部知道内部是如何实现的&lt;/p&gt;
&lt;h3&gt;4.一个类的代码量尽量不要太大，一个方法只做一件事情&lt;/h3&gt;
&lt;p&gt;一个类（或者一个方法）的代码越多，出错的概率越大。一个类三到5百行代码最佳。如果一个类的代码太多，就要考虑这个类是不是做的东西太多了，可以拆分一下。当然，有些类（例如一些SDK基类）无法避免太大，就要好好遵循第5条准则。而一个方法也不要做太多东西，只做一件事情就可以。&lt;/p&gt;
&lt;h3&gt;5.类的方法和变量的排布应该遵循一定规则&lt;/h3&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;相同功能的方法尽量放在一起。&lt;/li&gt;
&lt;li&gt;生命周期方法应该尽量放一起，按时序排列&lt;/li&gt;
&lt;li&gt;公开方法排在前面，私有方法排在后面&lt;/li&gt;
&lt;li&gt;OC可以充分使用category特性，同一类的方法放一起（swift的Extension也一样）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;6.尽量不重复写代码，特别是逻辑代码&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;重复代码难维护，出现bug要每个重复地方都去修改，容易漏掉。&lt;/li&gt;
&lt;li&gt;加入一个项目，在实现某个功能之前，可以先看看项目里有没有已经实现过这个功能的代码。没有必要重复造轮子。如果有，但是写得不好，或者有bug，可以跟原作者沟通让其改进，或者自己改进。除非不得已，不要重复实现。如果人人一不爽就自己弄一套，那久而久之都是重复代码，难以维护。如果相互改进，则大家一起进步。&lt;/li&gt;
&lt;li&gt;不过呢，如果一部分的代码重复可以为架构带来好处，方便维护，那是可以的，值得的。例如代码的重复可以减少两个模块之前的通信和关联，那是可以的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;7.经常局部重构&lt;/h3&gt;
&lt;p&gt;没有人能一下子就写出很好的代码，经常重构可以减少程序bug，也可以提升自己的代码质量&lt;/p&gt;
&lt;h3&gt;书籍推荐&lt;/h3&gt;
&lt;p&gt;这里推荐一本书籍，专门讲重构的，有专门讲如何对变量命名的，是一本好书。&lt;strong&gt;《重构，改善既有代码的质量》&lt;/strong&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Thu, 28 Feb 2019 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2019-02-28:ru-he-xie-chu-bu-tai-pi-de-dai-ma.html</guid><category>iOS开发 Android开发</category></item><item><title>2018年总结和2019年展望</title><link>https://szuwest.github.io/2018nian-zong-jie-he-2019nian-zhan-wang.html</link><description>&lt;h2&gt;2018年总结和2019年展望&lt;/h2&gt;
&lt;p&gt;一直都没写，不愿意动手，明天就要新的一年上班了，所以还是简单写写吧。&lt;/p&gt;
&lt;h3&gt;2018年总结&lt;/h3&gt;
&lt;p&gt;1.上半年过得很不好，一直非常焦虑，公司发展不好，心里很慌，害怕倒闭了被动找工作。后面决定满一年后就换工作，但是一直没找到合适的。在年中的时候一度非常焦虑，很长一段时间没碰过香烟了，因为心情太过焦虑，又开始在公司偶尔抽了起来。直到后面我在那个公司满一年后，真正决定开始找新工作，找到了一个自己比较合适的公司，心才定下来。&lt;/p&gt;
&lt;p&gt;2.下班年去了新公司后很忙，每天都在马不停蹄的赶，提供工作效率，但是并不觉得很累。很久没有这种感觉了。终于找到跟自己比较匹配的工作，也能比较大的发挥自己才能的工作。老板的价值观，直接上级的价值观跟自己都比较契合，公司的文化也挺好。真心希望能在这家公司发挥自己的才能，也希望公司能做大做强。&lt;/p&gt;
&lt;h3&gt;2019年展望&lt;/h3&gt;
&lt;p&gt;2019年还是希望工作上能继续发挥能量，希望自己的技术能力和管理能力都能得到提升，还有希望自己的团队的每个人的能力都得到提升，当然也希望他们能得到相应的报酬。&lt;/p&gt;
&lt;p&gt;2019年有两件大事。&lt;/p&gt;
&lt;p&gt;1.新房装修。一是要找钱装修，二是要在年底前装修完，希望能在农历年前住进去。新房装修是个大工程，自己完全没有经验，所以要多花点心思。&lt;/p&gt;
&lt;p&gt;2.希望老婆能生个小孩吧&lt;/p&gt;
&lt;p&gt;2019加油。努力！奋斗！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Sun, 10 Feb 2019 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2019-02-10:2018nian-zong-jie-he-2019nian-zhan-wang.html</guid><category>总结</category></item><item><title>iOS开发如何做外部测试</title><link>https://szuwest.github.io/ioskai-fa-ru-he-zuo-wai-bu-ce-shi.html</link><description>&lt;h2&gt;iOS开发如何做外部测试&lt;/h2&gt;
&lt;p&gt;我们做APP开发的，开发出来的APP还未上线，又要想给别人用一下，该怎么做？实际上这是我们每个做APP开发的人都会遇到的，但是并不是每个人都清楚怎么做，有哪些方式。今天我们就来讲一讲。&lt;/p&gt;
&lt;p&gt;在将iOS的APP如何给别人使用和测试前，先说一下安卓APP开发是怎么做的。安卓端是很简单的，你只要先生成一个证书文件keystone，然后用这个文件给apk签名，就可以将apk发给任意一个人安装使用了。这很简单，也很方便。可是iOS的就没那么容易了。我们还是从最简单的开发人员如何用真机测试开始说起。&lt;/p&gt;
&lt;h3&gt;真机调试&lt;/h3&gt;
&lt;p&gt;我们有了一个想法，并开始写代码，模拟器调试很方便，要在iPhone上看效果怎么办了。你直接将iPhone连上电脑是不行的。现在的情况至少你需要一个Apple ID，在Xcode上登录你的账号，在调试前Xcode会自动帮你初始化一些东西，然后就可以将APP安装到你的iPhone上了。在以前，你这个AppleID不能是普通的账号，必须是付了前的开发者账号才行。现在苹果放宽限制了。&lt;/p&gt;
&lt;p&gt;这种方式的做法是你的手机必须连上你的电脑，在Xcode上选择你的iPhone来调试，Xcode会自动帮你注册设备的UDID。如果你没办法把iPhone连接到电脑上呢？或者不方便把iPhone连接到电脑上，毕竟如果是老板的手机的话，不方便那种做的。那我们需要一种把安装包提供给别人安装，或者一个地址给别人安装的方式。&lt;/p&gt;
&lt;h3&gt;adhoc 方式&lt;/h3&gt;
&lt;p&gt;我们将项目archive后，在导出（现在Xcode叫distribution）的时候，有个选项是adhoc，就是专门来做这个的。我们可以将APP导出成一个IPA，然后把这个IPA丢给别人，对方可以通过将iPhone连接到电脑，打开iTunes，通过iTunes来安装这个IPA到手机上。这还是有点麻烦，普遍做法都是放到一个网页上，别人通过这个网页来安装这个IPA。我一般都是借助第三方来做这步，例如蒲公英网站就是专门做种业务的。把你的IPA上传到蒲公英上，还会生成网址二维码，很方便分发。&lt;/p&gt;
&lt;p&gt;但是这个IPA并不是每个人都可以安装的，能安装的前提是他/她的手机必须先注册过，即他/她的手机的UDID必须先注册到苹果的网站上，最终在打包IPA的时候苹果会把这些UDID写入证书里，只有注册过的手机才能安装成功。&lt;/p&gt;
&lt;p&gt;如何注册手机UDID呢？最简单的方法是将手机连接到开发电脑，Xcode会自动帮你注册这个设备。但是并这很不方便，因为别人的手机你不能预先拿到的。当然还有别的方法，例如你放手机拥有这连接电脑，在iTunes上可以看到那部手机的UDID，让他把UDID发给你。这样的操作成本也很高。还是借助别人第三方来做这个事情比较好。蒲公英在这方面做得不错，他们专门做了个网站来帮你获取UDID。网站地址是：https://www.pgyer.com/udid。我一般都是把这个网址发给对方，对方按照网址的做法就可以获取到他手机的UDID，通过微信发给我。然后我到itunesconnect网站上，把这个UDID注册好。有一点特别需要的是，你注册好UDID后，要重新导出IPA。之前已经导出的IPA还是不能装的，要重新打包和导出IPA。并且要特别注意，在导出IPA之前，要把本地的profiles文件先删掉，让Xcode去苹果服务器同步最新的已注册设备列表。profiles文件一般是存放在 /Users/用户名/Library/MobileDevice/Provisioning Profiles  这个目录下。将这个目录下的文件都删掉，在下次打包导出的时候，会自动重新下载最新的。&lt;/p&gt;
&lt;p&gt;adhoc方式还是有UDID这个前提，还是不是很方便，有没有不需要任何登记，直接给个安装地址，就能安装的呢？还是有的，下面介绍。&lt;/p&gt;
&lt;h3&gt;Enterprise（企业级证书）方式&lt;/h3&gt;
&lt;p&gt;有一种证书叫企业级开发证书，这种证书跟普通的开发者证书不一样。企业级开发证书是299美刀每年，普通的开发证书是99刀每年。而且不要跟99刀每年的开发证书里面的企业开发者混淆。在99刀每年的开发证书里，分个人开发者和企业开发者两种，企业开发者要提交的资料多一些。企业级开发证书是专门用户处理APP不需要上架App Store的情况。也就是说你用这个证书开发的APP，可以不经过Apple审核，不上App Store，自己发布，别人就能安装。&lt;/p&gt;
&lt;p&gt;什么情况下会用到这种证书呢，我想一种情况是企业内部的APP，因为一些问题，不需要上App Store，自己内部人士使用，采用这种方式是很好的。还有一种用法就是用作beta测试。我们开发出来的APP，需要进行多人的beta测试，可以用企业级证书来打包发布，然后把安装网址发给用户，用户就可以安装使用了。真的很方便。这种方式还是挺流行的，特别是大公司内部，都是使用这种方式来做测试，当测试完成之后，再用普通开发证书打包，提交到App Store审核，完美。&lt;/p&gt;
&lt;p&gt;那这种方式有没有什么弊端？当然是有的，例如用企业级开发证书打包的APP，无法使用推送通知，还有一些跟App Store相关的功能。如果你是内部使用的APP，还无法使用App Store来更新APP，只有你们自己实现APP更新的功能。还有一个缺点，一般来说用企业级开发证书打包APP，使用的BundleID跟正式要发布到App Store的BundleID是不一样的（普通做法都是在正式的bundleID后面加Enterprise后者.enterprise）,这样安装到手机上就是两个不同的APP了。对应普通用户来说，你不知道怎么给他解释这个。如果企业版和正式版都用同一个BundleID，也有不好的地方。另外还有一个缺点，就是安装企业版APP的时候，需要先信任一个证书。而且是要到设置里面自己点击信任，操作有点难度，而且很多人不敢怎么信任这些。。&lt;/p&gt;
&lt;p&gt;另外，如果你只是用企业级开发证书来打包测试的，那么要经常在企业级开发证书和普通开发证书之前切换，你用持续集成环境打包的话，还要专门设置企业版打包，我以前用Jenkins做个这个设置，挺烦，折腾了不少精力，也专门写过这方面的文章。&lt;/p&gt;
&lt;p&gt;现在还有很多企业是用这种方式来做beta测试的。&lt;/p&gt;
&lt;h3&gt;TestFlight，公开链接&lt;/h3&gt;
&lt;p&gt;大公司可以申请企业级开发证书，他们不在乎那点钱。企业级开发证书打包可以随时打包随时发布，那真是比较理想的beta测试方式。但是小公司怎么办呢，小公司没那么多财力和精力做这个事情。苹果也提供了TestFlight的方式。
TestFlight最早是一个独立的公司，后来被苹果公司收购了，并整合到了iTunesconnect上。早期我们怎么用TestFlight来做beta测试呢？从iTunesconnect上可以看到，有一个内部测试和外部测试分类。内部测试，就是你可以邀请一些人（通过他们的Apple ID）来加入iTunesconnect，让他们作为内部测试人员。你只需要将你的APP上传到iTunesconnect，然后你刚刚上传的版本，加入到内部测试中，内部测试人员就可以收到邮件，邮件里会教他们如何使用TestFlight来安装测试。这种方似乎有缺陷，因为必须邀请他们加入iTunesconnect才行，显示这是针对公司内部人员的。&lt;/p&gt;
&lt;p&gt;而外部测试的话，不需要邀请，但是需要获取他们的邮件地址。并且你的APP版本需要先提交审核人员审核，审核通过了才能通过邮件发给相关人员。后来有第三方公司专门做这个的，不再需要用户是邮件了。你只需在审核过后，导入他们提供的文件就可以愉快的发布任何用户测试了。这种方式我自己没有试过，但是我通过这种方式安装过别人的APP。如果可以省略掉手机用户的邮件这步，真是一个大进步。&lt;/p&gt;
&lt;p&gt;不过好消息是，现在苹果已经提供了一种叫&lt;strong&gt;公开链接&lt;/strong&gt;的方式，不再需要手机用户的邮件来做beta测试了。当然审核是省略不了，你仍然需要上传你构建的APP，然后建一个小组，在这个组里选中你刚构建的版本，提交审核。审核过后，会有一个叫公开连接的按钮，点击之后，会生成一个连接地址，你可以把这个链接地址发给任何人，他们打开这个链接后，会有教他们怎安装使用（当让还是通过TestFlight）。&lt;/p&gt;
&lt;p&gt;现在我看淘宝和京东已经采用这种方式在做beta测试了。这种方式优点很明显：用户是通过苹果官方方式安装的，他们比较信任这个，比那种企业版要额外信任的方式要好。还有这种方式跟正式版是没有任何区别的，推送什么的都是正常可以用的。当然缺点就是每个版本都需要苹果先审核，有点慢，不够快捷（也许这不算缺点，因为这是必要的）。&lt;/p&gt;
&lt;p&gt;我觉得&lt;strong&gt;公开链接&lt;/strong&gt;这种方式是最好的beta测试方式，值得每个iOS开发负责人去使用。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;如果你觉得这篇文章有用，请打赏小钱喝杯咖啡^_^
&lt;img alt="打赏" src="https://raw.githubusercontent.com/szuwest/szuwest.github.io/master/images/2018-02-21%20133111.jpg" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Sat, 05 Jan 2019 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2019-01-05:ioskai-fa-ru-he-zuo-wai-bu-ce-shi.html</guid><category>iOS开发 beta测试 TestFlight 公开链接</category></item><item><title>SVG图片在移动端的应用解决方案</title><link>https://szuwest.github.io/svgtu-pian-zai-yi-dong-duan-de-ying-yong-jie-jue-fang-an.html</link><description>&lt;h2&gt;SVG图片在移动端的应用解决方案&lt;/h2&gt;
&lt;p&gt;近几年来SVG使用得越来越多，就连Android的官方库也加入VectorDrawable的支持。这个类就是用来支持向量图的。SVG图片在web端使用非常广泛，我第一次接触这个也是在做react-native的项目中使用的。当时我们要做一些动画，需要从一个形状变换成另一个形状，这种一般都是用矢量图来做的。当时设计师就给了我一些矢量图，于是我就开始研究这个东西。&lt;/p&gt;
&lt;p&gt;在react-native中，有专门一个库叫&lt;a href="https://github.com/react-native-community/react-native-svg"&gt;react-native-svg&lt;/a&gt;来处理这个。不过当时要做两个SVG形状的动画变化，并不是任何一个形状都可以的，需要遵循一定的标准。设计师给我的两个SVG文件并不能转换。后来是我自己根据文件里的一些关键参数自己在代码里直接画出来后，再做转换动画。&lt;/p&gt;
&lt;p&gt;最近我在做的native项目中，也遇到了要用SVG的图片。我们的项目里要从服务器下载SVG图片来展示。我们要实现的这些文件是需要服务器动态配置的，也就是说我们不能预先打包进我们的APP里。所以我们这里的要提供一个解决方案，跟图片JPG图片一样显示，缓存。&lt;/p&gt;
&lt;p&gt;这个需求跟之前我遇到的那个需求是很不一样的，之前的是设计师已经定义好图片，我们工程师直接拿到文件在程序里展示，不需要考虑下载和缓存之类的。这种需求其实很简单，我们实际上大部分的需求就是这种需求，网上有很多库可以完成这种需求。把SVG图片跟JPG等普通图片一样使用，网上的方案还真不多，特别是iOS方面。。。。&lt;/p&gt;
&lt;p&gt;要像普通图片一样使用，就要考虑下载，本地缓存，内存缓存。像这种需求，我们移动端都会使用专门的图片框架，像安卓端的glide，UIL等，iOS端的SDWebImage等。但是这种库它是默认都不会考虑SVG图片。但是我们最好还是像使用这种框架来处理SVG图片。最好的方式就是把SVG的支持集成到这些库中。好在这些库的优点就是容易扩展。&lt;/p&gt;
&lt;h3&gt;安卓端的解决方案&lt;/h3&gt;
&lt;p&gt;由于我们的项目是采用glide框架来处理图片，所以这里就只讲在这个框架集成SVG图片的展示。&lt;/p&gt;
&lt;p&gt;实际上glide真的是一个很强大的库，怪不得那么多人用它（早几年我们都是用UIL），它在它的sample例子里就提供了SVG的展示支持&lt;a href="https://github.com/bumptech/glide/tree/master/samples/svg"&gt;svg&lt;/a&gt;。在这个例子里，采用的SVG解码方式是使用外部的解码库。它采用的解码库是&lt;a href="https://github.com/BigBadaboom/androidsvg"&gt;androidsvg&lt;/a&gt;。这个库是web端移植过来的，所以它有很好的兼容性，是很不错的库，虽然它的star不是很多。Android就是好，有强大的Java社区，受益于这些社区，很多库都不错。而这方面iOS就那么好了，这个等一下再说。&lt;/p&gt;
&lt;p&gt;按照它提供的sample来集成SVG的支持，不是很难。但是我遇到了其他问题。因为我们项目里的glide使用的是3.7版本，sample是基于4.8版本的。这两个版本在API上有很大区别，变化很大。所以我必须要先升级到4.8版本。等我升级完后，接入SVG的支持，然而SVG图片死活显示不出来。最终发现是我的AppModule无法生成。一直在文档，查资料，还是找不到问题，我是完全按照官方文档升级和集成的。最终我发现可能是跟AndroidX相关（还不知道AndroidX是什么的自己查）。我们项目升级到了AndroidX，它会影响一些annotation生成方式。我们的项目采用插件式框架。我们很多通用库是放在一个commomlibrary的Module中，glide也是。APP module就只是一个壳。但是一些annotation的声明一定要放在APP module中才行。所以我们把 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;annotationProcessor&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;androidx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;annotation&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;annotation&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;1.0.0&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;annotationProcessor&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bumptech&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;glide&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;compiler&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;4.8.0&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;放在了APP module中，最终那些自动生成的代码才会真正的生成。这样就可以很愉快的用glide来显示SVG图片了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;GlideSvgUtil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;//显示网络中的svg文件&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;showSvg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ImageView&lt;/span&gt; &lt;span class="n"&gt;imageView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Glide&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;imageView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getContext&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="n"&gt;as&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PictureDrawable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;listener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;SvgSoftwareLayerSetter&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;into&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;imageView&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;//把svg放入到raw中，通过rawid来显示&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;showSvgRes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ImageView&lt;/span&gt; &lt;span class="n"&gt;imageView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;rawId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Uri&lt;/span&gt; &lt;span class="n"&gt;uri&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Uri&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ContentResolver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SCHEME_ANDROID_RESOURCE&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;://&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;imageView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getContext&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;getPackageName&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;
                &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;rawId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;Glide&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;imageView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getContext&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="n"&gt;as&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PictureDrawable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;listener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;SvgSoftwareLayerSetter&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;into&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;imageView&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;//把svg的XML加载到字符串中来显示&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;showSvgContent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ImageView&lt;/span&gt; &lt;span class="n"&gt;imageView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;svgContent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Glide&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;imageView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getContext&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="n"&gt;as&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PictureDrawable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;listener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;SvgSoftwareLayerSetter&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;svgContent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getBytes&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="n"&gt;into&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;imageView&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;iOS端的解决方案&lt;/h3&gt;
&lt;p&gt;iOS的方案还不是很好解决，我没有发现有哪一个图片框架是集成了SVG或者提供了集成的例子的。而且我们的同事还发现了一个问题。我们服务器提供的SVG图片在很多库解码出来后没有了颜色，是黑白的。很诡异的问题，然而安卓端没有这问题。我们找很多库，像SVGKit，SwiftSVG，PocketSVG，Macaw，这些库都是超过1000star的，都无法正常显示。我基本确定是我们SVG文件的兼容性问题，我问我们的设计师他是怎么生成SVG文件的。他说是用sketch导出来的。这些文件在web和安卓的库，还有甚至xcode里都是能正常显示的。这里我提供一个不能正常显示的图片。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;图层_1&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;data-name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;图层 1&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.w3.org/2000/svg&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;viewBox=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0 0 80 80&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;defs&amp;gt;&amp;lt;style&amp;gt;&lt;/span&gt;.cls-1{fill:#ff9595;}.cls-2{fill:#ffcc80;}&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&amp;lt;/defs&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;彩色图标&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;cls-1&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;M43,77A27.14,27.14,0,0,0,58.64,27.67a24.55,24.55,0,0,1-6.4,8A24.44,24.44,0,0,0,34.55,3a24.48,24.48,0,0,1,.87,6.49c0,21.19-25.57,21.72-25.57,42.37C9.85,64.9,20.47,77,43,77Z&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;cls-2&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;M51,66c0-9.28-11.79-11.85-11.79-21.74A12.3,12.3,0,0,1,40,39.95,20.79,20.79,0,0,0,34.77,76.4,54.34,54.34,0,0,0,43,77c.86,0,1.7,0,2.53-.12A13.47,13.47,0,0,0,51,66Z&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;因为是颜色不能正常显示，我猜肯定是defs标签里的内容不能正常解析。我稍微改了下文件，就能正常显示了。我还发现对SVG显示支持的比较好的是Macaw，其他的貌似都有点小问题。所以我把这个问题在Macaw上提交了。我不知道他们会什么时候修改，所以我就自己去研究他们的源代码，准备自己来解决了。很快我就发现他们在预解析阶段，解析defs标签的时候，就没有考虑style这种子标签。所以我就加上去了，就两三行代码（他们的代码架构挺好），然后就正常显示了。后来我又到Macaw网站上看，他们已经回复我了，并且已经支持！前后也就一个多小时！他说defs标签里一般不会放style标签，不过很多其他库支持，所以他们也就支持了。我去看他改的代码，几乎跟我改一样。所以我就放弃自己的改动，采用cocoapods直接拉取他们的master上的最新代码。&lt;/p&gt;
&lt;p&gt;解码的问题解决了，但是怎么集成到图片框架里呢？我们项目是采用swift开发的，我们采用的图片处理框架是Kingfisher。我去Kingfisher的网站上看，喵神很厉害，已经有很好的文档教我们怎么扩展图片解码器。我一看，另一个问题来了，解码器是在工作线程中进行的，并且要返回一个UIImage。Macaw这个库并没有提供一个可以在子线程中将SVG文件转为UIImage的方法。他们的方法是将SVG显示在一个UIView里然后截图。。。也有人将这个问题提了。我看他们源码发现有支持的，但是没有放出来，无法使用。&lt;/p&gt;
&lt;p&gt;我最终也只能采用曲线救国的方法了。还是用他们的方法，我在解码线程里同步切到主线程中生成UIImage，然后再在子线程中返回这个UIImage。好消息是，最近两天，他们终于支持将一个文件直接转换为UIImage了具体方案看&lt;a href="https://github.com/exyte/Macaw/issues/468"&gt;这里&lt;/a&gt;，不过我还没测试，他们也还没发新版。&lt;/p&gt;
&lt;p&gt;SVG解码器&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Foundation&lt;/span&gt;
&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;UIKit&lt;/span&gt;
&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Kingfisher&lt;/span&gt;
&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Macaw&lt;/span&gt;

&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;SVGProcessor&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;ImageProcessor&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CGSize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;CGSize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;不支持size为0的情况m，将采用默认值32&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;let&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;com.wegene.future&amp;quot;&lt;/span&gt;

    &lt;span class="n"&gt;func&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ImageProcessItem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;KingfisherOptionsInfo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;UIImage&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;let&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;:
            &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;already an image&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;let&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;:
            &lt;span class="n"&gt;let&lt;/span&gt; &lt;span class="n"&gt;svgContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Encoding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utf8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;UIImage&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;
            &lt;span class="n"&gt;DispatchQueue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sync&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="c1"&gt;//现在Macaw库暂时只支持这种方式生成UIImage,下一版他们支持后台线程生成UIImage的方式，以后再做修改&lt;/span&gt;
                &lt;span class="n"&gt;let&lt;/span&gt; &lt;span class="n"&gt;rootNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;try&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;SVGParser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;svgContent&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;let&lt;/span&gt; &lt;span class="n"&gt;macawView&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MacawView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rootNode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;CGRect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;origin&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;CGPoint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zero&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="n"&gt;UIGraphicsBeginImageContextWithOptions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;UIScreen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;macawView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;UIGraphicsGetCurrentContext&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;UIGraphicsGetImageFromCurrentImageContext&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="n"&gt;UIGraphicsEndImageContext&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;UIImageView的扩展&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;extension&lt;/span&gt; &lt;span class="n"&gt;UIImageView&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;func&lt;/span&gt; &lt;span class="n"&gt;setSvgImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;let&lt;/span&gt; &lt;span class="n"&gt;processor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SVGProcessor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;let&lt;/span&gt; &lt;span class="n"&gt;_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;with&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;[.&lt;/span&gt;&lt;span class="n"&gt;processor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;processor&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;谢谢阅读。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;如果你觉得这篇文章有用，请打赏小钱喝杯咖啡^_^
&lt;img alt="打赏" src="https://raw.githubusercontent.com/szuwest/szuwest.github.io/master/images/2018-02-21%20133111.jpg" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Sat, 03 Nov 2018 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2018-11-03:svgtu-pian-zai-yi-dong-duan-de-ying-yong-jie-jue-fang-an.html</guid><category>算法 SVG androidsvg glide Macaw</category></item><item><title>谈谈归并排序算法</title><link>https://szuwest.github.io/tan-tan-gui-bing-pai-xu-suan-fa.html</link><description>&lt;h2&gt;谈谈归并排序算法&lt;/h2&gt;
&lt;p&gt;归并排序算法是一个很重要的算法。在排序算法中，算是非常重要的一个算法。我们常说的数组归并排序，是指二路归并排序算法，时间复杂度是O(nlog(n)),空间负责度是O(n).核心的思想就是对两个有序数组合并成一个有序数组。对于一个未排序的数组怎么产生两个已排序的数组呢？其实就是对数组不断的分割，分割成多个只有一个元素的数组。只有一个元素的数组，当然这个数组就是有序的了。然后再将这些数组进行两两合并，合并后的数组还是有序数组，这样再次进行两两合并，最终可以合并成一个有序数组，这样排序就完成了。&lt;/p&gt;
&lt;p&gt;归并排序的算法看起来不是很复杂，但是实现起来我觉得不是那么简单。首先它需要额外的空间，这个额外的空间怎么分配跟算法实现方式有关。然后算法的实现方式有递归方式和迭代方式两种。网上流行的都是递归方式。&lt;/p&gt;
&lt;h3&gt;递归方式&lt;/h3&gt;
&lt;p&gt;递归方式采用典型算法：分治法来进行。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.将数组分为两半，前一半和后一半。&lt;/li&gt;
&lt;li&gt;2.将这两半进行有序数组合并&lt;/li&gt;
&lt;li&gt;3.继续进行第1步，直到数组不能在分为止&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里明显采用了递归定义，递归定义其实不是那么好理解，也不是那么难理解。简单来说就是不断的将一个数组进行对半分，一直分到不能分为止，这样最终就会分得很多个元素个数为1的数组，然后再将这些数组进行两两合并。注意子数组可能是奇数个，但是这也没关系，没得合并的就暂时放在原位，下一次合并的时候总会用到，最终一个会合并成一个数组。&lt;/p&gt;
&lt;p&gt;伪代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;MergeSort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;If&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;
     &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="n"&gt;Find&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;middle&lt;/span&gt; &lt;span class="n"&gt;point&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;divide&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt; &lt;span class="n"&gt;into&lt;/span&gt; &lt;span class="n"&gt;two&lt;/span&gt; &lt;span class="n"&gt;halves&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  
             &lt;span class="n"&gt;middle&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
     &lt;span class="mf"&gt;2.&lt;/span&gt; &lt;span class="n"&gt;Call&lt;/span&gt; &lt;span class="n"&gt;mergeSort&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="n"&gt;half&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   
             &lt;span class="n"&gt;Call&lt;/span&gt; &lt;span class="n"&gt;mergeSort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="mf"&gt;3.&lt;/span&gt; &lt;span class="n"&gt;Call&lt;/span&gt; &lt;span class="n"&gt;mergeSort&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt; &lt;span class="n"&gt;half&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
             &lt;span class="n"&gt;Call&lt;/span&gt; &lt;span class="n"&gt;mergeSort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="mf"&gt;4.&lt;/span&gt; &lt;span class="n"&gt;Merge&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;two&lt;/span&gt; &lt;span class="n"&gt;halves&lt;/span&gt; &lt;span class="n"&gt;sorted&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;step&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
             &lt;span class="n"&gt;Call&lt;/span&gt; &lt;span class="n"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;伪代码来源：&lt;a href="https://www.geeksforgeeks.org/merge-sort/"&gt;geeksforgeeks&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里特意提一下geeksforgeeks这个网址，这里专门讲算法的网站，很多算法有解析和实现，而且基本都有c和Java的实现，甚至Python。非常有用的网站。&lt;/p&gt;
&lt;p&gt;我的实现代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;_sorted_merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;len_l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;len_r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;arr_l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;len_l&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;arr_r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;len_r&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;len_l&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;arr_l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;len_r&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;arr_r&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;len_l&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;len_r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr_l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;arr_r&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arr_l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arr_r&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;len_l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arr_l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;len_r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arr_r&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="n"&gt;free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr_l&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr_r&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;_recursive_merge_sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;_recursive_merge_sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;_recursive_merge_sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;_sorted_merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;recursive_merge_sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;_recursive_merge_sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里整个完整的实现是用了3个方法。暴露给外界使用的方法是 &lt;strong&gt;void recursive_merge_sort(int a[], int n)&lt;/strong&gt;这个。递归分割数组是&lt;strong&gt;void _recursive_merge_sort(int a[], int start, int end)&lt;/strong&gt;这个方法。注意方法参数是数组指针，要分割的开始坐标，要结束分割的坐标。另外核心的合并方法有序数组的方法是&lt;strong&gt;void _sorted_merge(int a[], int start, int mid, int end)&lt;/strong&gt;。注意这里并不是传了两个数组进去，而是一个数组，给定了起始，中间分割，结束的坐标。中间分割坐标是归并在前一部分的。这些都是细节，没有搞清楚，程序就会出错。&lt;/p&gt;
&lt;p&gt;在&lt;strong&gt;_sorted_merge&lt;/strong&gt;这个方法内，新建了两个数组，将两半的元素拷贝到这两个数组中，然后合并到原始数组中。归并排序需要的额外空间是在这里花费的。这个算法实现完全是采用的是&lt;strong&gt;自顶向下&lt;/strong&gt;的思维方式。一层一层的从顶往下分割，分割到最后在合并。&lt;/p&gt;
&lt;p&gt;还有一种方式就是&lt;strong&gt;自底向上&lt;/strong&gt;的思维方式。我们知道数组是可以随机访问的，因为坐标可以随时利用。如果一开始我们就只针对一个个的元素，那么这些元素就已经是独立的，换句话说就是已经分别好的。我们就针对每一个个体，直接跟它傍边的元素进行两两合并就好了。&lt;/p&gt;
&lt;h3&gt;迭代方式&lt;/h3&gt;
&lt;p&gt;迭代的方式就是把上面的&lt;strong&gt;void _recursive_merge_sort(int a[], int start, int end)&lt;/strong&gt;这个方法换成循环迭代来实现。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;iteractive_merge_sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;step&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;step&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;step&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;_sorted_merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;step&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;迭代方式定义了一个step,这个是需要合并的子数组的长度，初始化为1，这样就不能分割数组，直接合并就好。步长每次翻倍，最终步长超出数组长度就退出。这里也有很多细节要注意，定了步长之后，要对整个数组按照这个步长分成多个子数组来合并，这里要注意最后一个子数组的元素个数可能个数不够，不能超过数组总长。&lt;/p&gt;
&lt;h3&gt;另一种迭代方式&lt;/h3&gt;
&lt;p&gt;我们这里的有序数组合并都是在在&lt;strong&gt;_sorted_merge&lt;/strong&gt;这个方法内实现的，空间分配也在这。这个方法会被频繁调用。空间会被进行很多次分配和释放。在我大学的数据结构的课本里，归并排序采用的并不是上面的方法，而是采用了另外一种迭代方法来实现。&lt;/p&gt;
&lt;p&gt;先上代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;_merge_array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;start1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;end1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;end1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;start1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;start2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;end1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;end2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;start2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;end2&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;end2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;end1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;start2&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;end2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start1&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start2&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;end1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start1&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start2&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;end2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start2&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

        &lt;span class="n"&gt;start1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;end2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;iteractive_merge_sort2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;flag&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;_merge_array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;flag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;_merge_array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;flag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;flag&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在&lt;strong&gt;void iteractive_merge_sort2(int a[], int n)&lt;/strong&gt;这个方法中，直接申请了一个跟原始数组一样大小的空间，然后后面的数组的合并算法就在这两个数组之间进行。当然最后如果最终结果被合并到了b数组中的话，就把它拷贝到原始的a数组中。而核心的数组合并在&lt;strong&gt;void _merge_array(int a[], int b[], int n, int step)&lt;/strong&gt;这个方法中。它接收两个数组，第一位原始数组，第二个为合并后的数组。他们的数组大小一样，还有一个关键参数是步长。这个步长就是分割好的已有序数组的元素个数。里面的实现细节还是数组的下标，不能超过总数组长度。
这个方法的特别之处就是它是一次性分配内存的。这个说是好还是不好呢，我也不太敢确定。但是感觉他的效率要高些，因为不用频繁分配和释放内存。&lt;/p&gt;
&lt;h3&gt;链表的排序&lt;/h3&gt;
&lt;p&gt;大家都很清楚数组的排序有很多种，方法各异，但是不知道你想过没有，链表是怎么排序的。链表因为只能顺序访问，不能想数组那样随机访问，所以基本上数组的排序算法很难直接用到链表上。但是这里有个算法天然的可以用在链表上，就是&lt;strong&gt;归并排序算法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;归并算法的核心就是分割组和合并有序组。这个是可以用在链表上的。对两个有序链表的合并可以说比有序数组的合并还简单。而对链表的分割也有好办法。&lt;/p&gt;
&lt;p&gt;链表的分割用到了链表的常用算法：快慢指针法
先看链表定义：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;_Node&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;_Node&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;PNode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;再看链表分割法，我们分割肯定也是按照中间分割，那么关键点就是找到中间链表节点&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;quot;CNode.h&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;PNode&lt;/span&gt; &lt;span class="nf"&gt;_getMiddleNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PNode&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt;  &lt;span class="nb"&gt;NULL&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Node&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;slow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fast&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fast&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fast&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;fast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fast&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;slow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;slow&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;slow&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个方法里的快指针的速度是慢指针的两倍，所有快指针到达终点的时候，慢指针刚好走了一半。这里需要注意的数快指针的初始位置是比慢指针多一步的。然后按照中间分割点的话，慢指针是算在前一半里面的。&lt;/p&gt;
&lt;p&gt;再看一下我们是如何用这个方法将链表进行分割的。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;sortSingleList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;  &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Node&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;midNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_getMiddleNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;Node&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;restNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;midNode&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;midNode&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;sortSingleList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;sortSingleList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;restNode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_mergeSortedList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;restNode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里可以看到，分割方法和数组的递归分割法是一样的，都是递归调用，只不过这里多了一步计算链表中间节点的步骤。&lt;/p&gt;
&lt;p&gt;再来看核心算法归并算法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;PNode&lt;/span&gt; &lt;span class="nf"&gt;_mergeSortedList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PNode&lt;/span&gt; &lt;span class="n"&gt;head1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PNode&lt;/span&gt; &lt;span class="n"&gt;head2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;head1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;head2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;head2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;head1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Node&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;newHead&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Node&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Node&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;head1&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;head2&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;newHead&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;p2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head2&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;newHead&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;p1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head1&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;Node&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;cur&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;newHead&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;cur&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;p1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;cur&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;p2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;cur&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cur&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;cur&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;cur&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;newHead&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里我采用的是非递归算法，要点是先把头节点确定，接下来的跟数组的合并算法差不多，注意最后元素合并跟数组不一样，只连接next节点，不需要while循环。
当然还有递归方式来实现&lt;strong&gt;_mergeSortedList&lt;/strong&gt;方法，链表天生适合递归。这里就不说了，有兴趣的可以到我的github上看，那里有各种实现。&lt;/p&gt;
&lt;h3&gt;归并排序的其他应用&lt;/h3&gt;
&lt;p&gt;这里我只讲一种场景。就是外部排序。如果我们的要排序的数据量很大，而内存有比较小，我们该如何排序呢？这个也是经典面试题目。这里肯定是要用到归并排序，而且是多路归并排序，因为你需要将数据分为N份来拿到内存中排序，然后对着N份进行归并排序。这里面整体算法就复杂了，也不是这里可以说的明白的。有兴趣可以到网上查查资料。&lt;/p&gt;
&lt;p&gt;好了，就到这。这篇文章历时两个月终于写完了。。。。有兴趣可以看
&lt;strong&gt;&lt;a href="https://github.com/szuwest/AlgorithmTest"&gt;我写的各种算法github工程&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;如果你觉得这篇文章有用，请打赏小钱喝杯咖啡^_^
&lt;img alt="打赏" src="https://raw.githubusercontent.com/szuwest/szuwest.github.io/master/images/2018-02-21%20133111.jpg" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Mon, 06 Aug 2018 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2018-08-06:tan-tan-gui-bing-pai-xu-suan-fa.html</guid><category>算法 归并排序</category></item><item><title>中国互联网群体跟几年前发生了巨大变化</title><link>https://szuwest.github.io/zhong-guo-hu-lian-wang-qun-ti-gen-ji-nian-qian-fa-sheng-liao-ju-da-bian-hua.html</link><description>&lt;h2&gt;中国互联网群体跟几年前发生了巨大变化&lt;/h2&gt;
&lt;h3&gt;抖音和拼多多&lt;/h3&gt;
&lt;p&gt;今天晚上刷着刷着抖音的时候，我突然意识到现在的互联网跟几年前的互联网已经发生了巨大的变化。这个变化其实很在就开始，也很早有人提过了。但是我自己也是刚刚才深刻的意识到这一点。&lt;/p&gt;
&lt;p&gt;我在抖音上只关注了几个人，这些人都基本上是在农村或者小城市生活的。然后联想到最近吵得的很火的拼多多的用户群体，还有更早的快手，现在很火的应用的主要用户群体，都是以小城市和农村的用户为主。所以我突然意识到，现在已经不是以前那个以社会白领用户或者高端用户为主的互联网了。如果现在要做纯互联网的应用，就要考虑“低端”用户为主了，可以说得小城市或者农村的用户得天下了。&lt;/p&gt;
&lt;p&gt;你看拼多多，3年就上市了，市值超过200亿美金，号称有3亿用户。而抖音估值也不低于100亿美金。拼多多被很多都市白领吐槽质量差假货多，殊不知人家的主要用户就不是你们。而抖音上很多内容都是三四线城市的人或者农村人发的。我估计抖音后台应该很清楚，抖音的发布内容主要用户应该是三四线以外的用户群体。为什么会这样子，我想在我说我的想法之前先说说别的。&lt;/p&gt;
&lt;p&gt;我自己最常用的几个应用是微信，微博，雪球，还有知乎等一些跟自己专业相关的社区应用。微信是通信工具没的说，但是里面的公众号内容其实主要是给社会精英，白领消费的。微博，典型的社会精英和媒体社交平台。知乎，大部分也是社会白领在上。这就是我们以前开发互联网应用的主要目标用户群体。&lt;/p&gt;
&lt;p&gt;你看，我们一致性的忽略了“低端”用户。其实不是我们故意的，而且以前这些用户不存在或者没有消费能力。那为什么现在突然就发生变化了呢？其实那些“高端”用户也还在，并没有消失，但是却也跟以前不太一样了。因为这些年中国社会本身也发生了巨大变化。&lt;/p&gt;
&lt;h3&gt;变化&lt;/h3&gt;
&lt;p&gt;首先是手机移动互联网的普及，还有4G网络的普及。现在跟几年前最大的差别就是手机市场基本跑和了，也就是说年轻人肯定是人手一部手机。然后4G网络的普及，然后你几乎身在中国任何地方，都可以便捷上网。这样移动互联网就比几年前大和广了许多。以前还是以PC互联网为主，现在真正的是以移动互联网为主了。而且4G网络的普及也很重要，现在流量也比几年前便宜好多了，大部分人就算是农村的年轻人都可以支付得起流量费了。&lt;/p&gt;
&lt;p&gt;另外一个我觉得也是一个重要原因就是农村和小城镇的发展崛起。现在的农村跟以前的农村已经很不一样了，而大城市的房价高企，中产阶级生活的很焦虑。很多年轻人无法轻松在大城市立足，但是他们回去小城市和农村，却可以生活的很好。你看抖音上有很多内容是在小地方的一些生活和美食，还有拼多多的消费群体，就可以看得出来。大城市的白领每天很焦虑，想着如果赚钱还房贷和养家糊口，而小城市没有那么大的生活压力，可以比较从容的生活和消费。这就孕育出了快手，拼多多，抖音。&lt;/p&gt;
&lt;p&gt;当然，都市白领仍在在那里，也并不会消失，但是由于中国的人群巨大，特别是有广大的农村和小城镇。以后的互联网就不只是都市白领和社会精英们的了，移动互联网都广大的人民群众也都接入了进来，而且他们也已经有一定的消费能力。以后要做纯互联网的产品就跟以前考虑的就不太一样了。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Sat, 04 Aug 2018 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2018-08-04:zhong-guo-hu-lian-wang-qun-ti-gen-ji-nian-qian-fa-sheng-liao-ju-da-bian-hua.html</guid><category>互联网</category></item><item><title>多家公司的人证比对算法体验和开发感想</title><link>https://szuwest.github.io/duo-jia-gong-si-de-ren-zheng-bi-dui-suan-fa-ti-yan-he-kai-fa-gan-xiang.html</link><description>&lt;h1&gt;多家公司的人证比对算法体验和开发感想&lt;/h1&gt;
&lt;p&gt;最近在开发一个声纹采集一体机系统，这个系统里用到了人证比对功能，即刷身份证后拍照，然后将身份证里面的照片跟拍照比对，验证是否是同一个人。我们不是做人脸识别的公司，所以人脸识别功能当然是接入别人的SDK，这里我们找了好多家的人脸算法，对接过程中也遇到很多问题。经过这次的开发，我了解到这个行业的一些现状。&lt;/p&gt;
&lt;p&gt;我们的系统主要运行在Windows电脑上，而且需要无网络也能使用，所以人脸算法必须是用离线版的。人脸算法厂家一般对外提供两种方式：在线版和离线版。一般在线版都可以提供免费试用，离线版需要授权使用。&lt;/p&gt;
&lt;h2&gt;云端方案&lt;/h2&gt;
&lt;p&gt;在线版的人脸识别我试用过依图科技的和中科视拓的SDK。在我们的应用声临其境APP上有个声纹购物的场景，需要人脸验证。这两个厂家提供的API都差不多，依图的API安全性考虑更全面，错误码定义的比较详细。还有他们的API共同点是，图片传输都是将图片数据进行base64编码后传输的。至于准确率，感觉都差不多，没有特别明显的差距。&lt;/p&gt;
&lt;h2&gt;离线方案&lt;/h2&gt;
&lt;p&gt;离线版的人脸算法用得比对多。因为它是用在我们要卖的机器上，而在线版的我们只是做试验。离线版的集成和使用要比在线版麻烦很多。由于离线版要给出算法库，处于安全和容易被拷贝的原因，都是要先授权的。授权的方式一般有两种：在设备上接入加密狗USB key或者绑定设备机器码的方式。加密狗方式比较方便，我们一般采用这种方式。&lt;/p&gt;
&lt;p&gt;我们接入了很多厂家，有阅面科技，中控，杰锐达，商汤，我还把开源的dlib人脸识别也接入了。总体来说，都没有很让人满意的方案，非要挑一个较好的，商汤算是可以，名气这么大也不是白来的。这里要专门说明我们是采用electron技术开发Windows软件，即界面都采用JS来写，一些底层模块采用node插件接入。所以我们专门做了一个人脸算法插件来接入所有的算法。对上层的接口都一样，根据参数来调用不同的算法模块。&lt;/p&gt;
&lt;p&gt;这是一种比较新颖的接入方式，我猜那些算法厂家也没想到别人会已这样的方式接入他们的SDK。迄今为止，所有的厂家的算法接入都不太顺利，有些甚至一直有问题导致我们最终放弃。例如有一家的算法没有64位的SDK被我们放弃，因为我们的插件只支持64的。&lt;/p&gt;
&lt;p&gt;阅面的算法性能还可以，人脸检测很快，比对也挺快，但是它跟使用了一些硬件的特性，导致在我们的一体机上跑不起来，闪退。我们在自己的电脑上测试一直没有问题，但是一旦装到我们的一体机上就不行。直接让他们的开发人员在我们的一体机上远程调试，也没有发现问题。后来我们发现一体机的CPU是i3的，而我们的普通电脑是i5的，把这个现象反馈给他们，他们才说有可能是这个问题。后来他们给了个新demo，确实可以在一体机上跑了。但是他们给的SDK，我们接入到node插件上，还是跑不起来，他们也解决不了。。。。后来我们就放弃他们了，他们实在浪费了我们太多时间。。。&lt;/p&gt;
&lt;p&gt;中控算法接入也不顺利，他们的准确率一般，但是性能较差，人脸检测需要300毫秒，人脸比对则更多，不过他们API还算稳定，我们反馈给他们的问题也解决了，现在主要在用他们的算法。一般厂家提供的SDK demo都是基于c++的，他们把一些dll和bin文件，模型文件都放到跟dll同一目录，在代码里查找dll目录，顺便把模型文件也一起加载了。这种做法在c++工程里没有问题，但是在electron的开发方式会有问题。当electron打包之后，dll会被一起打包压缩，程序运行时再去加载bin文件，已经找不到了。然而他们并没有提供可以设置bin文件路径的地方。。。后来将这个问题反馈给他们，他们才加了个参数设置，可以指定bin文件路径来加载。&lt;/p&gt;
&lt;p&gt;杰锐达的算法接入也不顺利，开始没有64位的，后来给了，但是对身份证小照片人脸检测的时候闪退了，反馈给他们解决。后来人脸比对得分异常，几乎不可用，又反馈给他们，修正后才可用。然后在一体机上又跑不起来，原来是缺少了python.dll。杰瑞达的人脸算法性能跟中控差不多。&lt;/p&gt;
&lt;p&gt;我自己找了个开源的人脸检测和比对的算法：dlib，也把它接入了进来。dlib是一个开源的深度学习库，采用c++语言写的，依赖少，跨平台。然后有人采用它进行了人脸检测和比对的训练（人脸照片库是LFW），产出一个模型放到网上。它号称对这库的识别有99.13%的准确率。这个库有Python版本的，很容易安装使用。但是c++版本的，demo不是很详细，接入的话还是需要自己写不少代码。我查了很多资料，结合OpenCV，才在node插件里使用起来。不过我发现，现实的准确没有那么没有，我测试的准确率不是很高。网上它自称准确率那么高是因为它阈值比较低，是0.6.这个阈值的话或导致很高的误识别率。要至少调到0.48，误识别率才会降低，但是这样的识别效果就差了，跟中控的算法差不多。它的人脸检测时间耗时也挺多。&lt;/p&gt;
&lt;p&gt;商汤是算法接入情况也差不多。但是它的API设计得比较简单和直接。它同样没有提供设置模型库文件的加载路径。这样是没办法在electron用起来的。性能和准确率比别的家要好一些。&lt;/p&gt;
&lt;p&gt;所有对接这些商家的SDK中，他们的Demo发过来，基本上都是不能直接跑的。。。他们就不能搞完善一些吗？还有他们都是直接或者间接都用到了OpenCV这个库。OpenCV图像处理领域真是运用广泛，发挥了很大作用。我也是因为这次开发才了解到了一些OpenCV的知识。还有几乎所有的厂家的图片数据都是转为bgr格式的数据来使用。还有他们比对出来的分数的标准都不太一样，没有可比性。&lt;/p&gt;
&lt;h2&gt;优化过程&lt;/h2&gt;
&lt;p&gt;由于是采用electron来开发，跟传统的c++开发有很多不同，开始人脸识别性能很差，经过一个艰难的优化过程后，才有了基本可接受的效果。至于为什么用electron开发，当然是为了节省开发成本了，并且我们并没有专门开发Windows软件的开发人员。JS开发真的像想要一统天下的节奏。&lt;/p&gt;
&lt;p&gt;一开始人脸识别node插件并不是我开发的。他们采用的做法是JS中每次传身份证照片和拍照的照片去比对，返回结果。前端是定时通过摄像头拍照，将拍的照片转为bmp格式的照片，连同身份证照片（也是bmp格式）一起传入node插件来比对。这个比对接口要耗费7，8百毫秒的时间。&lt;/p&gt;
&lt;p&gt;这里明显有个可以优化的地方，因为身份证照片是不变的，不必每次都去生成人脸特征，只需生成一次即可，后台就只需处理拍照的照片就行。这样图片处理时间就可以减少接近一半的时间了。&lt;/p&gt;
&lt;p&gt;另外采用electron开发不好的一个地方就是，你不好直接处理视频流。视频流要传给video标签来显示预览图，然后它却没有提供从视频流里截取一帧数据接口。我们JS开发的同事的做法是在在界面上放置一个canvas，然后把video放到这个画布上，然后画一帧图像出来，然后把这帧图像拿出来。这数据是RGBA格式的数据，他将这个数据转为bmp格式的数据后，再传给node插件。这一步转换很耗时，要花费300多毫秒。实际上这一步转换是没有必要的，直接把RGBA的数据传给node插件，由node插件来转成人脸算法需要的数据格式。在c++中，可以OpenCV的方法来转换，很方便快捷。这里说一个我犯过的错误。Mat里的rows对应的是图片的高，cols对应的是图片的宽，别搞错了，我就是因为弄反了调试了一晚上。。。做了这个优化之后，人脸识别就比之前快很多了，有了质的区别。不多话说回来，它的性能还是比纯c++写的要差。。。所以鱼和熊掌不可兼得。。。&lt;/p&gt;
&lt;p&gt;通过这次开发体验，感觉国内的人脸算法，还是没有到很靠谱的地步。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;如果你觉得这篇文章有用，请打赏小钱喝杯咖啡^_^
&lt;img alt="打赏" src="https://raw.githubusercontent.com/szuwest/szuwest.github.io/master/images/2018-02-21%20133111.jpg" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Fri, 13 Jul 2018 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2018-07-13:duo-jia-gong-si-de-ren-zheng-bi-dui-suan-fa-ti-yan-he-kai-fa-gan-xiang.html</guid><category>人脸检测 人证比对 dlib electron</category></item><item><title>Flutter框架研究和与RN对比</title><link>https://szuwest.github.io/flutterkuang-jia-yan-jiu-he-yu-rndui-bi.html</link><description>&lt;h2&gt;Flutter是什么&lt;/h2&gt;
&lt;p&gt;现在技术更新迭代真的很快，每隔几年就会出现一些新的技术。当然，Flutter出现有有一点时间了，只不过还未真是发布，但是已经有一些人在使用了。这篇文章主要内容来自我在公司内部的一次分享会，所以大部分内容都是提炼。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Flutter 是由 Google 的工程师团队打造的，用于创建高性能、跨平台的移动应用的框架。&lt;/li&gt;
&lt;li&gt;Flutter 针对当下以及未来的移动设备进行优化，专注于 Android and iOS 低延迟的输入和高帧率&lt;/li&gt;
&lt;li&gt;Flutter的设计跟react-native很像，但是比RN进了一步&lt;/li&gt;
&lt;li&gt;Flutter的开发语言是Dart&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;移动端跨平台开发技术演进&lt;/h2&gt;
&lt;p&gt;现在主流的移动开发平台是Android和iOS，之前还有过windows phone，每个平台的开发技术都不太一样。大家都是针对每个平台开发应用。自然有人就会觉得这样效率低下，想进行跨平台开发。从最开始的Hybrid混合开发技术，到RN的桥接技术，到现在新兴的Flutter技术，跨平台开发技术一直在演进。&lt;/p&gt;
&lt;p&gt;以往最早的Hybrid开发，主要依赖于WebView。但是WebView是一个很重的控件，很容易产生内存问题，而且复杂的UI在WebView上显示的性能不好。react-native技术抛开了WebView，利用JavaScriptCore来做桥接，将js调用转为native调用，只牺牲了小部分性能获取的跨平台开发，这是一大进步。所以现在react-native很流行的原因。&lt;/p&gt;
&lt;p&gt;&lt;img alt="react-native原理图" src="https://res.infoq.com/articles/why-is-flutter-revolutionary/zh/resources/2.png" /&gt;&lt;/p&gt;
&lt;p&gt;上图react-native框架原理&lt;/p&gt;
&lt;p&gt;Flutter实现跨平台采用了更为彻底的方案。它既没有采用WebView也没有采用JavaScriptCore，而是自己实现了一台UI框架，然后直接系统更底层渲染系统上画UI。所以它采用的开发语言不是JS，而Dart。据称Dart语言可以编译成原生代码，直接跟原生通信。&lt;/p&gt;
&lt;p&gt;&lt;img alt="Flutter原理图" src="https://res.infoq.com/articles/why-is-flutter-revolutionary/zh/resources/4.png" /&gt;&lt;/p&gt;
&lt;p&gt;上图是Flutter框架原理图&lt;/p&gt;
&lt;p&gt;Flutter将UI组件和渲染器从平台移动到应用程序中，这使得它们可以自定义和可扩展。Flutter唯一要求系统提供的是canvas，以便定制的UI组件可以出现在设备的屏幕上，以及访问事件（触摸，定时器等）和服务（位置、相机等）。这是Flutter可以做到跨平台而且高效的关键。另外Flutter学习了RN的UI编程方式，引入了状态机，更新UI时只更新最小改变区域。&lt;/p&gt;
&lt;p&gt;系统的UI框架可以取代，但是系统提供的一些服务是无法取代的。Flutter在跟系统service通信方式，采用的是一种类似插件式的方式，或者有点像远程过程调用RPC方式。这种方式据说也要比RN的桥接方式高效。&lt;/p&gt;
&lt;h2&gt;Flutter与RN异同&lt;/h2&gt;
&lt;p&gt;简单总结一下Flutter与RN的异同。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;都实现了移动开发跨平台&lt;/li&gt;
&lt;li&gt;界面的编写都很类型，采用响应式视图，维护了一个状态机，只更新改变的最小区域界面&lt;/li&gt;
&lt;li&gt;都支持热重载hot reload，开发调试非常方便&lt;/li&gt;
&lt;li&gt;调用系统的service仍然需要封装接口，仍然还是需要懂得native开发&lt;/li&gt;
&lt;li&gt;RN采用JS语言开发，基于React，受众更多。Dart语言受众小&lt;/li&gt;
&lt;li&gt;Flutter的UI框架性能貌似更高一些，但是直接丢弃了原生UI框架。而RN还是可以自己利用原生框架，两个各有好处。Flutter的兼容性高，RN可以利用原生已有的优秀UI&lt;/li&gt;
&lt;li&gt;Flutter的第三方库还很少，RN发展的早，虽然也还不完善，但是比Flutter好&lt;/li&gt;
&lt;li&gt;RN的界面布局更像网页布局，而Flutter的布局更像native布局&lt;/li&gt;
&lt;li&gt;Flutter在跨平台这方面做得更彻底一些&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;我试用Flutter的感受&lt;/h2&gt;
&lt;p&gt;我自己按照官方教程写了一个简单的无限滚动的ListView，感觉Flutter的界面布局是完全自己搞了一套，跟RN的web风格不同，跟原生的也不太相同，这里需要一点学习成本。我还运行了官方自动的sample例子，倒是还不错，把Android的material风格控件都移植过来了。另外我发现Flutter的在调试模式和Release模式下性能差别很大。如果你调试时发现性能差，就最好试试release模式。&lt;/p&gt;
&lt;p&gt;Flutter采用Dart语言开发不知道是好是坏。现在可是JS的天下，这是RN的优势之一，web开发人员很容易开发RN的界面，但是Flutter的一切都要从新学习。Dart语言我也还没习惯。&lt;/p&gt;
&lt;p&gt;Flutter现在还处理Bata阶段，第三方库还很少。我用过一个AudioPlayer的第三方库，竟然出问题。所以很多东西都需要自己开发和封装。RN经过了一段时间积累，好用的库还有不少。现在用Flutter来开发APP，感觉还是有点太早。&lt;/p&gt;
&lt;p&gt;Flutter官方吹的很大，说它是革命性的，也有一定道理。但是我觉得RN对于熟悉web开发的人来说，是更好的选择。但是对于纯native开发的移动开发人员，直接学习Flutter会更好，Flutter也比较适合本来就是做native开发的人。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;如果你觉得这篇文章有用，请打赏小钱喝杯咖啡^_^
&lt;img alt="打赏" src="https://raw.githubusercontent.com/szuwest/szuwest.github.io/master/images/2018-02-21%20133111.jpg" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Fri, 16 Mar 2018 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2018-03-16:flutterkuang-jia-yan-jiu-he-yu-rndui-bi.html</guid><category>ReactNative Flutter</category></item><item><title>Jenkins slave ReactNative项目自动打包</title><link>https://szuwest.github.io/jenkins-slave-reactnativexiang-mu-zi-dong-da-bao.html</link><description>&lt;h1&gt;Jenkins slave ReactNative项目自动打包&lt;/h1&gt;
&lt;p&gt;这次我想在谈谈Jenkins自动打包的问题。针对react-native项目。
一般情况下，我们都是在一台电脑上安装Jenkins，然后在该电脑上打开Jenkins网页进行打包配置。如果我们有很多项目，分布在不同的电脑，而且运行的系统也不同，这时候我们需要一个master来统一管理这些电脑，然后统一在一个网页上进行打包配置。这就是Jenkins的master-slave打包模式。这种模式跟单机模式稍有不同，这里主要讲怎么配置slave。&lt;/p&gt;
&lt;h2&gt;slave节点配置&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;首先slave上也同样要安装Jenkins和相关的打包所依赖的环境，一个都不能少。配置好之后，我们并不需要在本机上打开Jenkins网页来创建项目，配置项目等，而是要到主机上去配置。在去主机的Jenkins管理页面上新建节点之前，从机还需要做一些其他配置。&lt;/li&gt;
&lt;li&gt;打开远程登录。在系统设置--&amp;gt;共享，然后选中远程登录，允许所有用户访问。&lt;/li&gt;
&lt;li&gt;记住本机IP地址。在系统设置--&amp;gt;网络，可以看到当前网络的IP地址。为了以后方便，可以将IP地址设置为一个固定IP地址。不然当该电脑重启之后，IP地址可能会变，然后主机再按照之前配置的旧IP连接从机的时候，就连不上了。Mac电脑配置固定IP也有注意的地方。我第一次配置就是没有成功，上不了网。选择手动方式，然后填上一个没有被占用的IP地址，然后，子网掩码也要注意，如果跟服务器是跨网段访问的，需要注意255.255.255.0这种是不行的。当然按照之前默认的来一般没问题。然后最要注意的地方是要配置DNS，DNS跟路由器的地址一样。我就遇到没有配置DNS然后导致连不上网的情况。我开始以为它会自动配置的，原来还需要自己配置。   &lt;/li&gt;
&lt;li&gt;主机跟从机怎么连接呢。首先在主机上的Jenkins管理页面上进入&lt;strong&gt;系统管理&lt;/strong&gt;--&amp;gt;&lt;strong&gt;管理节点&lt;/strong&gt;页面，然后新建节点。填入一个名称，之后靠这个名称来识别节点。最好能识别系统。例如叫macOS.另外一个选项，选择固定代理。&lt;/li&gt;
&lt;li&gt;配置节点：这里有个远程工作目录，指的是Jenkins的配置目录。一个是/Users/你的用户名/.jenkins.启动方法我选的是Launch slave agents via ssh，然后填上从机电脑的IP地址和登录的用户名密码（Credentials）。这里如果没有添加过用户名和密码的话，需要先添加。这里还有一个叫 &lt;strong&gt;Host Key Verification Strategy&lt;/strong&gt;的选项，我选择的是Non verifying Verification Strategy.别的好像都不行，具体的原因我也不知道。Availability选择的是尽量保持代理在线。    &lt;br /&gt;
Node Properties项目栏可以不用填。貌似有必要也可以填一下那个环境变量，以防一些命令找不到。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;创建项目&lt;/h2&gt;
&lt;p&gt;配置好节点只有，可以新建项目了。怎么配置项目，网上也有非常多的文章。这里有几点要额外说明。&lt;/p&gt;
&lt;p&gt;一是项目怎么跟从机绑定到一起呢。有个已交&lt;strong&gt;Restrict where this project can be run&lt;/strong&gt;的选项，勾选它，然后填入之前创建的节点名称。这样这个项目的打包就是在这个节点上进行的。&lt;/p&gt;
&lt;p&gt;其他的一些配置网上有很多，我这里不说，而且有些配置并不是必要的，每个人的需求不同。对于我的项目，我基本只配置一个 参数化构建过程，可以选择分支来构建。然后是源码管理，选择git。git的地址一般选择ssh方式。这样的方式网络连接也比较稳定，不容易出现代码过多，拉取代码太久而导致超时。&lt;/p&gt;
&lt;p&gt;再有需要的配置就构建。Jenkins有xcode插件，可以按照插件来配置。但是我的项目是react-native项目，感觉按照一般的xcode项目来配置不是很好配置。我直接就写了一个脚本，在这脚本里做了所以的一切事情。所以在Jenkins里我只需要建立一个Execute Shell，然后在这个shell里执行我建立的脚本，一切都OK了。&lt;/p&gt;
&lt;p&gt;注意我的脚本是放在 项目根目录/ios 目录下。而Jenkins的目录是在项目根目录下的。
Jenkins中的配置。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;ios&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;build_using_gym&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;build_using_gym.sh的内容：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash -ilex&lt;/span&gt;

&lt;span class="c"&gt;#设置超时&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;120

&lt;span class="c"&gt;#计时&lt;/span&gt;
&lt;span class="nv"&gt;SECONDS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0

&lt;span class="c"&gt;#假设脚本放置在与iOS项目相同的路径下&lt;/span&gt;
&lt;span class="c"&gt;#project_path=&amp;quot;$(dirname &amp;quot;$(pwd)&amp;quot;)&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;project_path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$(pwd)&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;#取当前时间字符串添加到文件结尾&lt;/span&gt;
&lt;span class="nv"&gt;now&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;date +&lt;span class="s2"&gt;&amp;quot;%Y_%m_%d_%H_%M_%S&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;#项目名称&lt;/span&gt;
&lt;span class="nv"&gt;projectName&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;VprScene&amp;quot;&lt;/span&gt;

&lt;span class="c"&gt;#指定项目的scheme名称&lt;/span&gt;
&lt;span class="nv"&gt;scheme&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;VprScene&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;#指定要打包的配置名&lt;/span&gt;
&lt;span class="nv"&gt;configuration&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Release&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;#指定打包所使用的输出方式，目前支持app-store, package, ad-hoc, enterprise, development, 和developer-id，即xcodebuild的method参数&lt;/span&gt;
&lt;span class="nv"&gt;export_method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ad-hoc&amp;#39;&lt;/span&gt;

&lt;span class="c"&gt;#指定项目地址，如果是workspace，需要修改&lt;/span&gt;
&lt;span class="nv"&gt;workspace_path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$project_path/${projectName}.xcodeproj&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;#指定输出路径&lt;/span&gt;
&lt;span class="nv"&gt;output_path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/Users/xhkj/Desktop/${projectName}&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;#指定输出归档文件地址&lt;/span&gt;
&lt;span class="nv"&gt;archive_path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$output_path/${projectName}_${now}.xcarchive&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;#指定输出ipa地址&lt;/span&gt;
&lt;span class="nv"&gt;ipa_path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$output_path/${projectName}_${now}.ipa&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;#指定输出ipa名称&lt;/span&gt;
&lt;span class="nv"&gt;ipa_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;${projectName}_${now}.ipa&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;#获取执行命令时的commit message&lt;/span&gt;
&lt;span class="nv"&gt;commit_msg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$1&amp;quot;&lt;/span&gt;

&lt;span class="c"&gt;#输出设定的变量值&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;===workspace path: ${workspace_path}===&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;===archive path: ${archive_path}===&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;===ipa path: ${ipa_path}===&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;===export method: ${export_method}===&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;===commit msg: $1===&amp;quot;&lt;/span&gt;

&lt;span class="c"&gt;# 解锁对login.keychain的访问，codesign会用到，需要替换为实际密码&lt;/span&gt;
security unlock-keychain -p &lt;span class="s2"&gt;&amp;quot;123456&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;$HOME&lt;/span&gt;/Library/Keychains/login.keychain

&lt;span class="c"&gt;#react-native yarn &lt;/span&gt;
&lt;span class="c"&gt;#yarn install --registry http://192.168.0.9&lt;/span&gt;
yarn install

&lt;span class="c"&gt;#cocoapods&lt;/span&gt;
&lt;span class="c"&gt;#pod install --no-repo-update&lt;/span&gt;


&lt;span class="c"&gt;#fasltlane build，注意如果是cocoapods工程需要修改命令&lt;/span&gt;
fastlane gym --project &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;workspace_path&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; --scheme &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;scheme&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; --clean --configuration &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;configuration&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; --archive_path &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;archive_path&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; --export_method &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;export_method&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; -allowProvisioningUpdates --output_directory &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;output_path&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; --output_name &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;ipa_name&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;#上传到pgyer&lt;/span&gt;
&lt;span class="c"&gt;#蒲公英上的User Key&lt;/span&gt;
&lt;span class="nv"&gt;uKey&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;xxxxxxxxxxxxxxxxxxxx&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;#蒲公英上的API Key&lt;/span&gt;
&lt;span class="nv"&gt;apiKey&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;xxxxxxxxxxxxxxxxxxxxx&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;#执行上传至蒲公英的命令&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;++++++++++++++upload+++++++++++++&amp;quot;&lt;/span&gt;
curl -F &lt;span class="s2"&gt;&amp;quot;file=@${ipa_path}&amp;quot;&lt;/span&gt; -F &lt;span class="s2"&gt;&amp;quot;uKey=${uKey}&amp;quot;&lt;/span&gt; -F &lt;span class="s2"&gt;&amp;quot;_api_key=${apiKey}&amp;quot;&lt;/span&gt; https://qiniu-storage.pgyer.com/apiv1/app/upload

&lt;span class="c"&gt;#输出总用时&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;===Finished. Total time: ${SECONDS}s===&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;这个脚本里主要做了几件事情。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定义了项目名称，项目路径，打包输出路径，打包方式（ad-hoc）之类的变量定义&lt;/li&gt;
&lt;li&gt;解锁keychain，需要预先填入解锁密码。因为要签名，所有要访问keychain，这里很重要，否则会导致签名失败&lt;/li&gt;
&lt;li&gt;运行yarn install.这是ReactNative项目打包前必须的&lt;/li&gt;
&lt;li&gt;运行cocoapods install。如果是cocoapods项目，这也是打包前必须的&lt;/li&gt;
&lt;li&gt;运用fastlane来打包。fastlane的安装请自行查找资料&lt;/li&gt;
&lt;li&gt;上传到蒲公英。这里要预先指定普公益的key和secret。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里还有一个特别要注意的地方。如果你的脚本在单机上跑没有问题。但是一通过Jenkins来跑就出问题，就是 脚本第一行要加 -ilex 参数.&lt;/p&gt;
&lt;p&gt;这个脚本的好处是，除了要解锁keychain，其他的什么开发者证书，teamID都不用填写。这些配置只需要在你的xcode工程里配置了就行。这个脚本的重用性就很高。我每个项目，都只需要拷贝这个脚本过去，修改一下工程名字，必要时修改一些命令，就可以了。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/szuwest/rn_build_ios_sh"&gt;ios打包脚本地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果你觉得这篇文章有用，请打赏小钱喝杯咖啡^_^
&lt;img alt="打赏" src="https://raw.githubusercontent.com/szuwest/szuwest.github.io/master/images/2018-02-21%20133111.jpg" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Thu, 08 Mar 2018 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2018-03-08:jenkins-slave-reactnativexiang-mu-zi-dong-da-bao.html</guid><category>ReactNative Jenkins iOS</category></item><item><title>react-native框架源码学习(iOS)(下)</title><link>https://szuwest.github.io/react-nativekuang-jia-yuan-ma-xue-xi-iosxia.html</link><description>&lt;h1&gt;react-native框架源码学习(iOS)(下)&lt;/h1&gt;
&lt;p&gt;如果没有看过上篇，请先看&lt;a href=""&gt;react-native框架源码学习(iOS)(上)&lt;/a&gt;。&lt;/p&gt;
&lt;h3&gt;JSCExecutor相关初始化&lt;/h3&gt;
&lt;p&gt;在上篇中说到Instance的初始化方法initializeBridge里，最主要是创建了NativeToJsBridge的实例。而NativeToJsBridge的构造函数里，主要是调用了executorFactory来创建一个JSCExecutor。NativeToJsBridge的构造函数还包含更多的东西。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;NativeToJsBridge&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;NativeToJsBridge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;JSExecutorFactory&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;jsExecutorFactory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;shared_ptr&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ModuleRegistry&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;registry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;shared_ptr&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MessageQueueThread&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;jsQueue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;shared_ptr&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;InstanceCallback&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;m_destroyed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;make_shared&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m_delegate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;make_shared&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;JsToNativeBridge&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;registry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m_executor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jsExecutorFactory&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;createJSExecutor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m_delegate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;jsQueue&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m_executorMessageQueueThread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jsQueue&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;NativeToJsBridge的成员变量包括了一个m_delegate(JsToNativeBridge)，一个m_executorMessageQueueThread（MessageQueueThread）和m_executor（JSCExecutor），在它的构造函数里，将JsToNativeBridge创建了然后又传给jsExecutorFactory来创建JSCExecutor，JsToNativeBridge实际上是给JSCExecutor使用的。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;JSCExecutor::JSCExecutor(std::shared_ptr&lt;span class="nt"&gt;&amp;lt;ExecutorDelegate&amp;gt;&lt;/span&gt; delegate,
                         std::shared_ptr&lt;span class="nt"&gt;&amp;lt;MessageQueueThread&amp;gt;&lt;/span&gt; messageQueueThread,
                         const folly::dynamic&lt;span class="err"&gt;&amp;amp;&lt;/span&gt; jscConfig) throw(JSException) :
    m_delegate(delegate),
    m_messageQueueThread(messageQueueThread),
    m_nativeModules(delegate ? delegate-&amp;gt;getModuleRegistry() : nullptr),
    m_jscConfig(jscConfig) {
  initOnJSVMThread();

  {
    SystraceSection s(&amp;quot;nativeModuleProxy object&amp;quot;);
    installGlobalProxy(m_context, &amp;quot;nativeModuleProxy&amp;quot;,
                       exceptionWrapMethod&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;JSCExecutor::getNativeModule&amp;gt;());&lt;/span&gt;
  }
}

void JSCExecutor::initOnJSVMThread() throw(JSException) {
    ......
    m_context = JSC_JSGlobalContextCreateInGroup(useCustomJSC, nullptr, globalClass);
    .....
    installNativeHook&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;JSCExecutor::nativeFlushQueueImmediate&amp;gt;(&amp;quot;nativeFlushQueueImmediate&amp;quot;);&lt;/span&gt;
  installNativeHook&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;JSCExecutor::nativeCallSyncHook&amp;gt;(&amp;quot;nativeCallSyncHook&amp;quot;);&lt;/span&gt;
  ......
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在initOnJSVMThread中，先创建了全局的JSGlobalContext,然后给这个context注册了nativeFlushQueueImmediate和nativeCallSyncHook回调函数，这两个函数专门给JS调用。这两个函数都将会在MessageQueue.js中被调用。到这里终于有看到JS相关的调用，这里说明一下核心的JS源码存放目录。在工程目录/node_modules/react-native/Libraries/BatchedBridge目录下，主要有BatchedBridge.js,MessageQueue.js,NativeModules.js三个文件。&lt;/p&gt;
&lt;p&gt;在创建context的时候，使用了宏，最终会调用JavaScriptCore的代码。这个全局的context很重要，OC中要运行js代码就是靠他。而js代码中的global对象对应就是OC中的这个context。而nativeFlushQueueImmediate这个方法主要是将js传过来的队列里面的需要调用的方法一起调用了。nativeCallSyncHook这个方式主要是给JS直接同步调用OC方法来用的。为什么这么做后面再说，我们现在只需知道在创建context之后，就已经将OC的这两个方法注入到js的global对象中。&lt;/p&gt;
&lt;p&gt;initOnJSVMThread()执行之后，往m_context中注册了nativeModuleProxy的JS对象，将这个对象绑定到了getNativeModule这个函数。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;installGlobalProxy(m_context, &amp;quot;nativeModuleProxy&amp;quot;,
                       exceptionWrapMethod&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;JSCExecutor::getNativeModule&amp;gt;());&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;那么nativeModuleProxy在JS中到底是什么东西？这个定义在NativeModules.js中。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;NativeModules&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{[&lt;/span&gt;&lt;span class="nx"&gt;moduleName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;global&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nativeModuleProxy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;NativeModules&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;global&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nativeModuleProxy&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;·······&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;NativeModules&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们可以看到NativeModules就是指向了nativeModuleProxy，即就是OC的代理。我们要调用OC某个类的方法，就是通过NativeModules来调用的。例如我们已经定义好另一个对JS暴露的录音类AudioRecorder,那么在JS中要调用这个类的方法，就可以 let AudioRecorder = NativeModules.AudioRecorder; AudioRecorder.record();这样调用。那么我们知道它其实是调用到了OC的JSCExecutor中的getNativeModule方法，getNativeModule方法其实主要作用根据传入的模块名字生成对应的模块配置，具体实现后面再说。这里说一下JS代码里有个else分支，这是NativeModules生成的另一种做法：把所有的OC要暴露的类和方法都存在remoteModuleConfig里，然后他们注入到NativeModules里（在OC里对应的代码在RCTObjcExecutor的构造函数里）。&lt;/p&gt;
&lt;p&gt;到这里JSCExecutor的初始化完成。我们重新回到RCTCxxBridge的start方法。跟JSCExecutor同时进行的是加载js源码，jsBundle的加载是通过RCTJavaScriptLoader进行的，这里不进行讨论。当初始化和js源码加载完成后，就会执行js源码。&lt;/p&gt;
&lt;h3&gt;js源码执行&lt;/h3&gt;
&lt;p&gt;在初始化过程中我们已经创建好全局的JavaScriptCore context，并在这个context中注入了nativeFlushQueueImmediate，nativeCallSyncHook，getNativeModule三个回调方法。现在将执行已加载的JS源码。它是执行链是这样的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[RCTCxxBridge executeSourceCode: ]&lt;/li&gt;
&lt;li&gt;[RCTCxxBridge enqueueApplicationScript:]&lt;/li&gt;
&lt;li&gt;void Instance::loadScriptFromString()&lt;/li&gt;
&lt;li&gt;void NativeToJsBridge::loadApplication()&lt;ul&gt;
&lt;li&gt;void JSCExecutor::loadApplicationScript()&lt;/li&gt;
&lt;li&gt;void JSCExecutor::flush()&lt;/li&gt;
&lt;li&gt;void JSCExecutor::bindBridge()&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在 void JSCExecutor::loadApplicationScript方法最重要的代码如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;......&lt;/span&gt;
&lt;span class="n"&gt;evaluateScript&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m_context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;jsScript&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;jsSourceURL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;.....&lt;/span&gt;
&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;执行在context中执行JS源码，会初始化JS环境，BatchedBridge.js,NativeModules.js中的初始化代码也会执行。在BatchedBridge.js中，创建了一个名为BatchedBridge的MessageQueue，并设置到global的__fbBatchedBridge属性里，这个属性后面会用到。在初始化JS环境的时候，会加载到某些NativeModule，这些module才会被初始化，即调用到OC的getNativeModule方法。例如我打断点捕获到最开始初始化的一个NativeModule是PlatformConstants,它对应的OC类是RCTPlatform。当相关的Module都加载完之后，evaluateScript方法执行完，JS环境初始化完毕。然后就到执行flush方法。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;JSCExecutor&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;SystraceSection&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;JSCExecutor::flush&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m_flushedQueueJS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;callNativeModules&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m_flushedQueueJS&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;callAsFunction&lt;/span&gt;&lt;span class="p"&gt;({}));&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// When a native module is called from JS, BatchedBridge.enqueueNativeCall()&lt;/span&gt;
  &lt;span class="c1"&gt;// is invoked.  For that to work, require(&amp;#39;BatchedBridge&amp;#39;) has to be called,&lt;/span&gt;
  &lt;span class="c1"&gt;// and when that happens, __fbBatchedBridge is set as a side effect.&lt;/span&gt;
  &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;global&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;getGlobalObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m_context&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;batchedBridgeValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;global&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;__fbBatchedBridge&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// So here, if __fbBatchedBridge doesn&amp;#39;t exist, then we know no native calls&lt;/span&gt;
  &lt;span class="c1"&gt;// have happened, and we were able to determine this without forcing&lt;/span&gt;
  &lt;span class="c1"&gt;// BatchedBridge to be loaded as a side effect.&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;batchedBridgeValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isUndefined&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// If calls were made, we bind to the JS bridge methods, and use them to&lt;/span&gt;
    &lt;span class="c1"&gt;// get the pending queue of native calls.&lt;/span&gt;
    &lt;span class="n"&gt;bindBridge&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;callNativeModules&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m_flushedQueueJS&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;callAsFunction&lt;/span&gt;&lt;span class="p"&gt;({}));&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m_delegate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// If we have a delegate, we need to call it; we pass a null list to&lt;/span&gt;
    &lt;span class="c1"&gt;// callNativeModules, since we know there are no native calls, without&lt;/span&gt;
    &lt;span class="c1"&gt;// calling into JS again.  If no calls were made and there&amp;#39;s no delegate,&lt;/span&gt;
    &lt;span class="c1"&gt;// nothing happens, which is correct.&lt;/span&gt;
    &lt;span class="n"&gt;callNativeModules&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;makeNull&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m_context&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这是flush方法被第一次执行，所以m_flushedQueueJS为空，然后取到JS中的global对象中的__fbBatchedBridge对象。我们知道在JS初始化的时候，这个值已经被填上MessageQueue，所以这里会进入bindBridge()方法。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;JSCExecutor&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;bindBridge&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;throw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;JSException&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;SystraceSection&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;JSCExecutor::bindBridge&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;call_once&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m_bindFlag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;global&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;getGlobalObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m_context&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;batchedBridgeValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;global&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;__fbBatchedBridge&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;batchedBridgeValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isUndefined&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;requireBatchedBridge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;global&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;__fbRequireBatchedBridge&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;requireBatchedBridge&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isUndefined&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;batchedBridgeValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requireBatchedBridge&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;asObject&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;callAsFunction&lt;/span&gt;&lt;span class="p"&gt;({});&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;batchedBridgeValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isUndefined&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;throw&lt;/span&gt; &lt;span class="n"&gt;JSException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Could not get BatchedBridge, make sure your bundle is packaged correctly&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;batchedBridge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;batchedBridgeValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;asObject&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;m_callFunctionReturnFlushedQueueJS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;batchedBridge&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;callFunctionReturnFlushedQueue&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;asObject&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;m_invokeCallbackAndReturnFlushedQueueJS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;batchedBridge&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;invokeCallbackAndReturnFlushedQueue&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;asObject&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;m_flushedQueueJS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;batchedBridge&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;flushedQueue&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;asObject&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;m_callFunctionReturnResultAndFlushedQueueJS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;batchedBridge&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;callFunctionReturnResultAndFlushedQueue&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;asObject&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;从代码可以看出，它从__fbBatchedBridge（也即是MessageQueue）中将几个函数转成了OC对象，这个几个方法将在后面在需要的时候调用。这几个方法都定义在MessageQueue.js中。MessageQueue这个JS类很重要，代码也比较多，这里就不贴了。callFunctionReturnFlushedQueue这个函数主要就是执行传入JS中的模块和方法，并把JS中的queue返回。这个queue存储了JS要调用的OC模块的类和方法和相关参数。OC中获取到这个queue后，就会解析这个queue中的内容，得到相关模块的配置和参数，并进行动态调用。m_flushedQueueJS这个对象对应的JS函数是flushedQueue，这个函数就是将queue返回，然后清空。在bindBridge()执行完之后，立马执行了callNativeModules(m_flushedQueueJS-&amp;gt;callAsFunction({}))。这里就是将js中的queue拿过来进行调用。&lt;/p&gt;
&lt;p&gt;为了更好的理解OC与JS是如何相互调用的，还是要先说说是怎么生成模块配置的。JS如何调用到OC。&lt;/p&gt;
&lt;h3&gt;JS调用OC&lt;/h3&gt;
&lt;p&gt;当JS要加载某个module的之后，会调用到JSCExecutor中的getNativeModule方法，然后它会找该module，如果第一次加载该module，就会去创建该module的配置，然后存起来，下次再取时就直接返回已将建好的。下面是涉及的方法调用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JSCExecutor::getNativeModule()&lt;/li&gt;
&lt;li&gt;JSCNativeModules::getModule()&lt;/li&gt;
&lt;li&gt;JSCNativeModules::createModule()&lt;ul&gt;
&lt;li&gt;ModuleRegistry::getConfig()&lt;ul&gt;
&lt;li&gt;RCTNativeModule::getMethods()&lt;ul&gt;
&lt;li&gt;[RCTModuleData methods]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里看一下关键方法JSCNativeModules::createModule方法&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;folly&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nl"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;JSCNativeModules&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nl"&gt;createModule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nl"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;JSContextRef&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;ReactMarker&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nl"&gt;logTaggedMarker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ReactMarker&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nl"&gt;NATIVE_MODULE_SETUP_START&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name.c_str&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;m_genNativeModuleJS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;auto&lt;/span&gt; &lt;span class="bp"&gt;global&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nl"&gt;getGlobalObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;m_genNativeModuleJS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;global.&lt;/span&gt;&lt;span class="nb"&gt;getProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;__fbGenNativeModule&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;asObject&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;m_genNativeModuleJS&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;makeProtected&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;m_moduleRegistry&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;getConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;result.hasValue&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nb"&gt;Value&lt;/span&gt; &lt;span class="n"&gt;moduleInfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;m_genNativeModuleJS&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;callAsFunction&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nb"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nl"&gt;fromDynamic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;result&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nb"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nl"&gt;makeNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;result&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="nx"&gt;CHECK&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;moduleInfo.isNull&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Module returned from genNativeModule is null&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;folly&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nl"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;moduleInfo.asObject&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;getProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;module&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;asObject&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

  &lt;span class="nx"&gt;ReactMarker&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nl"&gt;logTaggedMarker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ReactMarker&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nl"&gt;NATIVE_MODULE_SETUP_STOP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name.c_str&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这可以看到取了JS中global对象的__fbGenNativeModule属性，存到了m_genNativeModuleJS。而__fbGenNativeModule定义在NativeModules.js中，它对应的是genModule函数。OC中将调用这个函数，把OC的Module生成JS的module，返回给JS，并最终OC中也会把它存在m_objects（map）中。genModule函数需要一个config参数，这个config主要是由m_moduleRegistry-&amp;gt;getConfig生成。这个config里只要包含了像JS暴露的constants,methods。我们这里主要看看它是怎么收集到我们要暴露的方法的。&lt;/p&gt;
&lt;p&gt;关键代码在[RCTModuleData methods]中&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSArray&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;RCTBridgeMethod&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;methods&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;_methods&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;NSMutableArray&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;RCTBridgeMethod&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;moduleMethods&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;NSMutableArray&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;_moduleClass&lt;/span&gt; &lt;span class="n"&gt;instancesRespondToSelector&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="k"&gt;@selector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;methodsToExport&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;moduleMethods&lt;/span&gt; &lt;span class="n"&gt;addObjectsFromArray&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="n"&gt;methodsToExport&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;methodCount&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;Class&lt;/span&gt; &lt;span class="n"&gt;cls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_moduleClass&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;cls&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;NSObject&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;cls&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;NSProxy&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;Method&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;methods&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;class_copyMethodList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;object_getClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;methodCount&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//注意这里取的是类方法&lt;/span&gt;

      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;methodCount&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Method&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="kt"&gt;SEL&lt;/span&gt; &lt;span class="n"&gt;selector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;method_getName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="c1"&gt;//主要这个前缀__rct_export__&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;NSStringFromSelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;hasPrefix&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;__rct_export__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="kt"&gt;IMP&lt;/span&gt; &lt;span class="n"&gt;imp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;method_getImplementation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;exportedMethod&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;RCTMethodInfo&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;SEL&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="n"&gt;imp&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;_moduleClass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="kt"&gt;id&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;RCTBridgeMethod&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;moduleMethod&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;RCTModuleMethod&lt;/span&gt; &lt;span class="n"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;initWithExportedMethod&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;exportedMethod&lt;/span&gt;
                                                                                 &lt;span class="nl"&gt;moduleClass:&lt;/span&gt;&lt;span class="n"&gt;_moduleClass&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
          &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;moduleMethods&lt;/span&gt; &lt;span class="n"&gt;addObject&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;moduleMethod&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="n"&gt;free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;cls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;class_getSuperclass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;_methods&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;moduleMethods&lt;/span&gt; &lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_methods&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里代码主要意思是先拿到所有类方法（或者叫静态方法），然后如果是特定前缀__rct_export__的方法，则是我们之前通过宏RCT_REMAP_METHOD（RCT_EXPORT_METHOD）定义生成的方法，然后获取这个方法的实现，并执行得到结果RCTMethodInfo。这个RCTMethodInfo里包含真正我们要暴露给JS调用的方法，用它来创建一个RCTModuleMethod。将所有需要的方法都生成之后，就保存了起来。这里RN的开发者很巧妙生成了一个静态方法，通过这个方法将真正需要的方法信息生成。为什么将这个特定方法定义为静态方法呢，我估计是静态方法比较少，查找的时候比查找实例方法快。&lt;/p&gt;
&lt;p&gt;当配置信息都生成好之后，调用genModule方法生成JS的module。这里要特别说明一下genModule这个方法会调用到genMethod函数，genMethod函数会生成另外一个函数，而生成函数里，将module的方法调用放到了MessageQueue的队列中，等待OC被调用。这里特别说明一下在JS的代码中，传递的参数都是moduleId, methodId是数字类型，moduleId它代表的是该module在OC的modules数组中的下标，methodId代表的是该method在methodNames数组里的下标。相关函数都是挺复杂的，理解起来有点绕，可以多看看genModule和genMethod函数的实现。&lt;/p&gt;
&lt;p&gt;所以，假设我们已有一个注册模块AudioRecord和暴露方法record.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; &lt;span class="n"&gt;let&lt;/span&gt; &lt;span class="n"&gt;AudioRecorder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;NativeModules&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AudioRecorder&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
 &lt;span class="n"&gt;AudioRecorder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;两句代码会发生：去OC中getNativeModule(AudioRecorder)寻找JS的module，现在m_objects字段中查找，如果没有找到则会走创建流程，先到m_moduleRegistry生成改类的配置信息，然后将配置信息传给JS的genModule函数生成名为AudioRecorder的js对象，调用genMethod生成名为record对应的JS函数，赋值给AudioRecorder对象,并保存在OC的一个字典（m_objects）中和返回这个JS对象。在JS中拿到这个对象后调用record函数，在record函数里，BatchedBridge.enqueueNativeCall就会被调用，moduleID，moduleID等信息就传入MessageQueue。我们看看enqueueNativeCall函数实现。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;enqueueNativeCall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;moduleID&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;methodID&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;onFail&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="nx"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;onSucc&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="nx"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onFail&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;onSucc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;......&lt;/span&gt;
      &lt;span class="c1"&gt;// Encode callIDs into pairs of callback identifiers by shifting left and using the rightmost bit&lt;/span&gt;
      &lt;span class="c1"&gt;// to indicate fail (0) or success (1)&lt;/span&gt;
      &lt;span class="nx"&gt;onFail&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;params&lt;/span&gt;&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;this._callID&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;onSucc&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;params&lt;/span&gt;&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;push&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;this._callID&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;this._successCallbacks&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;this._callID&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; = onSucc;
      this._failureCallbacks&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;this._callID&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; = onFail;
    }

    ......
    this._callID++;

    this._queue&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;MODULE_IDS&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;.push(moduleID);
    this._queue&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;METHOD_IDS&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;.push(methodID);

    ......
    this._queue&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="k"&gt;PARAMS&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;.push(params);

    const now = new Date().getTime();
    if (
      global.nativeFlushQueueImmediate &lt;span class="err"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
      (now - this._lastFlush &amp;gt;= MIN_TIME_BETWEEN_FLUSHES_MS ||
        this._inCall === 0)
    ) {
      var queue = this._queue;
      this._queue = &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;, &lt;span class="cp"&gt;[]&lt;/span&gt;, &lt;span class="cp"&gt;[]&lt;/span&gt;, this._callID];
      this._lastFlush = now;
      global.nativeFlushQueueImmediate(queue);
    }
    Systrace.counterEvent(&amp;#39;pending_js_to_native_queue&amp;#39;, this._queue&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;.length);
    //
    if (this.__spy) {
      this.__spyNativeCall(moduleID, methodID, params, {
        failCbId: onFail ? params&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="k"&gt;params&lt;/span&gt;&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; : -1,
        successCbId: onSucc ? params&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="k"&gt;params&lt;/span&gt;&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; : -1,
      });
    }
  }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;JS所有异步调用OC方法都会走到这里（同步方法走的是callSyncHook），我们可以看到先把回调存到数组里，然后把要调用的模块类，方法和参数都存在了queue中，当然还有回调函数对应的_callID（这里很巧妙地用一个数字代表了两个回调函数）。这里还有个判断，如果距离上次OC主动来调用JS超过了5毫秒，就会主动调用OC一开始就注入的nativeFlushQueueImmediate回调函数。在nativeFlushQueueImmediate这个方法里，OC会把传过来的queue里面需要调用的方法全部调用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JSCExecutor::nativeFlushQueueImmediate&lt;/li&gt;
&lt;li&gt;JSCExecutor::flushQueueImmediate&lt;/li&gt;
&lt;li&gt;JsToNativeBridge::callNativeModules&lt;ul&gt;
&lt;li&gt;ModuleRegistry::callNativeMethod&lt;ul&gt;
&lt;li&gt;RCTNativeModule::invoke&lt;ul&gt;
&lt;li&gt;RCTNativeModule::invokeInne&lt;ul&gt;
&lt;li&gt;[RCTModuleMethod invokeWithBridge:module:arguments:]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里调用链条也很长，我们知道最终会到RCTModuleMethod类中，它是通过NSInvocation来实现动态调用的。&lt;/p&gt;
&lt;p&gt;没有超过5毫秒的话，JS不主动调用OC的module，那OC到底什么时候会主动调用JS？&lt;/p&gt;
&lt;h3&gt;OC调用JS&lt;/h3&gt;
&lt;p&gt;在RCTCxxBridge中的start方法里，执行完JS源码后，会发送一个通知。在RCTRootView中监听了这个通知，执行了runApplication方法，这个方法里主动调用了JS。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;runApplication:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RCTBridge&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;bridge&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;moduleName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_moduleName&lt;/span&gt; &lt;span class="o"&gt;?:&lt;/span&gt; &lt;span class="s"&gt;@&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;NSDictionary&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;appParameters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;@&amp;quot;rootTag&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;_contentView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reactTag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;@&amp;quot;initialProps&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;_appProperties&lt;/span&gt; &lt;span class="o"&gt;?:&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="n"&gt;RCTLogInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;Running application %@ (%@)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;moduleName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;appParameters&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bridge&lt;/span&gt; &lt;span class="n"&gt;enqueueJSCall&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;AppRegistry&amp;quot;&lt;/span&gt;
                 &lt;span class="nl"&gt;method:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;runApplication&amp;quot;&lt;/span&gt;
                   &lt;span class="nl"&gt;args:&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;moduleName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;appParameters&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
             &lt;span class="nl"&gt;completion:&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里是JS的程序入口，之后会创建视图之类的。我们看看OC是怎么调用JS的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RCTBridge:: enqueueJSCall()&lt;/li&gt;
&lt;li&gt;RCTCxxBridge:: enqueueJSCall()&lt;ul&gt;
&lt;li&gt;Instance::callJSFunction()&lt;ul&gt;
&lt;li&gt;NativeToJsBridge::callFunction()&lt;ul&gt;
&lt;li&gt;JSCExecutor::callFunction()&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们看看JSCExecutor是如何调用JS的。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;JSCExecutor&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;callFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;moduleId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;methodId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;folly&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;dynamic&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;SystraceSection&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;JSCExecutor::callFunction&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// This weird pattern is because Value is not default constructible.&lt;/span&gt;
  &lt;span class="c1"&gt;// The lambda is inlined, so there&amp;#39;s no overhead.&lt;/span&gt;
  &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;JSContextLock&lt;/span&gt; &lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m_context&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;m_callFunctionReturnResultAndFlushedQueueJS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;bindBridge&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;m_callFunctionReturnFlushedQueueJS&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;callAsFunction&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m_context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;createExpectingAscii&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m_context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;moduleId&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
        &lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m_context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;createExpectingAscii&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m_context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methodId&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
        &lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;fromDynamic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m_context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(...)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;throw_with_nested&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;runtime_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Error calling &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;moduleId&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;.&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;methodId&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}();&lt;/span&gt;
  &lt;span class="n"&gt;callNativeModules&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;OC调用JS是通过bindBridge()里取到的JS定义的函数callFunctionReturnFlushedQueue来调用的。这函数需要的参数就是moduleName,methodName和method调用需要的参数。JS中拿到这些参数会在_lazyCallableModules里找到对应的JS module来进行对应的方法调用。_lazyCallableModules存的是需要给OC调用的JS module。AppRegistry模块在执行JS源码的之后就注册到这个_lazyCallableModules里。callFunctionReturnFlushedQueue函数不但执行了OC要调用的JS模块，最后还把queue传回到了OC，我们知道这个queue里存的都是JS要调用的OC模块信息，所以OC拿到这个queue之后就执行了调用callNativeModules。RN的机制就是OC在调用JS模块之后，也把JS中待调用的OC模块一起执行了。&lt;/p&gt;
&lt;p&gt;还有什么情况，OC会主动调用JS呢。通过在xcode中搜索enqueueJSCall方法的调用，可以看到主要是在RCTEventDispatcher，RCTEventEmitter和RCTTiming。从此可以知道主要是跟事件触发和定时器相关。这也很合理，因为在移动操作系统是基于事件触发机制。大部分事件都是空转，只有事件触发后才会进行相关调用。&lt;/p&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;大致总结一下RN APP的启动流程：在APPDelegate的启动方法中创建了一个RCTRootView，然后在RCTRootView中创建了RCTBridge，RCTBridge中创建了RCTCxxBridge，并调用了start方法。在start方法里先创建了一个专门用来运行JS代码的Thread，这个Thread绑定到了一个runloop。然后将所有注册的module生成RCTModuleData，并根据需要调用他们的初始化方法。然后一边在JS线程中执行Intance的初始化方法，一边异步进行js源码的加载。在Intance的初始化方法里最终会创建一个JSCExecutor,在JSCExecutor里创建了一个全局的js context,并注入了几个OC的回调方法，包括NativeModuleProxy对应的getNativeModule方法。当JS源码都加载完，其他初始化也完成，就会在JS context中执行JS源码，建立JS环境和JS的初始化。这时候一些被JS调用到的OC module就会初始化，会调用之前注入JS中的getNativeModule方法，这个方法会把module的配置信息生成，并交给JS的genModule方法来生成JS的对象，并在OC中存起来。JS源码执行完之后，OC会调用flush方法，然后会调用到bindBridge方法，将MessageQueue.js中定义的几个方法存在OC中以备调用。然后将MessageQueue存储的OC待调用方法进行调用。到这里，JS源码执行完毕，会发一个通知，RCTRootView会收到这个通知，然后就调用了js中的AppRegistry的runApplication方法，到这里，JS的入口就被调用，界面就会渲染出来。&lt;/p&gt;
&lt;p&gt;总结起来，JS和OC的相互通信是经过JavaScriptCore机制来进行的。OC将要暴露给JS的放类和方法生成配置信息，然后交个JS生成JS对象和方法，但是JS中对应的对象和方法并不是直接调用OC的方法，而且先放入一个队列中，交由OC来调用。OC拿到对应的配置信息然后进行动态调用。OC调用JS的对象和方法，是直接调用，JS中存储了要暴露的对象module.&lt;/p&gt;
&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.cocoachina.com/ios/20170720/19958.html"&gt;深入浅出 JavaScriptCore&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://cloud.tencent.com/developer/article/1004875"&gt;JavaScriptCore全面解析 （上篇）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://cloud.tencent.com/developer/article/1004876"&gt;JavaScriptCore全面解析 （下篇）
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.jianshu.com/p/931367388a8d?utm_campaign=maleskine&amp;amp;utm_content=note&amp;amp;utm_medium=seo_notes&amp;amp;utm_source=recommendation"&gt;理解React-Native(0.46) 中native和js通信原理(iOS)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.cnbang.net/tech/2698/"&gt;React Native通信机制详解&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果你觉得这篇文章有用，请打赏小钱喝杯咖啡^_^
&lt;img alt="打赏" src="https://raw.githubusercontent.com/szuwest/szuwest.github.io/master/images/2018-02-21%20133111.jpg" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Fri, 02 Mar 2018 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2018-03-02:react-nativekuang-jia-yuan-ma-xue-xi-iosxia.html</guid><category>ReactNative 源码 iOS</category></item><item><title>react-native框架源码学习(iOS)(上)</title><link>https://szuwest.github.io/react-nativekuang-jia-yuan-ma-xue-xi-iosshang.html</link><description>&lt;h1&gt;react-native框架源码学习(iOS)(上)&lt;/h1&gt;
&lt;h2&gt;注意事项&lt;/h2&gt;
&lt;p&gt;要学习react-native框架iOS端源码，先要了解一下注意的事项。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一、 首先需要非常熟悉objective-c语言，对OC的runtime机制更是必不可少。源码里大量用了runtime特性。然后也要熟悉c++语言。除了OC语言，里面还有大量的c++代码，OC与c++混合代码。对c++的template和std库也要熟悉。我本人对c++也熟悉，但是不够深入，对一些高级特性不是很了解，所以相关的一些代码看起来很吃力。最后当然也熟悉js语言。我大学时学习过js，但是那还真是远古时代了，js近年来发展很快，我对很多新特性不是很了解，这也对我学习有一定的阻碍。另外还有要比较了解iOS的JavaScriptCore框架，这个是js与OC通信的基础。&lt;/li&gt;
&lt;li&gt;二、 要对react-native的版本了解。查看网上的资料时也要注意他们所说的RN版本。现在网上很多研究资料，他们所研究的版本都是很早之前的版本。新的版本跟老版本有很多细节和流程改变了。如果你发现有些文章里说的东西跟你所看到的对不上，那就是研究的版本不一致。&lt;/li&gt;
&lt;li&gt;三、如果看不懂，多看看别人的分析文章。如果对某种语言或者框架库不熟悉，建议先把该补的补上。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我所研究的RN版本是&lt;strong&gt;0.49&lt;/strong&gt;，而最新版是0.51. 最后我自己也不敢说自己完全看懂了源码，自己的理解完全正确，所以下面所说的也不一定完全正确。&lt;/p&gt;
&lt;h2&gt;核心原理&lt;/h2&gt;
&lt;p&gt;主要原理利用JavaScriptCore的通信机制来做一些基本的js和OC相互调用，但是RN还做了更多事情。
OC会将所有要暴露给JS调用的方法和属性生成一个配置表，然后会将这个配置表写入到JS端。RN中OC和JS都分别有一个桥接对象，他们相互调用都是通过这个桥接对象进行。
RN大致结构图：
&lt;img alt="RN结构图" src="https://upload-images.jianshu.io/upload_images/1271831-7ba4d20000946a6b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" /&gt;&lt;/p&gt;
&lt;h2&gt;启动流程&lt;/h2&gt;
&lt;p&gt;研究源码当然得从启动流程开始。新建一个RN工程，它的AppDelagte入口方法代码大致如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;BOOL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;application:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UIApplication&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;application&lt;/span&gt; &lt;span class="nf"&gt;didFinishLaunchingWithOptions:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSDictionary&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;launchOptions&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="n"&gt;NSURL&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;jsCodeLocation&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="n"&gt;jsCodeLocation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;RCTBundleURLProvider&lt;/span&gt; &lt;span class="n"&gt;sharedSettings&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;jsBundleURLForBundleRoot&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;index.ios&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;fallbackResource&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="n"&gt;RCTRootView&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;rootView&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;RCTRootView&lt;/span&gt; &lt;span class="n"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;initWithBundleURL&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;jsCodeLocation&lt;/span&gt;
                                                      &lt;span class="nl"&gt;moduleName:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;VprScene&amp;quot;&lt;/span&gt;
                                               &lt;span class="nl"&gt;initialProperties:&lt;/span&gt;&lt;span class="nb"&gt;nil&lt;/span&gt;
                                                   &lt;span class="nl"&gt;launchOptions:&lt;/span&gt;&lt;span class="n"&gt;launchOptions&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="n"&gt;rootView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;backgroundColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;UIColor&lt;/span&gt; &lt;span class="n"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;initWithRed&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt; &lt;span class="n"&gt;green&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt; &lt;span class="n"&gt;blue&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;UIWindow&lt;/span&gt; &lt;span class="n"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;initWithFrame&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;UIScreen&lt;/span&gt; &lt;span class="n"&gt;mainScreen&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;bounds&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="n"&gt;UIViewController&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;rootViewController&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;UIViewController&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="n"&gt;rootViewController&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rootView&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rootViewController&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rootViewController&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt; &lt;span class="n"&gt;makeKeyAndVisible&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;YES&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最主要的代码就是初始化了RCTRootView，别的都是普通的代码。也就是说由RCTRootView来进行整个RN的初始化。&lt;/p&gt;
&lt;p&gt;RCTRootView的initWithBundleURL:方法中初始化了一个RCTBridge，RCTBridge的初始化方法里调用了一个setUp方法，在这里又初始化了一个RCTCxxBridge（早期版本是RCTBatchedBridge，它们都是RCTBridge的子类）对象，然后调用了它的start方法。这是个关键方法。RCTBridge与RCTCxxBridge类似一个代理模式，RCTBridge提供了对外接口，实际上调用了RCTCxxBridge的实现。这样的好处是方便替换内部实现，而接口保持稳定。&lt;/p&gt;
&lt;p&gt;RCTCxxBridge的start方法(为了方便理解，删掉了不必要的代码):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;start&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;......&lt;/span&gt;

  &lt;span class="c1"&gt;// Set up the JS thread early&lt;/span&gt;
  &lt;span class="n"&gt;_jsThread&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;NSThread&lt;/span&gt; &lt;span class="n"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;initWithTarget&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                                      &lt;span class="nl"&gt;selector:&lt;/span&gt;&lt;span class="k"&gt;@selector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;runRunLoop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                                        &lt;span class="nl"&gt;object:&lt;/span&gt;&lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="n"&gt;_jsThread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RCTJSThreadName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;_jsThread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;qualityOfService&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;NSOperationQualityOfServiceUserInteractive&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;_jsThread&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="kt"&gt;dispatch_group_t&lt;/span&gt; &lt;span class="n"&gt;prepareBridge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dispatch_group_create&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt; &lt;span class="n"&gt;registerExtraModules&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="c1"&gt;// Initialize all native modules that cannot be loaded lazily&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt; &lt;span class="n"&gt;_initModules&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;RCTGetModuleClasses&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;withDispatchGroup&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;prepareBridge&lt;/span&gt; &lt;span class="n"&gt;lazilyDiscovered&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;NO&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="c1"&gt;// This doesn&amp;#39;t really do anything.  The real work happens in initializeBridge.&lt;/span&gt;
  &lt;span class="n"&gt;_reactInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Instance&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="n"&gt;__weak&lt;/span&gt; &lt;span class="n"&gt;RCTCxxBridge&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;weakSelf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// Prepare executor factory (shared_ptr for copy into block)&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;shared_ptr&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;JSExecutorFactory&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;executorFactory&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;.....&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;executorFactory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kt"&gt;BOOL&lt;/span&gt; &lt;span class="n"&gt;useCustomJSC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delegate&lt;/span&gt; &lt;span class="n"&gt;respondsToSelector&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="k"&gt;@selector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shouldBridgeUseCustomJSC&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delegate&lt;/span&gt; &lt;span class="n"&gt;shouldBridgeUseCustomJSC&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
      &lt;span class="c1"&gt;// The arg is a cache dir.  It&amp;#39;s not used with standard JSC.&lt;/span&gt;
      &lt;span class="n"&gt;executorFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;JSCExecutorFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;folly&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;dynamic&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;OwnerIdentity&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;ReactNative&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;UseCustomJSC&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;useCustomJSC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;......&lt;/span&gt;
  &lt;span class="c1"&gt;// Dispatch the instance initialization as soon as the initial module metadata has&lt;/span&gt;
  &lt;span class="c1"&gt;// been collected (see initModules)&lt;/span&gt;
  &lt;span class="n"&gt;dispatch_group_enter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prepareBridge&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt; &lt;span class="n"&gt;ensureOnJavaScriptThread&lt;/span&gt;&lt;span class="o"&gt;:^&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;weakSelf&lt;/span&gt; &lt;span class="n"&gt;_initializeBridge&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;executorFactory&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;dispatch_group_leave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prepareBridge&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}];&lt;/span&gt;

    &lt;span class="p"&gt;.....&lt;/span&gt;
    &lt;span class="c1"&gt;// Load the source asynchronously, then store it for later execution.&lt;/span&gt;
    &lt;span class="n"&gt;dispatch_group_enter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prepareBridge&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;__block&lt;/span&gt; &lt;span class="n"&gt;NSData&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;sourceCode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt; &lt;span class="n"&gt;loadSource&lt;/span&gt;&lt;span class="o"&gt;:^&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSError&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RCTSource&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;weakSelf&lt;/span&gt; &lt;span class="n"&gt;handleError&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="n"&gt;sourceCode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;dispatch_group_leave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prepareBridge&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;onProgress&lt;/span&gt;&lt;span class="o"&gt;:^&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RCTLoadingProgress&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;progressData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;.....&lt;/span&gt;
    &lt;span class="p"&gt;}];&lt;/span&gt;

    &lt;span class="c1"&gt;// Wait for both the modules and source code to have finished loading&lt;/span&gt;
    &lt;span class="n"&gt;dispatch_group_notify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prepareBridge&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dispatch_get_global_queue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QOS_CLASS_USER_INTERACTIVE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;RCTCxxBridge&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;strongSelf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;weakSelf&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sourceCode&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;strongSelf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;strongSelf&lt;/span&gt; &lt;span class="n"&gt;executeSourceCode&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;sourceCode&lt;/span&gt; &lt;span class="n"&gt;sync&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;NO&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;.....&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个方法很复杂，主要做了以下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建并开启了一个js线程，绑定了一个runloop，也即是说js代码都是在这个线程里执行。&lt;/li&gt;
&lt;li&gt;准备所有要暴露给js调用的OC类,ModuleClass，为每个类封装到RCTModuleData里，如果需要在主线程中是创建某些类的实例，则会在主线程中去创建它。这些RCTModuleData会分别存储在一个字典和数组里。&lt;/li&gt;
&lt;li&gt;准备JS运行环境，初始化JSExecutorFactory，并在js线程中创建js的RCTMessageThread，初始化_reactInstance（Instance，这是native跟jsBridge的桥梁）和JSCExecutor&lt;/li&gt;
&lt;li&gt;加载JS源码&lt;/li&gt;
&lt;li&gt;以上全做完之后，执行JS源码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意代码里用到一个叫prepareBridge的dispatch_group_t，dispatch_group_t主要是用来做异步代码同步用的。有很多初始化工作是异步并行的，运行源码肯定是在所有准备工作之后才能进行，所以用了dispatch_group_t和dispatch_group_notify机制来确保这个问题。接下来我们逐步去分析上面说的几个事情。&lt;/p&gt;
&lt;h3&gt;JS线程&lt;/h3&gt;
&lt;p&gt;大家常说JavaScript是单线程的，在RN里就是这样的。它创建了一个线程，然后绑定到了一个runloop，然后JS就是在这个线程里执行。在RCTCxxBridge里专门有个方法将block放在JS线程中执行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt; * Ensure block is run on the JS thread. If we&amp;#39;re already on the JS thread, the block will execute synchronously.&lt;/span&gt;
&lt;span class="cm"&gt; * If we&amp;#39;re not on the JS thread, the block is dispatched to that thread. Any errors encountered while executing&lt;/span&gt;
&lt;span class="cm"&gt; * the block will go through handleError:&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="k"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;ensureOnJavaScriptThread:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;dispatch_block_t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;block&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;RCTAssert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_jsThread&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;@&amp;quot;This method must not be called before the JS thread is created&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// This does not use _jsMessageThread because it may be called early before the runloop reference is captured&lt;/span&gt;
  &lt;span class="c1"&gt;// and _jsMessageThread is valid. _jsMessageThread also doesn&amp;#39;t allow us to shortcut the dispatch if we&amp;#39;re&lt;/span&gt;
  &lt;span class="c1"&gt;// already on the correct thread.&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;NSThread&lt;/span&gt; &lt;span class="n"&gt;currentThread&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;_jsThread&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt; &lt;span class="n"&gt;_tryAndHandleError&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt; &lt;span class="n"&gt;performSelector&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="k"&gt;@selector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_tryAndHandleError&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="nl"&gt;onThread:&lt;/span&gt;&lt;span class="n"&gt;_jsThread&lt;/span&gt;
          &lt;span class="nl"&gt;withObject:&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;
          &lt;span class="nl"&gt;waitUntilDone:&lt;/span&gt;&lt;span class="nb"&gt;NO&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;除此之外还有个RCTMessageThread类，专门用于在js线程中执行c++的同步和异步函数。&lt;/p&gt;
&lt;h3&gt;获取ModuleClass&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;[self _initModules:RCTGetModuleClasses() withDispatchGroup:prepareBridge lazilyDiscovered:NO]&lt;/strong&gt;方法就是获取所有要暴露的类并做相应初始化。首先了解一下要将一个类暴露给JS需要怎么做。我们已RN里已经有的一个粘贴板类来看一下。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;//RCTClipboard.h&lt;/span&gt;
&lt;span class="k"&gt;@interface&lt;/span&gt; &lt;span class="nc"&gt;RCTClipboard&lt;/span&gt; : &lt;span class="nc"&gt;NSObject&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;RCTBridgeModule&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;@end&lt;/span&gt;

&lt;span class="c1"&gt;//RCTClipboard.m&lt;/span&gt;
&lt;span class="k"&gt;@implementation&lt;/span&gt; &lt;span class="nc"&gt;RCTClipboard&lt;/span&gt;

&lt;span class="n"&gt;RCT_EXPORT_MODULE&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;dispatch_queue_t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;methodQueue&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;dispatch_get_main_queue&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="n"&gt;RCT_EXPORT_METHOD&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;setString&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;UIPasteboard&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;clipboard&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;UIPasteboard&lt;/span&gt; &lt;span class="n"&gt;generalPasteboard&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="n"&gt;clipboard&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;@&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;RCT_EXPORT_METHOD&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getString&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RCTPromiseResolveBlock&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;resolve&lt;/span&gt;
                  &lt;span class="nl"&gt;rejecter:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__unused&lt;/span&gt; &lt;span class="n"&gt;RCTPromiseRejectBlock&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;UIPasteboard&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;clipboard&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;UIPasteboard&lt;/span&gt; &lt;span class="n"&gt;generalPasteboard&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="n"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;clipboard&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;@&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其实主要关键点就是类需要实现协议RCTBridgeModule，并在implementation里加RCT_EXPORT_MODULE()。在要暴露的方法在其前面加宏RCT_EXPORT_METHOD修饰。注意这里不支持有返回值的方法，还有也可以暴露一些属性的，但是这里不展开说明。&lt;/p&gt;
&lt;p&gt;RCTBridgeModule协议定义了+ (NSString *)moduleName这个必须实现的方法，还有其他可选方法和属性。
看一下RCT_EXPORT_MODULE()宏到底干了什么&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt; * Place this macro in your class implementation to automatically register&lt;/span&gt;
&lt;span class="cm"&gt; * your module with the bridge when it loads. The optional js_name argument&lt;/span&gt;
&lt;span class="cm"&gt; * will be used as the JS module name. If omitted, the JS module name will&lt;/span&gt;
&lt;span class="cm"&gt; * match the Objective-C class name.&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="n"&gt;define&lt;/span&gt; &lt;span class="no"&gt;RCT_EXPORT_MODULE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;js_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; \
&lt;span class="no"&gt;RCT_EXTERN&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="n"&gt;RCTRegisterModule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Class&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; \
&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;moduleName&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;@#&lt;/span&gt;&lt;span class="n"&gt;js_name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; \
&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;RCTRegisterModule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个宏里实现moduleName方法，定义了RCT_EXTERN void RCTRegisterModule(Class)，还有实现了load方法，在load方法里调用了RCTRegisterModule方法。RCTRegisterModule实现是在RCTBridge.m里面。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;NSMutableArray&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;Class&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;RCTModuleClasses&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;NSArray&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;Class&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;RCTGetModuleClasses&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;RCTModuleClasses&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt; * Register the given class as a bridge module. All modules must be registered&lt;/span&gt;
&lt;span class="cm"&gt; * prior to the first bridge initialization.&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;RCTRegisterModule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Class&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;RCTRegisterModule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Class&lt;/span&gt; &lt;span class="n"&gt;moduleClass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;dispatch_once_t&lt;/span&gt; &lt;span class="n"&gt;onceToken&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;dispatch_once&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;onceToken&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;RCTModuleClasses&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;NSMutableArray&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="n"&gt;RCTAssert&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;moduleClass&lt;/span&gt; &lt;span class="n"&gt;conformsToProtocol&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;protocol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RCTBridgeModule&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt;
            &lt;span class="s"&gt;@&amp;quot;%@ does not conform to the RCTBridgeModule protocol&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;moduleClass&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Register module&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;RCTModuleClasses&lt;/span&gt; &lt;span class="n"&gt;addObject&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;moduleClass&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;实际上就是讲Class对象加入到全局唯一的一个数组里。也就是说，当系统在加载这个类的时候，就将这个类对象加入到了一个数组里，后面只要从这个数组里取所有要暴露给JS的类就可以了。&lt;/p&gt;
&lt;p&gt;再来看看怎么暴露方法。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#define RCT_EXPORT_METHOD(method) \&lt;/span&gt;
&lt;span class="cp"&gt;  RCT_REMAP_METHOD(, method)&lt;/span&gt;


&lt;span class="cp"&gt;#define RCT_REMAP_METHOD(js_name, method) \&lt;/span&gt;
&lt;span class="cp"&gt;  _RCT_EXTERN_REMAP_METHOD(js_name, method, NO) \&lt;/span&gt;
&lt;span class="cp"&gt;  - (void)method;&lt;/span&gt;


&lt;span class="cp"&gt;#define _RCT_EXTERN_REMAP_METHOD(js_name, method, is_blocking_synchronous_method) \&lt;/span&gt;
&lt;span class="cp"&gt;  + (const RCTMethodInfo *)RCT_CONCAT(__rct_export__, RCT_CONCAT(js_name, RCT_CONCAT(__LINE__, __COUNTER__))) { \&lt;/span&gt;
&lt;span class="cp"&gt;    static RCTMethodInfo config = {#js_name, #method, is_blocking_synchronous_method}; \&lt;/span&gt;
&lt;span class="cp"&gt;    return &amp;amp;config; \&lt;/span&gt;
&lt;span class="cp"&gt;  }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里的宏嵌套得让人眼花缭乱，在整个RN源码中运用了大量的宏，而且大多是高级用法，这个给阅读理解造成一定的困难。如果看不懂，最好先找专门的讲宏文章先看一看。这里主要作用就是声明了返回值为void的method方法，并且生成了一个以__rct_export__开头，包含了类名，行号等信息的为类名，返回值为RCTMethodInfo的类方法。这个方法主要是为后面生成配置信息用的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[self _initModules:RCTGetModuleClasses() withDispatchGroup:prepareBridge lazilyDiscovered:NO]&lt;/strong&gt;主要代码是&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;_initModules:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSArray&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;RCTBridgeModule&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;modules&lt;/span&gt;
   &lt;span class="nl"&gt;withDispatchGroup:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;dispatch_group_t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;dispatchGroup&lt;/span&gt;
    &lt;span class="nl"&gt;lazilyDiscovered:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;BOOL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;lazilyDiscovered&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;....&lt;/span&gt;
&lt;span class="c1"&gt;// Set up moduleData for automatically-exported modules&lt;/span&gt;
  &lt;span class="n"&gt;NSArray&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;RCTModuleData&lt;/span&gt; &lt;span class="o"&gt;*&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;moduleDataById&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt; &lt;span class="n"&gt;registerModulesForClasses&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;modules&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="p"&gt;......&lt;/span&gt;
   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt; &lt;span class="n"&gt;_prepareModulesWithDispatchGroup&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;dispatchGroup&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;registerModulesForClasses:方法主要是遍历RCTModuleClasses，为每个class生成一个RCTModuleData并在一个字典和数组里存起来后面使用。_prepareModulesWithDispatchGroup:就是检查每个RCTModuleData是否需要在主线程中创建实例，是的话，就创建实例存起来。&lt;/p&gt;
&lt;h3&gt;准备JS相关类（JSCExecutor）&lt;/h3&gt;
&lt;p&gt;在start方法里面，它实例化了Instance(_reactInstance)和一个JSExecutorFactory，然后在js线程中调用了_initializeBridge:方法。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;_initializeBridge:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;shared_ptr&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;JSExecutorFactory&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;executorFactory&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;.....&lt;/span&gt;
&lt;span class="n"&gt;__weak&lt;/span&gt; &lt;span class="n"&gt;RCTCxxBridge&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;weakSelf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;_jsMessageThread&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;make_shared&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;RCTMessageThread&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;NSRunLoop&lt;/span&gt; &lt;span class="n"&gt;currentRunLoop&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSError&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;weakSelf&lt;/span&gt; &lt;span class="n"&gt;handleError&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;.....&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_reactInstance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// This is async, but any calls into JS are blocked by the m_syncReady CV in Instance&lt;/span&gt;
    &lt;span class="n"&gt;_reactInstance&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;initializeBridge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;make_unique&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;RCTInstanceCallback&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="n"&gt;executorFactory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;_jsMessageThread&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt; &lt;span class="n"&gt;_buildModuleRegistry&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
      &lt;span class="p"&gt;......&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以看到这里主要创建了一个RCTMessageThread，并将相关属性传给_reactInstance进行初始化。_reactInstance的初始化需要一个ModuleRegistry，ModuleRegistry里面有包含了所有的RCTNativeModule，而每个RCTNativeModule里又包含了一个RCTModuleData.即将前面生成的所有RCTModuleData传给了_reactInstance。&lt;/p&gt;
&lt;p&gt;在Instance的初始化方法initializeBridge里，最主要是创建了NativeToJsBridge的实例。而NativeToJsBridge的构造函数里，主要是调用了executorFactory来创建一个JSCExecutor。JSCExecutor是一个相当重要的类，走到这里很不容易，跳转了很多层。这一块也是最不好理解的，基本上c++和OC互调，而且使用了很多c++11的特性，我很不熟悉。然后也使用了folly库，这个库也不是很好理解。所以我准备把剩下的东西放到下一篇文章来讲。&lt;/p&gt;
&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.cocoachina.com/ios/20170720/19958.html"&gt;深入浅出 JavaScriptCore&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://cloud.tencent.com/developer/article/1004875"&gt;JavaScriptCore全面解析 （上篇）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://cloud.tencent.com/developer/article/1004876"&gt;JavaScriptCore全面解析 （下篇）
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.jianshu.com/p/931367388a8d?utm_campaign=maleskine&amp;amp;utm_content=note&amp;amp;utm_medium=seo_notes&amp;amp;utm_source=recommendation"&gt;理解React-Native(0.46) 中native和js通信原理(iOS)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.cnbang.net/tech/2698/"&gt;React Native通信机制详解&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果你觉得这篇文章有用，请打赏小钱喝杯咖啡^_^
&lt;img alt="打赏" src="https://raw.githubusercontent.com/szuwest/szuwest.github.io/master/images/2018-02-21%20133111.jpg" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Mon, 26 Feb 2018 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2018-02-26:react-nativekuang-jia-yuan-ma-xue-xi-iosshang.html</guid><category>ReactNative 源码 iOS</category></item><item><title>浅谈ReactNative技术的优劣</title><link>https://szuwest.github.io/qian-tan-reactnativeji-zhu-de-you-lie.html</link><description>&lt;h1&gt;浅谈ReactNative技术的优劣&lt;/h1&gt;
&lt;p&gt;去年大概10月份开始使用ReactNative技术来开发项目，现在也已经有几个月时间了。也上线了三个ReactNative开发的项目。一直想谈谈使用ReactNative的开发感受。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用react-native确实可以提高界面开发效率，因为两个平台，只需要编写一套代码。react-native在这方面做了很多工作，让界面开发跟web开发基本一致。web开发人员可以很方便的写react-native界面，不需要二次学习。而且在react-native里面的像素是逻辑像素，可以比较好的适配界面。&lt;/li&gt;
&lt;li&gt;react-native界面开发方式跟web开发是基本一致的，这跟native开发界面有很大不同。react-native界面开发是声明式开发，而且是继承于react框架，而纯native开发人员根本不了解这个框架，需要学习成本。它的View布局层次跟原生的布局层次不太一样。我自己也搞了挺久才搞清楚。&lt;/li&gt;
&lt;li&gt;react-native很适合那些纯http数据交互的应用。即那些数据和内容都是从服务器拉取，APP只是展示和消费的场景应用。这样不但界面可以react-native来写，HTTP请求也可以很方便的用ReactNative来写。&lt;/li&gt;
&lt;li&gt;react-native不适合用于那些需要复杂的通信方式的应用，也不适用于那些强多媒体资源的应用，例如要做相册，音视频播放的应用。因为react-native上不方便用socket的那些通信方法，需要自己封装。然后内存问题也不太好把控。对于相册，多媒体播放，ReactNative也没有封装。&lt;/li&gt;
&lt;li&gt;react-native对于web转native开发是很有用，对纯native开发转react-native开发不是很友好，主要是思维方式发生比较大的变化。&lt;/li&gt;
&lt;li&gt;react-native不能隔绝native开发的知识。要做APP开发，最终还是需懂得native开发的一些知识，react-native并不能完全屏蔽这些。一个纯web开发想要转react-native开发，还是需要懂native开发的人来帮助和指导，或者自己需要先学习native相关知识。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;react-native开发会是未来的方向吗&lt;/h1&gt;
&lt;p&gt;这个我也不敢说。不过ReactNative开发未来会代替掉一些native发，这是一定会发生的，或许已经正在发生。不过react-native版本最新的还是0.51版本，还有很多需要完善的地方。不过想在JavaScript貌似有大一统的趋势。我们公司现在都是用js来做PC客户端的。有个叫electron的框架貌似很流行，可以开发windows和Mac的桌面APP。只要会js，就可以写Mac客户端，这还真是我之前没有想过的。这样看，真的貌似js有大一统的趋势。&lt;/p&gt;
&lt;p&gt;不过，不管怎样过，我觉得react-native还是无法完全替代原生开发，毕竟有很多东西需要用原生来开发。而且，react-native本身就是基于原生的，它只是做了一层转化而已。所以原生的开发能力不会削弱。&lt;/p&gt;
&lt;p&gt;如果你觉得这篇文章有用，请打赏小钱喝杯咖啡^_^
&lt;img alt="打赏" src="https://raw.githubusercontent.com/szuwest/szuwest.github.io/master/images/2018-02-21%20133111.jpg" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Tue, 06 Feb 2018 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2018-02-06:qian-tan-reactnativeji-zhu-de-you-lie.html</guid><category>react-native</category></item><item><title>Code Review方案</title><link>https://szuwest.github.io/code-reviewfang-an.html</link><description>&lt;h1&gt;Code Review方案&lt;/h1&gt;
&lt;h2&gt;定义&lt;/h2&gt;
&lt;p&gt;Code Review代码评审是指在软件开发过程中，通过对源代码进行系统性检查的过程。通常的目的是查找各种缺陷，包括代码缺陷、功能实现问题、编码合理性、性能优化等；保证软件总体质量和提高开发者自身水平&lt;/p&gt;
&lt;h2&gt;code review 的好处&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;提高代码质量。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;及早发现潜在缺陷，降低修改/弥补缺陷的成本。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;促进团队内部知识共享，提高团队整体水平。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;评审过程对于评审人员来说，也是一种思路重构的过程。帮助更多的人理解系统。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;是一个传递知识的手段，可以让其它并不熟悉代码的人知道作者的意图和想法，从而可以在以后轻松维护代码。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;鼓励程序员们相互学习对方的长处和优点。 &lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;可以被用来确认自己的设计和实现是一个清楚和简单的。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;code review形式&lt;/h2&gt;
&lt;p&gt;一般code review有两种形式，一种是代码评审会议，我称之为Code Review Meeting，就是将团队成员都组织起来开会，让代码Owner上去讲自己代码的实现和思路，其它人发表意见和进行讨论，也有把这种叫做team review。另外一种是一对一评审，我称之为Single Review，就是项目owner提交代码之后，让reviewer在空闲的时候帮忙评审代码，并且写出批注，owner收到批注后，进行修改或者回复。但注意这里的reviewer并不是只有技术主管或架构师之类的才能做，代码质量监管仅仅靠架构师是不够的，需要所有经验丰富或有专长的同学参与其中。也有人将这个形式叫peer review。
现在大部分公司都使用为Single Review形式，或者两者混合使用。&lt;/p&gt;
&lt;h2&gt;code review 工具&lt;/h2&gt;
&lt;p&gt;我们这里只介绍single review形式的工具。现在有比较受好评code review工具有Facebook的Phabricator，Google的Gerrit，他们都是开源的.另外微软也有他的code review工具TFS(Team Foundation Server),据说也挺好用，不过是收费的。不过现在大家用得最多的code review方式是基于Pull Request工作流方法，结合gitlab或者github来使用。现在Git是最流行的代码管理工具，结合gitlab的pull request，很容易实现code review。&lt;/p&gt;
&lt;h2&gt;Code Review流程&lt;/h2&gt;
&lt;p&gt;这里介绍一下基于gitflow+gitlab来做code review的流程。要在gitlab里做好code review需要有个前提，就是做好权限管理。每个成员在项目里都有对应的角色，例如owner，master，developer等。然后项目代码里设置受保护分支，master一定是受保护的分支，还可以根据需要设置其他分支为受保护分支。developer权限的成员是不能向master或者其他受保护分支push代码的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;所以结合code review，开发中的整个流程就是：建立feature分支--&amp;gt;编写代码--&amp;gt;push分支代码--&amp;gt;gitlab上发起一个合并请求（pull request）--&amp;gt;审核人员审核代码，如有需要，提出修改意见--&amp;gt;开发人员修改代码--&amp;gt;审核人员审核通过，合并代码，删除分支&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下面介绍一下详细的流程，和对应的git操作命令：&lt;/p&gt;
&lt;p&gt;1、根据开发任务，建立git分支, 分支名称模式为feature/任务名，比如关于API相关的一项任务，建立分支feature/api。
git checkout -b feature/api&lt;/p&gt;
&lt;p&gt;2、运行git branch 确认切换到了feature/api分支&lt;/p&gt;
&lt;p&gt;3、编辑代码完成开发任务， commit相关代码
git add -A
git commit -m "implement api architecture"&lt;/p&gt;
&lt;p&gt;4、将分支代码push到服务器
git push origin -u feature/api&lt;/p&gt;
&lt;p&gt;5、登录到gitlab源代码库，如http://192.168.0.2/native/record-app ，点击合并请求（Pull request）按钮去创建一个合并请求（pull request）&lt;/p&gt;
&lt;p&gt;6、再pull request详细页面， 填写相关标题／说明／reviewer， 目前请将reviewer设成相关人员&lt;/p&gt;
&lt;p&gt;7、请提醒reviewer去审核pull request，系统也会发邮件提醒reviewer&lt;/p&gt;
&lt;p&gt;8、Reviewer打开pull request页面，查看代码修改情况，也可以在相应的代码处添加注视，提示代码作者哪里应该修正。&lt;/p&gt;
&lt;p&gt;9、代码作者根据reviewer的要求，调整代码后commit／push到服务器。 然后reviewer继续设置， 如此循环，知道没有问题。&lt;/p&gt;
&lt;p&gt;10、当代码没有问题以后， 需要将任务代码merge到主代码库， 有两种方法：
 a、Reviewer可以在pull request页面点击Merge按钮， 把代码merge到主代码库
 b、Reviewer手动本地merge， 并push到服务器。
git pull origin develop
git log ..develop&lt;/p&gt;
&lt;p&gt;如果看到develop里有修改没在当前分支， 那么运行git rebase develop来把develop的修改加入到当前分支
运行一下合并命令
git checkout develop
git merge --no-ff feature/api
git push&lt;/p&gt;
&lt;p&gt;11、代码作者删除feature子分支。
git checkout develop
git branch -D feature/api
git push origin :feature/api&lt;/p&gt;
&lt;p&gt;git pull origin develop &lt;/p&gt;
&lt;p&gt;总结：核心流程就是 建立分支--发起PR请求--审核--合并，不断的循环反复。&lt;/p&gt;
&lt;h2&gt;code review注意事项&lt;/h2&gt;
&lt;p&gt;待补充&lt;/p&gt;
&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://blog.csdn.net/june_y/article/details/50817993"&gt;学习笔记_Git之CodeReview流程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.csdn.net/wh_19910525/article/details/68068397"&gt;使用gitlab做git flow及代码审查&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.jobbole.com/76854/"&gt;Git工作流指南：Pull Request工作流&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.csdn.net/jsjwk/article/details/50379836"&gt;如何做好代码审查？Code Review Meeting还是Single Review
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.cnblogs.com/wenhx/p/How-We-Code-Review.html"&gt;我们是怎么做Code Review的&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.csdn.net/huver2007/article/details/75095303"&gt;如何进行高效迅速的CodeReview&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.csdn.net/lackin/article/details/7754967"&gt;如何有效的做Code Review&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;知乎上的讨论：&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/question/19977889"&gt;有人实践过 Phabricator 以及 Arcanist 作为 code review 的工具么？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/question/41089988"&gt;大家的公司的code review都是怎么做的？遇到过什么问题么？&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Wed, 10 Jan 2018 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2018-01-10:code-reviewfang-an.html</guid><category>codereview</category></item><item><title>Android so库加固加壳方案</title><link>https://szuwest.github.io/android-soku-jia-gu-jia-ke-fang-an.html</link><description>&lt;h1&gt;Android so库加固加壳方案&lt;/h1&gt;
&lt;p&gt;Android应用主要包含资源文件和代码，而代码一般包括Java代码和C/C++代码。Java代码编译后会生成dex文件，而C/C++编译后会生成so文件。Android应用的保护，主要对编译后的dex文件和so文件来保护，防止被别人反编译查看到里面的核心代码和逻辑。&lt;/p&gt;
&lt;p&gt;对于Java代码，一般在编译时做代码混淆，编译后的文件名，函数名和变量名会变成一些无意义的名字，这个即使代码被反编译出来，也很难读懂。不过由于调用关系和逻辑都还在，花些时间还是有可能读懂。所以就有了一些防止反编译的方法出现。这就包括了dex加壳或者加密方法。对dex文件保护的方法现在有不少成熟的方案，有不少第三方公司免费提供加固方案。&lt;/p&gt;
&lt;p&gt;对于C/C++代码的保护方案，会比Java代码的更麻烦一下。C/C++经过编译后生成so文件，这个so文件同样会能被反编译。由于我们的主要算法都采用C/C++来实现，并生成so文件提供给合作方使用，我们重点说的是C/C++代码和so文件的保护。&lt;/p&gt;
&lt;p&gt;对于so文件的保护，可分为有so源代码和无so源码的情况。&lt;/p&gt;
&lt;h2&gt;有源码保护&lt;/h2&gt;
&lt;p&gt;针对有源代码的情况，可以大致分为代码混淆，Section或者函数加密。&lt;/p&gt;
&lt;h3&gt;代码混淆&lt;/h3&gt;
&lt;p&gt;代码混淆最简单的方法就是利用宏定义混淆函数名。例如通过一个宏定义把一个有意义的函数名变为一个无意义的字母组合，在编译后有意义的函数名就被替换为无意义的字母组合，增加了被反编译后阅读理解难度。当然这种方法效率太低，最好当然是编译器来做。NDK编译工具并没有提供这种混淆的功能，但是可以利用LLVM-Obfuscator功能来混淆代码。LLVM-Obfuscator是一个开源的专门用于代码混淆的工具。在Android的NDK编译工具中可以集成LLVM-Obfuscator，需要修改交叉工具链的代码和一些配置参数，可以编译出混淆代码。现在网上也有一个专做这种混淆的方案商
叫Safengine。&lt;/p&gt;
&lt;h3&gt;Section或者函数加密&lt;/h3&gt;
&lt;p&gt;so库是一个ELF文件，它是有一定的格式的，包含了ELF header，若干Section header，若干section等。我们可以在代码中将核心函数定义在自定义的一个section中 （通过 __attribute__ ((section (".mytext")))） 。然后编译出来的so文件中就能找到这个自定义的section。我们可以对这个section进行加密。当程序load这个so库的时候，我们需要确保在main函数之前把section部分解密了。解密函数代码是写在so的源代码里，为了确保解密函数优先于main函数，需对加密函数加了一个 __attribute__((constructor))特性声明，会先于main前执行。解密函数需要先找到so的起始地址，获取到section的偏移值和size，然后修改内存操作权限和解密。&lt;/p&gt;
&lt;p&gt;对于特定的函数加密，原理跟对自定义section加密的原理是一样，只不过是查找不再是section，而是特定函数名。这里不再展开。&lt;/p&gt;
&lt;h2&gt;无源码保护&lt;/h2&gt;
&lt;p&gt;对于只有so库，没有其源码的情况下，就无法进行代码混淆。一种简单的方法是破坏ELF header或者删除Section header。因为在动态库的链接过程中，so文件ELF header某些字段是无用的，这些字段可以随意修改。修改了这些字段会导致反编译软件ida打不开这个so文件。同样Section header也是在链接过程中是没有用到的，可以随意删除，也会导致ida打不开这个so文件。不过这种方式容易被修正和破解掉。&lt;/p&gt;
&lt;p&gt;还有另外一种方式需要另外一个解密so库来实现。首先对源码so文件特定函数或者section进行加密，然后把解密函数放到另外一个so中。然后程序中需先加载被加密的so文件，然后加载解密so文件，解密so文件加载过程中就执行解密函数，这样确保加密的so中特定函数或者section解密了。&lt;/p&gt;
&lt;h2&gt;第三方解决方案&lt;/h2&gt;
&lt;p&gt;对于so文件或者apk文件加固加壳保护方法，是比较专业的领域，现在市场上也有一些专门的团队在做。不过主要提供的方案都是针对apk来加固加壳。对于dex文件的加固加壳方案比较成熟，不少第三方都是免费提供。但是对于so文件的加固加壳，都是属于高级功能，需要付费使用。&lt;/p&gt;
&lt;p&gt;对于apk（主要是Java代码）加固加密提供第三方服务主要有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;腾讯云应用乐固&lt;/li&gt;
&lt;li&gt;阿里聚安全&lt;/li&gt;
&lt;li&gt;360加固保&lt;/li&gt;
&lt;li&gt;爱加密&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要做so文件的加固加壳，乐固暂时没有对外提供，阿里聚安全需要先付费。爱加密也提供了so文件的加固加壳，还提供专门的SDK加密方案，不过需要先找他们的人对接洽谈。&lt;/p&gt;
&lt;p&gt;总的来说，要做好so文件的加固加壳保护并不是件容易的事，需要对so文件格式，so加载和链接过程有足够多的了解。另外加固和加壳后也不是绝对安全的，还是有可能被破解。不过加固和加壳对于核心算法还是需要的，加大被破解的难度和成本。有需要的话也可以采用第三方的服务。&lt;/p&gt;
&lt;h3&gt;参考资料&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://blog.csdn.net/wangbaochu/article/details/45370543"&gt;Android LLVM-Obfuscator C/C++ 混淆编译的深入研究&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.csdn.net/jiangwei0910410003/article/details/49336613"&gt;SO(ELF)文件格式详解&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.csdn.net/jiangwei0910410003/article/details/49962173"&gt;基于对so中的section加密技术实现so加固&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.csdn.net/jiangwei0910410003/article/details/49966719"&gt;基于对so中的函数加密技术实现so加固&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://bbs.pediy.com/thread-191649.htm"&gt;简单粗暴的so加解密实现&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://bbs.pediy.com/thread-192047.htm"&gt;无源码加解密实现 &amp;amp;&amp;amp; NDK Native Hook&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://bbs.pediy.com/thread-222760.htm"&gt;另一种无源码的so加壳实现&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.csdn.net/jltxgcy/article/details/52205210"&gt;Android SO 加壳(加密)与脱壳思路&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.niwoxuexi.com/blog/android/article/233.html"&gt;android-加固方案对比&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Sat, 06 Jan 2018 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2018-01-06:android-soku-jia-gu-jia-ke-fang-an.html</guid><category>动画 加固 加壳</category></item><item><title>2017年总结和2018年展望</title><link>https://szuwest.github.io/2017nian-zong-jie-he-2018nian-zhan-wang.html</link><description>&lt;h1&gt;2017年总结和2018年展望&lt;/h1&gt;
&lt;p&gt;已经过去的2017年发生了很多事，我想从工作，生活和投资三个角度去总结一下。&lt;/p&gt;
&lt;h2&gt;工作&lt;/h2&gt;
&lt;p&gt;我离开了工作3年多的迅雷，这是我第二次离开迅雷。这可以说是一个好的选择，也可以说是不好的选择。实际上我的离开不是说已经在迅雷呆够了，而是因为我的领导挖我过去他们公司。好的方面，当然工资涨了，跨入了AI行业，有老大罩着。不好的方面是创业公司，风险高很多，很有可能坐不起来或者倒闭，浪费时间。还有一个比较遗憾的是，离开了自己一直看好的产品项目，玩客云即将要发布了，自己却离开了。曾家自己很看好这个项目，也投入了不少精力，真心希望能成功的产品，却在黎明前离开了，有点遗憾。有得必有失，这个选择是好是坏还要待时间来验证。&lt;/p&gt;
&lt;p&gt;今年来到新公司，倒是学到了一点新技术：ReactNative。以前它出来的时候，自己也去看了一下，没机会试试。现在在项目里用起来了。这个技术看起来也没那么神，但是也确实有不少好处。这些年感觉自己的技术进步慢了，终于年纪也来了，比不上刚毕业的年轻人了。我自己也担心自己未来路怎么走。我现在也没有答案，我知道自己需要不断探索和思考。自己要减少浪费一些无所谓的时间，多点时间花在家庭和工作上。&lt;/p&gt;
&lt;p&gt;另外一点是进入了AI行业，发现这个行业泡沫确实巨大。现在的创业感觉跟4年前的创业完全不一样。社会变化很快。现在国家貌似大力发展人工智能产业，要发展一个新产业，必要需要一定的泡沫才能支撑。我也希望能接触更多的AI技术，乘上这个浪潮吧。&lt;/p&gt;
&lt;h2&gt;生活&lt;/h2&gt;
&lt;p&gt;今年实现了一个目标，就是买房。不过准确来说还没真正实现，因为银行的贷款还没最终批下来。按照正常情况来说，应该批下来了，因为我征信和银行流水有问题，导致要加担保人做担保。现在还在等最后的审核结果。&lt;/p&gt;
&lt;p&gt;买了房之后，生活压力骤然变大。不敢乱消费。今年的旅行选择了上海，不敢出国游了。也不太敢乱买东西，不敢随意出去吃大餐。想想我们这一代年轻人还是挺悲哀，辛苦赚钱，等来在房价暴涨之后买房，背负一身债，不管乱消费。&lt;/p&gt;
&lt;h2&gt;投资&lt;/h2&gt;
&lt;p&gt;今年投资还算挺顺利，也是我开始炒股三年来第一次全面盈利，而且回报也不小。不太好的就是因为买房，不得不把所有A股都卖掉了。我大致算了下，A股总体收益率是18%。A股主要受益来自中国平安，国投电力，还有小部分来自中深圳机场，海康威视。如果不是因为买房卖掉了中国平安的话，受益会更高，因为卖掉了之后中国平安又涨了不少。至于美股和港股，因为资金少，至今一分没动过。美股收益率是73%，港股收益率是63%。说实话，这个收益率我很满意，超出我的预料。美股主要受益来自英伟达，现在仍然持有，但是持有少部分迅雷。其实迅雷涨了不少，但是仓位实在太低，就算赚了3倍，对整体而已，影响很小。港股主要持有腾讯，赚了80%多，这是大头仓位。长城汽车也持有一段时间，但是一直在成本线上下波动，年底换成了彩生活，立马就赚了。我对这两个股很有信心。&lt;/p&gt;
&lt;h1&gt;2018年展望&lt;/h1&gt;
&lt;p&gt;2018年想做的东西很多很多。对未来更加焦虑。。。不过我还是看多中国的。我希望能趁着国运，顺势而为，希望能实现自己的人生目标，不过这看起来还很遥远。做好当下，一步一步来吧。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2018年，我要减少刷雪球，刷微信之类网站和玩游戏的时间，多花点时间在工作上，提升自己的技术能力。我意识到对于我们这样的人来说，努力工作赚钱才是正道，提高自己的本金才能在股市赚钱。而且我更希望自己能在工作上有所为。&lt;/li&gt;
&lt;li&gt;2018年，我希望能阅读多一些书。过去几年很少阅读纸质书籍，我发现很多成功人士都有很好的阅读习惯。自己要加强&lt;/li&gt;
&lt;li&gt;2018年，我希望在技术上深度上有所突破，然后多多思考自己以后的职业规划&lt;/li&gt;
&lt;li&gt;2018年，希望房子能在年底交房。貌似这不是我能控制的。&lt;/li&gt;
&lt;li&gt;2018年，希望能攒点钱给媳妇摆酒，希望今年能当爸爸&lt;/li&gt;
&lt;li&gt;2018年，希望家人身体健康。。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不能说更多了。整体来说，2017年基本达到了我预期。希望2018年会更好。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Sun, 31 Dec 2017 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2017-12-31:2017nian-zong-jie-he-2018nian-zhan-wang.html</guid><category>总结</category></item><item><title>玩客云的前世与出生</title><link>https://szuwest.github.io/wan-ke-yun-de-qian-shi-yu-chu-sheng.html</link><description>&lt;h1&gt;玩客云的前世与出生&lt;/h1&gt;
&lt;p&gt;迅雷最近的股价波动很大，股价从最低点附近4美元到现在13美元附近，涨了3倍多，最高点甚至到27美元。只是短短几个月的时间，涨幅这么大，主要是因为玩客云和玩客币（现在叫链克）。对于玩客币，我自己不想说太多，但是对于玩客云这个产品，我是很有感情的。这个产品是我从头就开始参与开发，虽然我已经离开玩客云团队一段时间了，但是我还是想说说这个产品。知道这个产品前世与今生的人，其实真的不是很多。我想说一说这个产品，也算是对自己的一段总结。&lt;/p&gt;
&lt;p&gt;不过我说的所有观点都是我个人观点，跟玩客云团队无关，特此声明。&lt;/p&gt;
&lt;h2&gt;玩客云的出生&lt;/h2&gt;
&lt;p&gt;玩客云是有网心科技出品的一款智能硬件产品，主打个人云盘功能，充当CDN节点功能，后来也又加入玩客币功能。玩客云这个项目最初的时候并不叫玩客云，内部我们叫赚钱宝3代。它是迅雷下载宝和赚钱宝的合并的一个产品。实际上 玩客云=迅雷下载宝+赚钱宝+玩客币 这样的一个产品。所以在做玩客云的时候，下载宝和赚钱宝这两个项目已经停了，然后团队合并成新的团队：玩客云团队。而这个团队的绝大部分人，都是下载宝团队的人，下载宝整个项目就是这样从迅雷总部并入网心科技的。玩客云的前身就是迅雷下载宝。&lt;/p&gt;
&lt;p&gt;玩客云的最初立项是在3，4月份，从一开始老板就非常重视整个项目。我们内部叫赚钱宝3代，但是我们一直在想给他一个新的名字。品牌和商务的人给了3个名字给大家投票，最终选了玩客云项目，英文名OneCloud。选整个名字主要是OneCloud和网心科技的名字OneThing很契合，然后玩客跟英文名发音也相似，玩客这个词也是老板在之前的某些场合提倡过的，很年轻化，适合年轻人。这个名字确实是不错。玩客云基本上将下载宝的功能都迁移了过来，并且进行了改进和改善。因为团队都是下载宝过来的，都有比较多的经验，所以少走了很多弯路。特别是远程访问这个功能。从一开始就在方案上讨论很久，然后做了很多功课。才最终达到现在远程播放视频也很流畅的效果。说这一点，我自己也感到很自豪，因为这个功能我从立项时就提建议给项目负责人要重视这个技术难点。在整个项目开发过程中，我也是一直参与其中，APP端与服务器的调试都是我来主导，iOS端的库也是由我来修改和编译的，为此我还写过博客记录我的开发心得。远程访问的体验绝对是玩客云的一个亮点，是比其他竞品优越的地方。当然，除了这个，玩客云还做了很多很好的功能，例如文件夹的整理，照片的整理。远程下载功能基本上是完全借鉴下载宝的。下载宝在远程下载方面踩过很多坑，积累了很多经验，有了这些经验，玩客云可以走得顺很多。&lt;/p&gt;
&lt;p&gt;至于玩客币，是后来快要发布的时候加进去的。那个时候我已经离开了玩客云团队。不过内部我们是有提前研究区块链的，在6，7月份的时候我们内部已经让大家研究区块链技术了。因为我自己没有参与，所以这里我不讨论。玩客云能取得这么大的功能，我真心的感到高兴，这里有很大部分是因为前面迅雷的积累。玩客云是下载宝和赚钱宝的合身，由于赚钱宝我没有参与，但是下载宝是一直参与的产品，所以我想说说它的前身：下载宝&lt;/p&gt;
&lt;h2&gt;玩客云前身：下载宝&lt;/h2&gt;
&lt;p&gt;我前面说过玩客云最初的团队都是下载宝过来的，那么下载宝又是一个什么样的产品。下载宝其实就是一个个人云盘产品。它主要包括了硬盘文件管理和远程下载功能，资源嗅探功能。其中硬盘管理包括了传统的文件浏览，照片，影院功能。下载宝最初有一个亮点功能就是资源嗅探功能。比如你输入 功夫，它会自动全网搜索这部电影的资源，把所有下载资源罗列出来，包括资源大小等信息，你只要点击一下就会加入下载列表。这是蛮好的一个功能，但是被人告说提供盗版资源，然后就被阉割了一些功能，使用起来就没有那么友好了。当然下载宝还有其他很好的功能，例如自动备份相册功能，自动备份SD功能，家庭局域网内共享功能等，这些功能都被玩客云继承了，而且还做了优化。所以玩客云在这方面是有优势的，玩客云还把下载宝没有做好的给做好了----远程访问功能。下载宝在远程访问方面确实做得不好，可以说几乎不能用，除了能远程备份照片外，远程访问照片非常慢，而且没有远程播放视频功能。因为这一块我们采取的技术有很大的局限性，而且本身也没有做好。玩客云在这方面采用了新的技术方案，而且从固件端，服务器，到APP端，大家都非常重视这块的技术，所有最终做出来的产品体验还是挺不错的。&lt;/p&gt;
&lt;p&gt;迅雷下载宝这个产品也是花了很多时间和人力的。这个产品其实也不是从零开始做的，它早期的时候也不叫下载宝，是叫时光机，后来才改了名字叫下载宝。而时光机的前身是另外一个项目，叫超级硬盘。这个就是下载宝的前身了，这是后面我要讲的。对于下载宝这和玩客云这两个产品，我真倾注了我很多心血，我是当时都是真心想把产品做成功。但是下载宝这个项目命途多舛。从开始时光机这个小小的项目，发展到下载宝一个几十人的团队，再到后面成立了一个100多人的部门，再到后面并入网心科技，停掉下载宝项目，再成立玩客云项目，这其中不少事令人感慨。其实我们在做下载宝期间，就有用户呼吁下载宝和赚钱宝合并，没想到最后真的合并了。。。不过这也挺好，因为玩客云最终成功了，只是最初的故事没有多少人知道。&lt;/p&gt;
&lt;h2&gt;下载宝前身：超级硬盘&lt;/h2&gt;
&lt;p&gt;知道下载宝前身是超级硬盘这个项目的人并不多，如果限定在玩客云团，那就寥寥无几了。不过这确实是挺久远的事情了。在2014年年初，迅雷在做云存储方面的项目，还有一个专门的部门就叫云存储与终端事业部，我就是那个时候重新回到迅雷的。一开始我并不是做超级硬盘这个项目，我只给他们提供封装好的业务SDK，后来他们实在不够人手，我就直接加入他们一起开发。超级硬盘这个产品主要功能就是硬盘+无线WiFi+迅雷网盘的结合品。这个硬件本身集成了一个系统，内置一个硬盘，一个WiFi发射器和接收器。使用前需先将这个硬件连上一个WiFi，然后它自己也会发射一个WiFi，手机APP端是连上盒子发射的WiFi来访问和管理这个硬件。这个流程很复杂，硬件盒子本身需要接入一个WiFi，自己又发射一个WiFi，这导致它的网络很不稳定。这些操作都需要APP端操作进行，很难用。另外一个问题是盒子上的系统是外包给别人开发的，也很不稳定。APP端还加入了一个迅雷网盘功能，做成了一个大而全的APP。然后每一个功能都做的不好，所以成了一个烂产品，很多东西不可控。产品很快就失败了，连部门也解散了。那个时候我记得刚好有个叫“无秘”的匿名吐槽公司的APP，我们公司的人就在上面吐槽，全部门最优秀的人都在做这个产品，却做得这么烂。其实这也管不得我们，这里面有几个深刻的教训，也是为后来我们做下载宝提供了宝贵的经验的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;硬件里面的固件必须是要我们自己做 &lt;/li&gt;
&lt;li&gt;硬件最好是有线连接路由器的，无线连接路由器的网络很容易不稳定&lt;/li&gt;
&lt;li&gt;一开始不能把战线铺得太开，应该先专注一些最主要功能把体验做好&lt;/li&gt;
&lt;li&gt;不能做大而全的产品&lt;/li&gt;
&lt;li&gt;硬件不能定价太高，要节约成本（后面的产品就把内置硬盘拿掉了）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;后面我们做下载宝（时光机）的时候，我们就是吸取这些教训，才把下载宝做成功的。因为下载宝做得还不错，用户呼吁下载宝和赚钱宝合并，后面才有了玩客云，而实际上最初的玩客云团队也主要有下载宝团队组成。下载宝这个项目前后总共加起来，时间也超过了一年。我本身也把下载宝所积累的经验，全部都应用在了玩客云，并且很多都是改进了。看到玩客云的成功我自己真心的感到开心。&lt;/p&gt;
&lt;h1&gt;总结&lt;/h1&gt;
&lt;p&gt;迅雷这些年真的做了很多转型的尝试，但是没有多少成功的案例。迅雷曾经在PC时代风光无限，但是在移动互联网时代却跟不上步伐。但是这些年做了尝试也有了转机。从股价的反应也可以看出。玩客云的成功也来之不易，玩客币（链克）确实是一个很好的催化剂，把迅雷激活了起来。虽然这些已经跟我没有太多的关系了，我还是希望她越来越好，毕竟自己曾经努力过。&lt;/p&gt;
&lt;p&gt;如果你觉得这篇文章有用，请打赏小钱喝杯咖啡^_^
&lt;img alt="打赏" src="https://raw.githubusercontent.com/szuwest/szuwest.github.io/master/images/2018-02-21%20133111.jpg" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Sun, 24 Dec 2017 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2017-12-24:wan-ke-yun-de-qian-shi-yu-chu-sheng.html</guid><category>迅雷 网心 超级硬盘 迅雷下载宝 赚钱宝 玩客云</category></item><item><title>手机局域网内（包括热点）发现和组网通讯实现</title><link>https://szuwest.github.io/shou-ji-ju-yu-wang-nei-bao-gua-re-dian-fa-xian-he-zu-wang-tong-xun-shi-xian.html</link><description>&lt;h1&gt;手机局域网内（包括热点）组网通讯实现&lt;/h1&gt;
&lt;p&gt;最近在做一个应用，需要多个手机一起组网，一个充当主机，其他多个手机充当从机。主机跟每个从机之间可以相互通信，发送消息和文件。这不就是个CS（client-server）模式吗，只不过server不是在云端，只是在同一个局域网的手机上罢了。&lt;/p&gt;
&lt;p&gt;这里面有两个关键的地方，一个是如何发现同一个局域网内的手机客户端，包括自建的热点，一个是知道各个手机的Ip地址后，用什么方式来建立通信。这里说一下热点，手机开启热点之后，别的手机连上这个特点，其实也是一个小型局域网，只不过这个局域网稍微有点不一样（Ip地址），其他的都一样。&lt;/p&gt;
&lt;h2&gt;局域网发现&lt;/h2&gt;
&lt;p&gt;局域网发现主要难点在于如何得到对方Ip地址。我们的做法是发送UDP包。UDP协议是无面向连接的，也就是不需要像TCP协议那样提前建立连接。所以我们向局域网内某一个特定的端口广播UDP包，接收到这个包的人，发送回包，那么我们就知道彼此的存在和地址。&lt;/p&gt;
&lt;p&gt;那么关键地方是&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有人一直在监听一个端口X，接收UDP包&lt;/li&gt;
&lt;li&gt;有人在一直往这个端口X发送UDP包&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;监听端的人收到了UDP包后，就知道了发送者的Ip地址。但这时发送者是不知道接收者的，因为这是UDP包，无连接的状态的。那怎么做才让发送者也知道了。其实只要发过来再做一次就行。发送者同时也是监听者，这就行了。不过发送者A监听的是另一个端口Y，接收者B接收到包后，发送一个Y端口的包给A就行了。&lt;/p&gt;
&lt;p&gt;总结起来：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主机监听端口X，一直发送Y端口的广播UDP包&lt;/li&gt;
&lt;li&gt;从机监听端口Y，接收到UDP包后，往X端口发送UDP包。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这样就能双方知道对方的Ip地址了。发送的数据包也可以很讲究，例如发送json数据，可以自己定义一些字段，当接收者收到之后，解析数据，如果不符合规则的数据包直接丢弃掉。这就可以支撑一些业务逻辑了。&lt;/p&gt;
&lt;h3&gt;广播地址&lt;/h3&gt;
&lt;p&gt;广播地址是什么呢，一般都是用255.255.255.255，也有不用广播用组播地址例如192.168.43.255.这个组播地址就是热点的时候采用的地址，因为开启热点之后，那个手机的IP地址是固定的，是192.168.43.1其他端的手机都是这个地址后面的192.168.43.X。如果广播发送不了或者被禁掉了？一般来说还有一种方法，就是子网掩码里面的所有Ip地址遍历发一遍，这也是办法之一。&lt;/p&gt;
&lt;h2&gt;一对多的通信&lt;/h2&gt;
&lt;p&gt;当知道对方的Ip地址后，一切都好办了。端对端的通信有挺多方法，一对多的通信也不少。如果要同时考虑在Android和iOS都好实现的话，其实可选的不是很多。&lt;/p&gt;
&lt;p&gt;最保守的方法就是直接采用TCP协议建立sock来通信。在iOS端和Android端都有很好的socket库，不用担心能不能实现和兼容性问题。这个方案挺好但是缺点也明显，因为sock通信只定义了最基础的，消息格式要完全自己定制和实现，还多心跳之类的，这里的工作量还不少。也许还有少的框架实现了这些，但是要同时在iOS端和安卓端都有实现，我还真不知道有哪些。而且我的情景里最重要的是有一个主机在里面，所有的从机都跟主机通信，所以必须说要有一个server。&lt;/p&gt;
&lt;p&gt;我后来采用的的WebSocket来实现。WebSocket在Android上有很多库，不过大多数都是client端的,包括了server端的有AndroidAsync,Java-Websocket。我采用的是AndroidAysnc。而iOS端可选择的就更少了。我在github上找了很多库，都是只支持client的，有支持server的都是很久很老的项目，找到一个采用swift写的叫Telegraph库，试用了起来，这个库实现得不是很好，有挺多问题，不尽如意。最终现在iOS端只有采用了Facebook的SocketRocket来作为client端，server端暂时没有好的实现。&lt;/p&gt;
&lt;p&gt;采用WebSocket来实现双向通信有不少好处，例如它直接支持发送字符串消息，二进制数据（文件），还有连接上和断开都有相应的事件，还有ping-pong这种心跳机制，我觉得挺好的。iOS端的WebSocket server暂时没有找到可靠的第三方实现，比较遗憾。&lt;/p&gt;
&lt;p&gt;我自己做了demo工程，上传到github。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/szuwest/Recorder"&gt;Android局域网发现和建立一对多通信&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/szuwest/SpeakinRecorder"&gt;iOS局域网发现和建立一对多通信&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;后记&lt;/h2&gt;
&lt;p&gt;后来我找到了一个还算比较可靠的包含server的iOS的WebSocket库：&lt;strong&gt;PocketSocket&lt;/strong&gt;。我已经使用起来了，整体比较稳定，虽然有些还是不是很完善，比起其他的，已经很好了。唯一比较大的问题是它不支持设置连接超时，需要自己设置一个心跳来自己检测。总体来说也不错了.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/zwopple/PocketSocket"&gt;PocketSocket&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果你觉得这篇文章有用，请打赏小钱喝杯咖啡^_^
&lt;img alt="打赏" src="https://raw.githubusercontent.com/szuwest/szuwest.github.io/master/images/2018-02-21%20133111.jpg" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Sun, 05 Nov 2017 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2017-11-05:shou-ji-ju-yu-wang-nei-bao-gua-re-dian-fa-xian-he-zu-wang-tong-xun-shi-xian.html</guid><category>局域网 热点 通讯 广播 WebSocket</category></item><item><title>声纹识别之Android手机录音采集探讨</title><link>https://szuwest.github.io/sheng-wen-shi-bie-zhi-androidshou-ji-lu-yin-cai-ji-tan-tao.html</link><description>&lt;h1&gt;声纹识别之Android手机录音采集探讨&lt;/h1&gt;
&lt;p&gt;声纹识别是人工智能语音方向的一个重要分支。最近人工智能的兴起也带动了声纹识别这一领域的发展。声纹识别也越来越准确。不过在声音采集方面，特别是手机端的声音采集，是一个很讲究的问题。我加入人工智能声纹识别公司也有两个多月了，对手机端的语音采集也有了一定的了解，准备整理一下做成文章，跟大家探讨。今天重点说Android手机的录音采集方面的东西。&lt;/p&gt;
&lt;h2&gt;语音采集的一些基础指标&lt;/h2&gt;
&lt;p&gt;首先要搞清楚的一点是我们的人声是一些声波，是模拟信号，我们计算机的采集是将这些模拟信号转化为数字信号存储起来。我们播放语音文件的时候，是将数字信号转化为模拟信号。说实话，这一块的知识我大学也学得不好，模电我们软件工程的学生没有专门的课程，数电倒是有。不过数电模电的转化这个概念这倒不难理解。这里面就涉及到了采样率和采样位数这两个指标。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;采样率，或者叫采样频率，指每秒钟取得声音样本的次数。采样率越高，数据越精确。我们也需要了解常用的采样率是多少：8k(8000），16k, 44.1k,48k。8k是电话所用的采样率，对于我们人说的声音的频率，基本在这个采样率之内。所以电话就才采用这个频率采样。48k采样率是CD，DVD所采用的。超过这个频率人耳是分辨不出来的了。&lt;/li&gt;
&lt;li&gt;采样位数，说的是每个采样数据占的位数。每个采样数据记录的是振幅, 采样精度取决于采样位数的大小。常用的位数是8位，也就是一个字节。还有16位或者32位。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除此之外，还有一个声道数也很重要。声道数也叫通道数，即声音的通道的数目。常见的单声道和立体声（双声道），现在发展到了四声环绕（四声道）和5.1声道。我现在接触到的只有单声道和双声道。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单声道.单声道的声音只能使用一个扬声器发声，有的也处理成两个扬声器输出同一个声道的声音，当通过两个扬声器回放单声道信息的时候，我们可以明显感觉到声音是从两个音箱中间传递到我们耳朵里的，无法判断声源的具体位置。&lt;/li&gt;
&lt;li&gt;双声道 双声道就是有两个声音通道，其原理是人们听到声音时可以根据左耳和右耳对声音相位差来判断声源的具体位置。声音在录制过程中被分配到两个独立的声道，从而达到了很好的声音定位效果。这种技术在音乐欣赏中显得尤为有用，听众可以清晰地分辨出各种乐器来自的方向，从而使音乐更富想象力，更加接近于临场感受。双声目前最常用途与两个，在卡拉OK中，一个是奏乐，一个是歌手的声音；在VCD中,一个是普通话配音，一个是粤语配音。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;采样率，采样位数，声道数，这三个概念很重要，是声音采集的基础，不管什么平台的声音采集，都会涉及这三个指标。在手机设备中，不管是Android还是iPhone手机，他们都有这个三个概念。而且在手机平台中，采样率大都数采样16k, 16bit采样位数。而在人工智能语音方面，基本都是采样单声道。至于为什么这样，我猜8k的采样率虽然对人说话足够，但是还是会丢掉一些人耳听不见，但是对声纹识别又很重要的细节会被丢掉。所以采用16k的比较合适。为什么不采用更高的采样率，一是越高的采样率所需存储空间越到，另外估计暂时也用不到这么高的采样率。而采样位数8bit显然太少，16bit是比较合适，现在的很多算法也是按照这个位数来做的。至于32bit，我想当然更好，但是存储空间更大，算法也要修改（我猜的）。而声道数，多声道貌似对声纹识别没有太大的帮助，多声道貌似更多的用在音乐方面。&lt;/p&gt;
&lt;h2&gt;音频格式&lt;/h2&gt;
&lt;p&gt;说完录音采集的指标，需要说说声音的存储。那些指标对于我们大部分人来说，根本就没有多少了解，反而音频格式听得比较多。音频存储下来是按照一定的格式的，例如我们用的最多的MP3。实际上它是一种经过编码压缩过的音频。经过录音设备采集的声音，未经编码，我们叫PCM数据。怎么算它的存储空间呢，这里有个概念叫比特率，也叫码率，就是一秒中数据有多大。计算方式也易理解：采样率x采样位数x声道数，单位就是bit/秒，当然我们要用字节数来表述的话，需要再除以8.&lt;/p&gt;
&lt;p&gt;在手机平台中，一般都是(16000x16x1)/8 = 32000byte/s ~ 32KB/s.一分钟的原始音频大约1.92MB,4分钟的大约7.68MB，还是挺大的。所以我们的音乐格式一般都要经过编码压缩，例如MP3，4分钟的歌曲大概也就4MB左右。但是对于人工智能的声纹识别来讲，是不能压缩的，因为压缩就会失真，一些重要的细节就会丢失，这些细节对声纹识别却很重要。一般我们就直接使用pcm数据或者WAV数据。WAV格式的音频，就是在pcm数据前面再加个文件头。文件头里说明了采样率，采样位数，声道数和文件大小等信息，然后很多音频播放器就能读取这个头然后播放音频。没有这个头的话，音频播放器是播放不了的。&lt;/p&gt;
&lt;h2&gt;Android录音类&lt;/h2&gt;
&lt;p&gt;说了这么多录音相关的指标概念，接下来说说Android中是怎么录音的，将这些相关的指标如何对应的。&lt;/p&gt;
&lt;p&gt;Android系统中提供了两个录音相关的类，一个是MediaRecorder，一个是AudioRecord。MediaRecorder集成了录音，编码等功能，使用前配置好参数，编码格式，音频存储路径，发起开始录音和结束录音命令，最终你就会得到一个音频文件。AudioRecord需要使用者自己去配置参数，设定音频存储buffer大小，然后需要自己读取数据，处理录音数据。&lt;/p&gt;
&lt;p&gt;MediaRecorder较简单易用，音频存储空间小，而AudioRecord需要对音频实时处理，它输出的是pcm语音数据，空间占用大。对于一些只需要记录语音的应用来说，MediaRecorder更好用，而对于像声纹识别这些应用场景来说，AudioRecord是必然选择。&lt;/p&gt;
&lt;h2&gt;录音源&lt;/h2&gt;
&lt;p&gt;Android录音采集还有一个重要的参数，叫录音源audioResource。我们看一下AudioRecord的构造函数。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;AudioRecord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;audioSource&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sampleRateInHz&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;channelConfig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;audioFormat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;bufferSizeInBytes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第一个参数audioSource就是录音源，sampleRateInHz是采样率，channelConfig是声道数，audioFormat是采样位数，bufferSizeInBytes是采样时缓冲区大小，硬件设备采样的数据会先存到这个缓存区，我们程序从这个缓存区读取数据。&lt;/p&gt;
&lt;p&gt;Android系统中还专门为这个audioSource定义不少的常量。一般来说我们的录音源不就是麦克风吗，为啥还会有这么多的取值？&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/** 默认声音 **/&lt;/span&gt;

&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="no"&gt;DEFAULT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

 &lt;span class="cm"&gt;/** 麦克风声音 */&lt;/span&gt;

&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="no"&gt;MIC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/** 通话上行声音 */&lt;/span&gt;

 &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="no"&gt;VOICE_UPLINK&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/** 通话下行声音 */&lt;/span&gt;

&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="no"&gt;VOICE_DOWNLINK&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/** 通话上下行声音 */&lt;/span&gt;

&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="no"&gt;VOICE_CALL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/** 根据摄像头转向选择麦克风*/&lt;/span&gt;

&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="no"&gt;CAMCORDER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

 &lt;span class="cm"&gt;/** 对麦克风声音进行声音识别，然后进行录制 */&lt;/span&gt;

&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="no"&gt;VOICE_RECOGNITION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/** 对麦克风中类似ip通话的交流声音进行识别，默认会开启回声消除和自动增益 */&lt;/span&gt;

&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="no"&gt;VOICE_COMMUNICATION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/** 录制系统内置声音 */&lt;/span&gt;

&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="no"&gt;REMOTE_SUBMIX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/**对麦克风录音不处理，Android7.0才加入的 **/&lt;/span&gt;

&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="no"&gt;UNPROCESSED&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我也不太明白为什么要搞这么多值，但是从它们的定义来看都是针对不同的场景。这里有三个是针对电话通话的，而且一般只给系统用。最常用的是MIC，这个就是主麦克风，这适用于大部分的场景。对于声纹识别场景来说，希望能做得更好，希望得到更原始更真实的数据。VOICE_RECOGNITION和VOICE_COMMUNICATION貌似也挺适合声纹识别场景，但是官方没有更多的资料，网上也很少。还有就是不知道有没有兼容性问题。在7.0系统，还新增了一个UNPROCESSED定义。我还专门试过这个参数，我发现采用这个录音源获取到的声音数据，比较接近麦克风采集的原始数据，它的语谱图跟专门的麦克风采集的音频的语谱图很相似。这里说一下语谱图和声波图，这两种图都是鉴别声音质量和信息的方式。我看做算法的同事经常参考这两个图。我对这两种图也还不够了解。&lt;/p&gt;
&lt;p&gt;经过我自己的一些试验，还有查阅的一些资料，我得出一个结论：Android手机的录音其实都在底层（可能是驱动层）做了处理，例如噪声抑制和自动增益，上层拿到的数据其实已经不是原始的数据了。为什么这样做呢，因为手机的使用环境很复杂，可能会很嘈杂，并且我们说话的时候，手机跟嘴之间还是有一定的距离的。如果不做自动增益和噪声抑制的话，那声音可能很小，还有噪声，这样再次播放出来就听不清了。所以底层肯定有做处理的。这个我不知道官方有没有文档说明，但是我觉得事实应该就是这样的。由于这是做在底层，而且上层API无法修改，后来Android4.2之后加入了一些类：NoiseSuppressor，AutomaticGainControl，AcousticEchoCanceler。可以控制是否开启自动增益，噪声抑制等功能。实际上测试结果是 并不是所有的硬件都支持，而且开启了之后效果有一点，但是不是很明显。我得出的结论就是原本Android底层（驱动层）就开启了噪声抑制和自动增益的，而且这是可能是关不了的。在4.2之后的系统里，虽然有了相关API是取开启或者关闭这些功能，但是有些硬件就是不支持（摊手）。就算有支持了，也只是在底层的基础上，在进一步的加强而已。到了Android7.0系统，终于加了一个UNPROCESSED定义，支持这个定义的硬件，就真的去除了底层的自动增益和噪声抑制等效果的。这个定义对声纹识别还是很有用的。奈何这个是7.0之后才支持，市面上的这个系统的手机还是比较少。&lt;/p&gt;
&lt;p&gt;以上的一些结论都是我个人得出的，不一定正确。如果有人指出我的不对或者补充，那将是更好。欢迎讨论（szhanfeng203@gmail.com）&lt;/p&gt;
&lt;h2&gt;Android手机麦克风和双MIC降噪&lt;/h2&gt;
&lt;p&gt;说了这么多软件的东西，说一下硬件的东西。&lt;/p&gt;
&lt;p&gt;Android手机至少有一个麦克风，位于手机底部。但是很多手机同时会有两个或以上的麦克风，一般位于手机顶部或者背部摄像头旁边。现在很多手机厂商会采用双麦克风进行降噪。双MIC降噪一般用在打电话的时候。因为打电话的时候，主麦克风（手机底部）靠近声源，而另外一个麦克风在听筒附近，离声源比较远。语音到达这两个MIC的幅度相差6个dB,被保留。而噪音到达两个MIC的幅度相当，被过滤。网上有不少资料说明，感兴趣的可以查查看。&lt;/p&gt;
&lt;p&gt;不过在软件层面，audioResource指定为MIC是采用主麦克风，而CAMCORDER是摄像头侧的麦克风，貌似没办法指定两个麦克风都用。估计双MIC降噪只有在打电话时，系统自己采用的。不知道有没有做系统的同学知道这个。&lt;/p&gt;
&lt;p&gt;对于Android手机的录音，其实有很多要讨论的。例如手机是如何对VOICE_RECOGNITION和VOICE_COMMUNICATION支持，NoiseSuppressor和AutomaticGainControl各厂商是如何处理的，都值得探讨，可惜这方面的资料太少，讨论的人也不多，我也没做过Android系统，所以很多是未知数，需要更多是试验。欢迎留言或者发邮件讨论（szhanfeng203@gmail.com）。&lt;/p&gt;
&lt;p&gt;如果你觉得这篇文章有用，请打赏小钱喝杯咖啡^_^
&lt;img alt="打赏" src="https://raw.githubusercontent.com/szuwest/szuwest.github.io/master/images/2018-02-21%20133111.jpg" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Sun, 08 Oct 2017 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2017-10-08:sheng-wen-shi-bie-zhi-androidshou-ji-lu-yin-cai-ji-tan-tao.html</guid><category>声纹识别 人工智能 录音 Android</category></item><item><title>适配iOS11与iPhone X需要注意事项</title><link>https://szuwest.github.io/gua-pei-ios11yu-iphone-xxu-yao-zhu-yi-shi-xiang.html</link><description>&lt;h1&gt;适配iOS11与iPhone X需要注意的事项&lt;/h1&gt;
&lt;p&gt;最近苹果发布了iOS11和iPhone X，我之前开发的一个应用界面出现了问题，然后需要适配。记录一下需要注意的事项。&lt;/p&gt;
&lt;h2&gt;适配iOS11&lt;/h2&gt;
&lt;p&gt;第一个问题是iOS11导航栏改变了。除了加入largeTitle这种特性以外，还改变了很多东西，可以说是完全重写了导航栏。我遇到的问题是导航栏返回按钮图片变得很大，巨丑无比，所以得看看什么原因。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我看了下我导航栏的设置代码，还做了挺多事，而且做了很多hack。第一是通过 &lt;strong&gt;[UINavigationBar appearance].backIndicatorImage&lt;/strong&gt; 和 &lt;strong&gt;[UINavigationBar appearance].backIndicatorTransitionMaskImage&lt;/strong&gt;设置了返回按钮图片，还有 &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;UIBarButtonItem&lt;/span&gt; &lt;span class="n"&gt;appearance&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;setBackButtonTitlePositionAdjustment&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;UIOffsetMake&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSIntegerMin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;NSIntegerMin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;forBarMetrics&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;UIBarMetricsDefault&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;设置了把返回按钮右边的文字隐藏掉。还有通过hack 方式找到 _UINavigationBarBackIndicatorView把它的frame给改了。&lt;/p&gt;
&lt;p&gt;因为iOS11的导航栏变化很大，_UINavigationBarBackIndicatorView这个类找不到了，所以frame修改就失败了。然后因为我发现我设置的返回按钮的那种图片本来是很大，因为设置了frame把它缩小了。而现在frame已经设置不了，所以就按图片原本的大小显示了。最后解决办法就是把图片大小设置成符合导航栏的大小。&lt;/p&gt;
&lt;p&gt;图片大小是正常了，但是还是有别问题，因为返回按钮不是显示在垂直方向的中间，显示在偏下方了。最后发现是&lt;strong&gt;[UIBarButtonItem appearance] setBackButtonTitlePositionAdjustment&lt;/strong&gt;这句代码导致的。所以我判断了如果是iOS11系统的话，就不再调用这句代码。&lt;/p&gt;
&lt;p&gt;图片正常了，显示位置也正常了，但是上面那句代码去掉之后，返回按钮右边的文字显示出来了。这又是个麻烦事。
找了很多资料，还是没有找到理想的方案。最终在Stack Overflow上找到一种方式。在我的BaseViewController里viewDidLoad方法里，加入下面代码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;navigationItem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;backBarButtonItem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;UIBarButtonItem&lt;/span&gt; &lt;span class="n"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;initWithTitle&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;UIBarButtonItemStylePlain&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;nil&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样可以完美去掉返回按钮右边的文字，没有副作用。&lt;/p&gt;
&lt;p&gt;iOS11还有很多其他的改变，网上很多文章讲。我暂时只遇到了导航栏的问题，其他的还好。&lt;/p&gt;
&lt;h2&gt;适配iPhone X&lt;/h2&gt;
&lt;p&gt;由于iPhone X是全面屏，并且分辨率变了，所有iPhone X上可能也需要适配。我的APP就是出现了一点问题。&lt;/p&gt;
&lt;p&gt;iPhone X的UI上变化很大的一点是状态栏，它不再是20dp,而是44dp。如果你的界面上硬编码了这个，那就很有可能会出现问题。&lt;/p&gt;
&lt;p&gt;我的APP上用了第三方的一个叫ViewPageController的类，这个类专门是用来做tab切换的。由于它在代码了写frame的时候，计算时参考状态栏的高度是20，所有iPhone X就出问题了。暂时我的解决办法就是：判断是iPhone X的话，就把状态栏的高度定为44.那么如果判断设备是iPhone X呢。&lt;/p&gt;
&lt;p&gt;一般来说主要有两种方式：
一是通过屏幕来判断&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UI_USER_INTERFACE_IDIOM&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;UIUserInterfaceIdiomPhone&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;CGSize&lt;/span&gt; &lt;span class="n"&gt;screenSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;UIScreen&lt;/span&gt; &lt;span class="n"&gt;mainScreen&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;bounds&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;screenSize&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mf"&gt;812.0f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;NSLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;iPhone X&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;二是通过model来判断&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;NSString&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;modelID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[[&lt;/span&gt;&lt;span class="n"&gt;UIDevice&lt;/span&gt; &lt;span class="n"&gt;currentDevice&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;modelIdentifier&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kt"&gt;BOOL&lt;/span&gt; &lt;span class="n"&gt;isIphoneX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;modelID&lt;/span&gt; &lt;span class="n"&gt;isEqualToString&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;iPhone10,5&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;modelID&lt;/span&gt; &lt;span class="n"&gt;isEqualToString&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;iPhone10,6&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第二种方式需要从官网上确认一下还没有没别的型号。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Tue, 26 Sep 2017 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2017-09-26:gua-pei-ios11yu-iphone-xxu-yao-zhu-yi-shi-xiang.html</guid><category>iOS11 iPhoneX</category></item><item><title>Coturn在iOS端应用和libevent的编译</title><link>https://szuwest.github.io/coturnzai-iosduan-ying-yong-he-libeventde-bian-yi.html</link><description>&lt;h1&gt;Coturn在iOS端应用和libevent的编译&lt;/h1&gt;
&lt;p&gt;coturn是一个Google的开源库，用于客服端-服务器-客户端之间建立数据通道，传输数据流。现在直播所有的技术WebRTC就是基于coturn的。这个技术真的很牛。&lt;/p&gt;
&lt;p&gt;我们的产品个人私有云，一款智能硬件，接上你的硬盘，就可以通过手机消费你硬盘里的文件，任务时候任何地方，只要你联网。从智能盒子和手机之间的数据传输就需要coturn这种技术。WebRTC很好，但是不适用于智能硬件.&lt;/p&gt;
&lt;p&gt;Coturn依赖的库有libevent和OpenSSL。OpenSSL有很多iOS的库，使用也很广泛。libevent也是一个使用挺多的C库，但是在移动平台上很少用。我在iOS平台上编译libevent遇到了很多问题。一个是不能直接用同时用在真机和模拟器上，一个是iOS10以下系统会闪退。第一个问题比较好解决，但是第二个问题不太好解决。我一直以为是我编译的库有问题，后来另一个同事他把崩溃堆栈发给我看，我发现是iOS9的系统库缺少一个get_clocktime的函数。经过搜索，发现是libevent确实是有这个东西，也有人遇到同样的问题。可以通过一个编译参数来禁用掉。&lt;/p&gt;
&lt;p&gt;下面是libevent的编译脚本主要内容&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;###########################################################################
# Choose your libevent version and your currently-installed iOS SDK version:
#
VERSION=&amp;quot;2.1.8-stable&amp;quot;
USERSDKVERSION=&amp;quot;10.3&amp;quot;
MINIOSVERSION=&amp;quot;8.0&amp;quot;
VERIFYGPG=false

###########################################################################
#
# Don&amp;#39;t change anything under this line!
#
###########################################################################

# No need to change this since xcode build will only compile in the
# necessary bits from the libraries we create
ARCHS=&amp;quot;i386 x86_64 armv7 armv7s arm64&amp;quot;

DEVELOPER=`xcode-select -print-path`
#DEVELOPER=&amp;quot;/Applications/Xcode.app/Contents/Developer&amp;quot;

# for continuous integration
# https://travis-ci.org/mtigas/iOS-OnionBrowser
if [ &amp;quot;$1&amp;quot; == &amp;quot;--noverify&amp;quot; ]; then
    VERIFYGPG=false
fi
if [ &amp;quot;$2&amp;quot; == &amp;quot;--travis&amp;quot; ]; then
    ARCHS=&amp;quot;i386 x86_64&amp;quot;
fi

if [[ ! -z &amp;quot;&lt;span class="nv"&gt;$TRAVIS&lt;/span&gt;&amp;quot; &lt;span class="err"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;$TRAVIS&lt;/span&gt; ]]; then
    # Travis CI highest available version
    echo &amp;quot;==================== TRAVIS CI ====================&amp;quot;
    SDKVERSION=&amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;USERSDKVERSION&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot;
else
    SDKVERSION=&amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;USERSDKVERSION&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot;
fi

cd &amp;quot;`dirname \&amp;quot;$0\&amp;quot;`&amp;quot;
REPOROOT=$(pwd)

# Where we&amp;#39;ll end up storing things in the end
OUTPUTDIR=&amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;REPOROOT&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/dependencies&amp;quot;
mkdir -p &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;OUTPUTDIR&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/include
mkdir -p &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;OUTPUTDIR&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/lib


BUILDDIR=&amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;REPOROOT&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/build&amp;quot;

# where we will keep our sources and build from.
SRCDIR=&amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;BUILDDIR&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/src&amp;quot;
mkdir -p &lt;span class="nv"&gt;$SRCDIR&lt;/span&gt;
# where we will store intermediary builds
INTERDIR=&amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;BUILDDIR&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/built&amp;quot;
mkdir -p &lt;span class="nv"&gt;$INTERDIR&lt;/span&gt;

########################################

cd &lt;span class="nv"&gt;$SRCDIR&lt;/span&gt;

# Exit the script if an error happens
set -e

if [ ! -e &amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;SRCDIR&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/libevent-&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;VERSION&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;.tar.gz&amp;quot; ]; then
    echo &amp;quot;Downloading libevent-&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;VERSION&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;.tar.gz&amp;quot;
    curl -LO https://github.com/libevent/libevent/releases/download/release-&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;VERSION&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/libevent-&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;VERSION&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;.tar.gz
fi
echo &amp;quot;Using libevent-&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;VERSION&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;.tar.gz&amp;quot;

# up to you to set up `gpg` and add keys to your keychain
# may have to import from link on http://www.wangafu.net/~nickm/ or http://www.citi.umich.edu/u/provos/
if &lt;span class="nv"&gt;$VERIFYGPG&lt;/span&gt;; then
    if [ ! -e &amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;SRCDIR&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/libevent-&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;VERSION&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;.tar.gz.asc&amp;quot; ]; then
        curl -LO https://github.com/libevent/libevent/releases/download/release-&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;VERSION&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/libevent-&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;VERSION&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;.tar.gz.asc
    fi
    echo &amp;quot;Using libevent-&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;VERSION&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;.tar.gz.asc&amp;quot;
    if out=$(gpg --status-fd 1 --verify &amp;quot;libevent-&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;VERSION&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;.tar.gz.asc&amp;quot; &amp;quot;libevent-&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;VERSION&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;.tar.gz&amp;quot; 2&amp;gt;/dev/null) &lt;span class="err"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
    echo &amp;quot;&lt;span class="nv"&gt;$out&lt;/span&gt;&amp;quot; | grep -qs &amp;quot;^\[GNUPG:\] VALIDSIG&amp;quot;; then
        echo &amp;quot;&lt;span class="nv"&gt;$out&lt;/span&gt;&amp;quot; | egrep &amp;quot;GOODSIG|VALIDSIG&amp;quot;
        echo &amp;quot;Verified GPG signature for source...&amp;quot;
    else
        echo &amp;quot;&lt;span class="nv"&gt;$out&lt;/span&gt;&amp;quot; &amp;gt;&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;2
        echo &amp;quot;COULD NOT VERIFY PACKAGE SIGNATURE...&amp;quot;
        exit 1
    fi
fi

tar zxf libevent-&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;VERSION&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;.tar.gz -C &lt;span class="nv"&gt;$SRCDIR&lt;/span&gt;
cd &amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;SRCDIR&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/libevent-&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;VERSION&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot;

set +e # don&amp;#39;t bail out of bash script if ccache doesn&amp;#39;t exist
CCACHE=`which ccache`
if [ $? == &amp;quot;0&amp;quot; ]; then
    echo &amp;quot;Building with ccache: &lt;span class="nv"&gt;$CCACHE&lt;/span&gt;&amp;quot;
    CCACHE=&amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;CCACHE&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; &amp;quot;
else
    echo &amp;quot;Building without ccache&amp;quot;
    CCACHE=&amp;quot;&amp;quot;
fi
set -e # back to regular &amp;quot;bail out on error&amp;quot; mode

export ORIGINALPATH=&lt;span class="nv"&gt;$PATH&lt;/span&gt;

for ARCH in &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;ARCHS&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
do
    if [ &amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;ARCH&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot; == &amp;quot;i386&amp;quot; ] || [ &amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;ARCH&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot; == &amp;quot;x86_64&amp;quot; ];
    then
        PLATFORM=&amp;quot;iPhoneSimulator&amp;quot;
        EXTRA_CONFIG=&amp;quot;--host=&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;ARCH&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;-apple-darwin&amp;quot;
    else
        PLATFORM=&amp;quot;iPhoneOS&amp;quot;
        EXTRA_CONFIG=&amp;quot;--host=arm-apple-darwin&amp;quot;
    fi

    mkdir -p &amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;INTERDIR&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;PLATFORM&lt;/span&gt;&lt;span class="cp"&gt;}${&lt;/span&gt;&lt;span class="n"&gt;SDKVERSION&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;-&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;ARCH&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;.sdk&amp;quot;

    export PATH=&amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;DEVELOPER&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/Toolchains/XcodeDefault.xctoolchain/usr/bin/:&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;DEVELOPER&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/Platforms/&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;PLATFORM&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;.platform/Developer/usr/bin/:&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;DEVELOPER&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/Toolchains/XcodeDefault.xctoolchain/usr/bin:&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;DEVELOPER&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/usr/bin:&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;ORIGINALPATH&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot;
    export CC=&amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;CCACHE&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;`which gcc` -arch &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;ARCH&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; -miphoneos-version-min=&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;MINIOSVERSION&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot;

    ./configure --disable-shared --enable-static --disable-debug-mode &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;EXTRA_CONFIG&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; --disable-clock-gettime \
    --prefix=&amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;INTERDIR&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;PLATFORM&lt;/span&gt;&lt;span class="cp"&gt;}${&lt;/span&gt;&lt;span class="n"&gt;SDKVERSION&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;-&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;ARCH&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;.sdk&amp;quot; \
    LDFLAGS=&amp;quot;&lt;span class="nv"&gt;$LDFLAGS&lt;/span&gt; -L&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;OUTPUTDIR&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/lib&amp;quot; \
    CFLAGS=&amp;quot;&lt;span class="nv"&gt;$CFLAGS&lt;/span&gt; -Os -I&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;OUTPUTDIR&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/include -isysroot &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;DEVELOPER&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/Platforms/&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;PLATFORM&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;.platform/Developer/SDKs/&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;PLATFORM&lt;/span&gt;&lt;span class="cp"&gt;}${&lt;/span&gt;&lt;span class="n"&gt;SDKVERSION&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;.sdk&amp;quot; \
    CPPFLAGS=&amp;quot;&lt;span class="nv"&gt;$CPPFLAGS&lt;/span&gt; -I&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;OUTPUTDIR&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/include -isysroot &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;DEVELOPER&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/Platforms/&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;PLATFORM&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;.platform/Developer/SDKs/&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;PLATFORM&lt;/span&gt;&lt;span class="cp"&gt;}${&lt;/span&gt;&lt;span class="n"&gt;SDKVERSION&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;.sdk&amp;quot;

    # Build the application and install it to the fake SDK intermediary dir
    # we have set up. Make sure to clean up afterward because we will re-use
    # this source tree to cross-compile other targets.
    make -j$(sysctl hw.ncpu | awk &amp;#39;{print $2}&amp;#39;)
    make install
    make clean
done

########################################

echo &amp;quot;Build library...&amp;quot;

# These are the libs that comprise libevent. `libevent_openssl` and `libevent_pthreads`
# may not be compiled if those dependencies aren&amp;#39;t available.
OUTPUT_LIBS=&amp;quot;libevent.a libevent_core.a libevent_extra.a libevent_openssl.a libevent_pthreads.a&amp;quot;
for OUTPUT_LIB in &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;OUTPUT_LIBS&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;; do
    INPUT_LIBS=&amp;quot;&amp;quot;
    for ARCH in &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;ARCHS&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;; do
        if [ &amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;ARCH&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot; == &amp;quot;i386&amp;quot; ] || [ &amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;ARCH&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot; == &amp;quot;x86_64&amp;quot; ];
        then
            PLATFORM=&amp;quot;iPhoneSimulator&amp;quot;
        else
            PLATFORM=&amp;quot;iPhoneOS&amp;quot;
        fi
        INPUT_ARCH_LIB=&amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;INTERDIR&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;PLATFORM&lt;/span&gt;&lt;span class="cp"&gt;}${&lt;/span&gt;&lt;span class="n"&gt;SDKVERSION&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;-&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;ARCH&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;.sdk/lib/&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;OUTPUT_LIB&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot;
        if [ -e &lt;span class="nv"&gt;$INPUT_ARCH_LIB&lt;/span&gt; ]; then
            INPUT_LIBS=&amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;INPUT_LIBS&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;INPUT_ARCH_LIB&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot;
        fi
    done
    # Combine the three architectures into a universal library.
    if [ -n &amp;quot;&lt;span class="nv"&gt;$INPUT_LIBS&lt;/span&gt;&amp;quot;  ]; then
        lipo -create &lt;span class="nv"&gt;$INPUT_LIBS&lt;/span&gt; \
        -output &amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;OUTPUTDIR&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/lib/&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;OUTPUT_LIB&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot;
    else
        echo &amp;quot;&lt;span class="nv"&gt;$OUTPUT_LIB&lt;/span&gt; does not exist, skipping (are the dependencies installed?)&amp;quot;
    fi
done

for ARCH in &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;ARCHS&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;; do
    if [ &amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;ARCH&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot; == &amp;quot;i386&amp;quot; ] || [ &amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;ARCH&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot; == &amp;quot;x86_64&amp;quot; ];
    then
        PLATFORM=&amp;quot;iPhoneSimulator&amp;quot;
    else
        PLATFORM=&amp;quot;iPhoneOS&amp;quot;
    fi
    cp -R &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;INTERDIR&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;PLATFORM&lt;/span&gt;&lt;span class="cp"&gt;}${&lt;/span&gt;&lt;span class="n"&gt;SDKVERSION&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;-&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;ARCH&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;.sdk/include/* &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;OUTPUTDIR&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/include/
    if [ $? == &amp;quot;0&amp;quot; ]; then
        # We only need to copy the headers over once. (So break out of forloop
        # once we get first success.)
        break
    fi
done


####################

echo &amp;quot;Building done.&amp;quot;
echo &amp;quot;Cleaning up...&amp;quot;
rm -fr &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;INTERDIR&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
rm -fr &amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;SRCDIR&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/libevent-&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;VERSION&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot;
echo &amp;quot;Done.&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;资料地址&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/coturn/coturn"&gt;Coturn地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/szuwest/libevent_ios"&gt;libevent_ios编译脚本&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Sun, 02 Jul 2017 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2017-07-02:coturnzai-iosduan-ying-yong-he-libeventde-bian-yi.html</guid><category>iOS Coturn libevent</category></item><item><title>2017年</title><link>https://szuwest.github.io/2017nian.html</link><description>&lt;h1&gt;2017年&lt;/h1&gt;
&lt;p&gt;中国人主要过农历年，农历年过后才真正算新的一年。2017年对于我自己来说有点不一样。2017年我压力会很大，也很焦虑。&lt;/p&gt;
&lt;p&gt;2017年我工作即将满7年，想不到这么快就7年了。自己仍然没有什么成就，当然焦虑了。并且已经成家，生活压力会更大。还有考虑以后孩子之类，有时候会觉得自己没有准备好，可是自己已经不年轻了。&lt;/p&gt;
&lt;p&gt;2017年我自己也给自己制定了一些目标，目标不多。但是实现起来比较难，但也无法让步。&lt;/p&gt;
&lt;p&gt;2017年有一件事自己很想做，就是自己做一个产品，这个产品专门解决一个事情。我很想做好它，从后台，到客户端，到产品规划，一条龙。算是锻炼自己。&lt;/p&gt;
&lt;p&gt;2017年我希望工作上有所突破，虽然有很多变数和不确定性。不管怎样，我做事会更加努力，我要对自己负责，对别人负责。&lt;/p&gt;
&lt;p&gt;2017年，我认识到也许自己无法达到自己理想的那种高度，但是我还是很想突破自己，不愿意就这么认命。&lt;/p&gt;
&lt;p&gt;加油&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Sat, 04 Feb 2017 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2017-02-04:2017nian.html</guid><category>2017</category></item><item><title>2016年总结</title><link>https://szuwest.github.io/2016nian-zong-jie.html</link><description>&lt;h2&gt;2016年总结&lt;/h2&gt;
&lt;h3&gt;生活&lt;/h3&gt;
&lt;p&gt;今年最大的事情应该是领证结婚了，虽然暂时没有摆酒，但是拍婚纱照，度蜜月这些都做了。房子还没买，一直纠结在深圳买还是东莞买，但是最大的问题还是没有钱。房子是个大问题，我们这一代很多人都基本被房子给绑死了。这也许是我们这代人的悲哀。&lt;/p&gt;
&lt;p&gt;人结婚以后心态变了很多，很多事情不能只想自己，也不能想眼前。很多不好的习惯（例如晚睡），不成熟的想法都得摒弃。考虑更多的是家庭，老婆。今年的开销也变得大很多，挣钱的压力也大。婚姻是两个家庭的事情，不只是两个人的事情，这个结婚后就很明显了。我的家庭并不是很好，并且我妈那个病是个负担，每到年底就会发作，这对我和我老婆影响很大，对我们整个家庭都影响很大。可这就是我的家庭，必须得面对，还要安抚我老婆的情绪，我也得担起这个责任。这就是生活。&lt;/p&gt;
&lt;h3&gt;工作&lt;/h3&gt;
&lt;p&gt;这一年的工作并不顺利，可以说比较失败。下半年有尝试看外面的一些机会，但是一直不顺利，没有拿到好的结果。这一度让我很焦虑。这也让我认识到自己的不足。&lt;/p&gt;
&lt;p&gt;一年来，项目很不顺利。下半年，来了新老板，然后把我们老大给挤走了，虽然最终他还是留在XL，但是已经跟我们的项目没关系了。他一手拉扯大的孩子这样就被放手了。这些对我们底层的员工来说，也没有太大影响，我们也改变不了任何东西。不过原来的老大走了对我的影响比较大，因为他算是我的伯乐，我个人也比较喜欢他，希望能跟他一起共事，做一个好产品。他走后，部门招了很多新人，然后工作很组织关系很混乱。我也没有再被新领导重视，我也没有太多表现的机会。iOS的主管本身就是一个混日子的人，这样让我自己很不爽，但是我也没有办法，所以有段时间想离开，但是没有好机会。&lt;/p&gt;
&lt;p&gt;现在我们要搬离母公司，去进入一个子公司。这也许是个新机会，谁知道。一开始我自己很不愿意，因为福利差了。现在我想这或许是个机会，变化也许是好的，不能再像这样。如果有机会离开分配到别的项目也不错，新的开始。&lt;/p&gt;
&lt;p&gt;这一年技术没有太多长进，主要是项目一直在变动，下半年写代码没那么多了。不过我趁年底这几个月的空闲我也补了一些，解决以前一些以前没解决好的难题。不过我自己思想也成熟稳定了一些，所以我接下来应该要好好做事，并且坚持学习一些新知识，补自己的一些短板，好好提高自己。&lt;/p&gt;
&lt;h3&gt;投资&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;摒弃突然暴富，投机取巧的幻想。踏实只做自己能力圈内的事，赚自己能赚的钱。这是我一年的来的心得。一年来，A股今年终于把以前的亏损慢慢补回来了。港股还是亏损状态，而且还不知道什么时候会好转。美股终于有找到一点点感觉，开始又回到了起跑线。另外得益于人民币贬值，港元和美元相对升值，所以我的外币资产也算减少亏损。&lt;/p&gt;
&lt;p&gt;想想这两年，炒股也算达到最初的学习的目的了。唯一还比较遗憾的是港股还有亏损。我算真正体味到为什么炒股并不是真的适合每个人，而且觉大部分人很会亏钱。不过经过这些经历，我想我应该比较难亏钱了，自己还是有一点信心。这两年炒股多多少少确实对我的工作还是造成了一点影响，因为工作中还是忍不住看盘，还是股市波动的时候还是有一点影响。不过现在影响已经很小很小了。我觉得还是有必要做一点投资，长远来看。投资也开阔了自己的眼界，原来资本市场是这样的，也在雪球上学到很多东西，了解到一些社会投资精英的生活，这也算是一种收获。我只希望以后能不亏损和保持一定的年收益率就行了。我也相信这个以后一定能实现。我自己的主要精力还是放到工作上，还有我自己对实业更感兴趣，以后也不会走上职业投资的道路。&lt;/p&gt;
&lt;h3&gt;总结&lt;/h3&gt;
&lt;p&gt;回想这一年，上半年的事情已经不太记得了。看到别的朋友今年都有很大进步和改善，看看自己最近时间面试受到的挫折，感觉自己跟他们的差距越来越远了。他们的道路走得很顺，而自己却没有多大长进。这也许有很多原因，人家的起步就比自己好很多，人家也付出了很多，现在才走得这么好。别人再好也是别人的，你不知道别人付出了多少，羡慕没什么用。所以最重要的是自己扎扎实实做好自己该做的事。我也不会认输，人生很长，我们不能那么短视。就算不能比别人好，也要做自己，活出自己的精彩，活出自己的人生。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Sat, 17 Dec 2016 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2016-12-17:2016nian-zong-jie.html</guid><category>总结</category></item><item><title>iOS后台下载和断点续传</title><link>https://szuwest.github.io/ioshou-tai-xia-zai-he-duan-dian-xu-chuan.html</link><description>&lt;h2&gt;iOS后台下载和断点续传&lt;/h2&gt;
&lt;p&gt;最近在重新整理我们项目里的iOS的后台下载，因为原来方法（ASIHTTPRequest方式）无法做到后台一直下载，这个问题被我老婆吐槽了好几次。所以我重新整理一下，用NSURLSession来下载，达到了比较好的效果。现在总结自己的一些经验。&lt;/p&gt;
&lt;h3&gt;背景&lt;/h3&gt;
&lt;p&gt;项目最开始我们是用了NSURLSession来做后台下载的。但是有两个严重的问题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有时候偶现的不能下载，就是一启动下载就失败。一旦出现这种情况，无法恢复，怎么样都无法下载，所有任务都一样&lt;/li&gt;
&lt;li&gt;下载速度很慢，只有几十到几百KB/S，网络正常，Android端同一个文件下载速度飞快&lt;/li&gt;
&lt;li&gt;程序杀掉之后无法重新继续下载&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;按道理这些问题都不应该出现，可是我们的应用就是出现了这些问题，而且难以调试，同事调试了很久都没有结果。最后我也没认真研究，但是我发现ASIHTTPRequest可以很好地解决上面的几个问题，然后我就在原来的基础上加了ASIHTTPRequest的下载方式。&lt;/p&gt;
&lt;p&gt;ASIHTTPRequest方式的下载不错，速度很快，也能很好的断点续传，但是跟Android的还是慢了一点，不过我觉得这可能是系统不同的原因。ASIHTTPRequest还有一个比较致命的弱点，就是不能后台下载，这对于下载大文件来说是必须的。在iOS平台要做后台下载，最好的方式还是使用NSURLSession。&lt;/p&gt;
&lt;p&gt;所以我决定好好研究一下NSURLSession，并且改用这种方式。&lt;/p&gt;
&lt;h3&gt;NSURLSession后台下载&lt;/h3&gt;
&lt;p&gt;实际上NSURLSession的后台下载真的很强大，苹果真做了件很好的事。当你创建一个后台下载任务的时候，实际上你就把这个下载交给系统来接管了。所以即使你把APP杀掉，下载也不会停止，很牛逼。而且如果出现手机网络变化之类的，系统会在后台帮你重试，当网络又正常了它会继续下载。所有估计一旦你启动了后台下载任务，要么下载完，要么你手动取消，要么服务器那边出错，不然这个下载不会停止。&lt;/p&gt;
&lt;p&gt;虽然NSURLSession那么强，但是要做一个体验比较好的下载器还需要注意很多地方。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;必须是支持后台下载的NSURLSessionConfiguration&lt;/li&gt;
&lt;li&gt;必须用这个 (NSURLSession &lt;em&gt;)sessionWithConfiguration:(NSURLSessionConfiguration &lt;/em&gt;)configuration delegate:(nullable id &lt;NSURLSessionDelegate&gt;)delegate delegateQueue:(nullable NSOperationQueue *)queue来创建NSURLSession，并且delegate不能为空。NSURLSession最好全局唯一&lt;/li&gt;
&lt;li&gt;必须实现delegate几个重要的方法&lt;/li&gt;
&lt;li&gt;最好实现 APPDelegate中的- (void)application:(UIApplication &lt;em&gt;)application handleEventsForBackgroundURLSession:(NSString &lt;/em&gt;)identifier completionHandler:(void (^)())completionHandler方法，并且把completionHandler保存起来适时调用&lt;/li&gt;
&lt;li&gt;在手动暂停或者失败后，要把resumeData保存起来，最好是保存的本地，重新启动下载是需要这个来继续下载&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;还有需要注意的是 在 - (void)URLSession:(NSURLSession &lt;em&gt;)session
      downloadTask:(NSURLSessionDownloadTask &lt;/em&gt;)downloadTask
didFinishDownloadingToURL:(NSURL *)location 这个回调方法里，必须location指向的临时文件移动到你的沙盒目录中，因为这个方法一旦返回后，就会去删除这个临时文件。&lt;/p&gt;
&lt;p&gt;根据上面这些，我自己做了一个下载任务管理器，可以创建多个任务，并可以配置多个任务并行下载。当一个下载任务完成后便会启动下一个等待中的任务。这样的话，你就可以创建完下载任务后，就关闭程序，该干啥就干啥去。下载完了它会发本地通知。&lt;/p&gt;
&lt;p&gt;不过这个下载器在公司的项目里用，牵涉比较多，还支持ASIHTTPRequest下载，所以暂时没法开源。不过有一个demo包含了核心的思想。&lt;/p&gt;
&lt;p&gt;demo在这里 &lt;a href="https://github.com/szuwest/BackgroundDownloadDemo"&gt;BackgroundDownloadDemo&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;参考资料：&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;1.&lt;a href="https://onevcat.com/2013/08/ios7-background-multitask/"&gt;WWDC 2013 Session笔记 - iOS7中的多任务&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2.&lt;a href="http://www.jianshu.com/p/b4edfa0b71d8#"&gt;基于iOS 10、realm封装的下载器（支持存储读取、断点续传、后台下载、杀死APP重启后的断点续传等功能）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;3.&lt;a href="http://www.jianshu.com/p/1211cf99dfc3"&gt;iOS使用NSURLSession进行下载（包括后台下载，断点下载）&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Thu, 08 Dec 2016 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2016-12-08:ioshou-tai-xia-zai-he-duan-dian-xu-chuan.html</guid><category>NSURLSession ASIHTTPRequest 后台下载</category></item><item><title>事件循环机制之于Android的Looper和iOS的NSRunLoop</title><link>https://szuwest.github.io/shi-jian-xun-huan-ji-zhi-zhi-yu-androidde-looperhe-iosde-nsrunloop.html</link><description>&lt;h2&gt;事件循环机制之于Android的Looper和iOS的NSRunLoop&lt;/h2&gt;
&lt;p&gt;Android和iOS同为手机操作系统，有很多相同之处。有很多设计几乎是一样的，统一种设计模式，不同的实现。例如事件模型，它大体逻辑是这样的：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;get_next_message&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nx"&gt;process_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nx"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;对于这样的一种模式, Android系统和iOS系统是一样的，只不过是不同的平台不同的实现方式。应该说很多平台或者框架都是采用这一种模式。Android系统对应的就是Looper机制，iOS对应的就是NSRunLoop机制。你看名字都是loop，这是它的核心。&lt;/p&gt;
&lt;p&gt;对于移动开发者来说，理解平台是怎么实现这个事件循环机制，或者叫消息机制，是很重要的。因为在你的开发工作当中，无时无刻不在用着这种机制。不理解它的机制，充其量也只能算个初级程序员，无法深入理解系统。如果我们能了解不同平台对这一机制的实现，可以加深理解，可以提高自己。我既做过Android开发，也研究过它Looper机制。现在做iOS开发都有一段时间了，最近开研究它的NSRunLoop机制。我发现他们整体的设计思想确实一致的，但是不同的平台却也有很多差异性。&lt;/p&gt;
&lt;h2&gt;共同的设计点&lt;/h2&gt;
&lt;p&gt;首先loop跟线程是一一对应的，这是基础。然后iOS或者Android都是一个应用一个进程（并非绝对），然后进程里有一个主线程。然后这个主线会绑定一个loop。这工作是有系统来完成的。这个loop一直在接收者系统的一些事件，或者用户产生的事件。如果没有事件或者处理完了事件，它就在等待中，等待别事件来临唤醒它处理。不管Android还是iOS，它们的更新界面操作必须在主线程中进行。所以我们在写代码的时候经常会出现将消息抛到主线程中来执行。&lt;/p&gt;
&lt;p&gt;对于子线程，它默认是没有loop的，当它执行完它的任务后，线程就结束了。这也符合我们大多数的场景。如果我们要让子线程也绑定一个loop呢？或者说我们什么情况下需要子线程运行一个loop。我们大部分情况其实都不需要额外创建一个loop，因为没有用到，所以很多人就不去了解。这也是不行的。对于有周期性人任务的情况，用loop是很好的选择。例如我们需要一个后台线程一直运行，然后我们会定期或不定期给它发送一些任务，用loop来实现时比较好的。&lt;/p&gt;
&lt;p&gt;线程默认没有loop，而且loop不能程序员自己手动调用构造函数创建，需要调用系统获取loop的方法。系统会把创建的loop跟当前的线程绑定在一起，存在一个全局的key-value的字典里，下次再获取当前线程的loop，就直接取出来用。&lt;/p&gt;
&lt;p&gt;获取到loop后，我们让它进入事件循环，即执行类似上面的loop()方法，这是一个死循环，除非外部停止掉这个循环。这个循环里面有一个重要的点，就是没有消息的时候，它是进入睡眠等待状态，有消息来时候，会把它唤醒并执行消息处理。这个消息循环机制Android和iOS的实现差别还是挺大的。下面我们说一下，如何建立一个loop循环，然后如何给它发消息和一些需要注意的东西&lt;/p&gt;
&lt;h2&gt;iOS的NSRunLoop&lt;/h2&gt;
&lt;p&gt;首先来看一下如何在iOS中创建一个loop并让它跑起来&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="c1"&gt;//创建并启动Thread&lt;/span&gt;
    &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;testThread&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;NSThread&lt;/span&gt; &lt;span class="n"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;initWithTarget&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt; &lt;span class="n"&gt;selector&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="k"&gt;@selector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;onTestRunLoop&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;testThread&lt;/span&gt; &lt;span class="n"&gt;setName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;TestRunLoop&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;testThread&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="c1"&gt;//Thread的入口方法&lt;/span&gt;
&lt;span class="k"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;onTestRunLoop:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;obj&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;NSLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;--%@--&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;NSThread&lt;/span&gt; &lt;span class="n"&gt;currentThread&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;NSRunLoop&lt;/span&gt; &lt;span class="n"&gt;currentRunLoop&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;addPort&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;NSMachPort&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;forMode&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;NSDefaultRunLoopMode&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;NSLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;***%@***&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,[&lt;/span&gt;&lt;span class="n"&gt;NSRunLoop&lt;/span&gt; &lt;span class="n"&gt;currentRunLoop&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;NSRunLoop&lt;/span&gt; &lt;span class="n"&gt;currentRunLoop&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;mode和source&lt;/h4&gt;
&lt;p&gt;上面最主要的代码是&lt;strong&gt;[[NSRunLoop currentRunLoop] addPort:[NSMachPort port] forMode:NSDefaultRunLoopMode]&lt;/strong&gt; 和 &lt;strong&gt;[[NSRunLoop currentRunLoop] run]&lt;/strong&gt;，currentRunLoop这个方法会检查当前线程有没有loop，没有的话，就会自动创建。NSMachPort是一个事件源source，NSDefaultRunLoopMode代表一个模式Mode。当把source和Mode都设置之后，开始调用run方法，进入循环。&lt;/p&gt;
&lt;p&gt;这里mode和source是必须的，否则NSRunLoop跑不起来。NSRunLoop必须运行在某一种mode中，mode可以切换，切换之前就会把之前的mode停掉。iOS系统定义了好几种mode，这个是它跟Android一个重要的不同点，可以说这个设计让它的效率比较高。例如主线程中，列表滑动的时候，NSRunLoop切换到TrackingRunLoopMode下，之前运行mode的source就停掉。这样里列表滑动起来就会很流畅。至于source，Port只是它的一种，属于Input Source，还有NSTimer也是source，属于Timer Source.&lt;/p&gt;
&lt;h4&gt;observer和autoreleasepool&lt;/h4&gt;
&lt;p&gt;除了source，还有一个observer机制，这是iOS的特色，Android的loop机制中没有这些。iOS系统在loop循环中定义了一些重要的事件，然后你可以监听这些相关事件。例如即将进入Loop，即将处理 Source，即将进入休眠，刚从休眠中唤醒 这些事件都会通知到相关的观察者。这个机制我们开发者很少用到，但是在iOS系统中却很重要。其中一个就是AutoReleasePool机制。&lt;/p&gt;
&lt;p&gt;我相信不少人在面试时会被问到NSRunLoop跟AutoReleasePool有什么关系，AutoReleasePool什么时候释放池里面的对象。我们第一反应很容易就认为是@autoreleasepool{}方法块执行之后。回答这个问题之前我们先看看别的。我们知道在iOS的main.m文件里一般是这样的：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;autoreleasepool&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;UIApplicationMain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;NSStringFromClass&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;AppDelegate&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;]));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;AutoReleasePool包含了UIApplicationMain()方法，UIApplicationMain()方法里建立了main runloop,然后一直在那里循环处理消息或者等待，如果你再该方法之后再加一些语句，是没有办法执行的。按照之前的说法，那岂不是AutoReleasePool一直不会释放它里面的对象？显然这是错的。但是要理解AutoReleasePool什么时候释放它里面的对象，还是需要先了解一下AutoReleasePool的实现机制。AutoReleasePool实际上是有AutoReleasePage来实现的，而AutoReleasePage有点类似于堆栈，有一个push和pop操作。苹果在主线程的runloop监听了几个事件，分别是即将进入Loop，准备进入休眠和即将退出Loop，在即将进入Loop时进行push一个哨兵对象（或者叫边界对象），在即将休眠时是pop哨兵对象操作，然后再次push操作，在即将退出Loop时pop操作。在push哨兵对象之后，程序运行会push很对autorelease对象到AutoReleasePage中，pop操作就把这些对象释放，一直找到哨兵对象也把它pop掉为止。&lt;/p&gt;
&lt;p&gt;所以每次runLoop进入休眠前AutoReleasePool就释放一次。AutoReleasePool堆栈式结构让它可以嵌套，互不影响。更新详细的AutoReleasePool资料可以查看最后的参考资料&lt;/p&gt;
&lt;h4&gt;给RunLoop发消息&lt;/h4&gt;
&lt;p&gt;建立了一个runloop，给它发消息做任务才是我们的目的所在。怎么在别的线程给我们建立的runloop发消息呢？最直接的方法是通过performSelector:onThread:withObject:waitUntilDone:方法.这个是NSObject的方法。这个方式需要持有Thread对象。当然也可以同RunLoop添加Port或者Timer的方式，然后持有Port或者Timer，这个种方式不是那么直接。如果需要跨进程发送消息，则需要Port，但除了系统间的进程，跨进程通信并不常用。&lt;/p&gt;
&lt;p&gt;现实的编程工作中，更常用的是往主线程的RunLoop发送消息。iOS系统提供了很多方式很方便我们操作。例如NSObject中就有performSelectorOnMainThread:withObject:waitUntilDone:方法，就是往MainRunLoop里发消息。还有dispatch_(a)syn(dispatch_get_main_queue(),block) GCD方法也是。同时还有很方便的获取mainThread和mainRunLoop的方法。&lt;/p&gt;
&lt;h4&gt;退出机制&lt;/h4&gt;
&lt;p&gt;runloop什么时候退出呢？从API文档来看，苹果貌似没有提供主动停止runloop的接口，但是在run的时候可以指定超时时间（runUntilDate: 和 runMode:beforeDate）。从底层代码来看，外部是可以主动调用停止的，然后还有就是没有source/timer/observer的话，runloop也会退出。&lt;/p&gt;
&lt;h4&gt;总结&lt;/h4&gt;
&lt;p&gt;NSRunLoop总体来说不简单，并且平时不太会用到。很多东西还是不太好理解。mode如何切换的？在一个线程中通过performSelector:onThread:withObject:waitUntilDone:向另外一个线程的runloop发送消息，是怎么发送过去的？还有source里又分很多种，observer在系统中还有那些应用等，还有很多东西可以挖掘。NSRunLoop 是基于 CFRunLoopRef 的封装，而CFRunLoopRef是开源的，最好的研究方式还是去阅读&lt;a href="https://opensource.apple.com/source/CF/CF-855.17/CFRunLoop.c"&gt;源码&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;参考资料&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://blog.ibireme.com/2015/05/18/runloop/"&gt;深入理解RunLoop&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[&lt;a href="http://www.jianshu.com/p/c0a550d2ac97"&gt;RunLoop已入门？不来应用一下？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.jianshu.com/p/929d855c5a5a"&gt;iOS runloop 学习笔记(二)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.sunnyxx.com/2014/10/15/behind-autorelease/"&gt;黑幕背后的Autorelease&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Android的Looper&lt;/h2&gt;
&lt;p&gt;跟iOS不同，Android的源码是开发的，你可以很方便的看到Looper的源码。实际上大家研究Looper机制都是阅读源码的。整体来讲，我觉得Android的事件循环机制比较简洁明了。我们看一下Android如何创建一个Looper并让它跑起来&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;LooperThread&lt;/span&gt; &lt;span class="n"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Handler&lt;/span&gt; &lt;span class="n"&gt;mHandler&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

   &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="n"&gt;Looper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;prepare&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

       &lt;span class="n"&gt;mHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Handler&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;handleMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Message&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="c1"&gt;// process incoming messages here&lt;/span&gt;
           &lt;span class="p"&gt;}&lt;/span&gt;
       &lt;span class="p"&gt;};&lt;/span&gt;
       &lt;span class="n"&gt;Looper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最主要的代码是&lt;strong&gt;Looper.prepare()&lt;/strong&gt; 和 &lt;strong&gt;Looper.loop()&lt;/strong&gt;，前一句的意思是创建一个Looper,并且将这个Looper和Thread存储到一个静态ThreadLocal变量中。注意如果当前线程已有Looper它会抛异常。后一句代码的作用就是进入一个死循环，不断的从MessageQueue中取出Message，然后拿到Handler，执行它的dispatchMessage方法。&lt;/p&gt;
&lt;h4&gt;Looper，MessageQueue，Handler，Message&lt;/h4&gt;
&lt;p&gt;消息循环机制里最重要的是Looper和MessageQueue。看源代码就可以知道，MessageQueue是作为Looper的一个成员变量而存在，当Looper实例化的时候，它也被初始化，并且当前的Thread对象也当做成员变量存起来。Looper.loop()方法很简单，核心代码就那么几句:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(;;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Message&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// might block&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// No message indicates that the message queue is quitting.&lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dispatchMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;......&lt;/span&gt;
   &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recycleUnchecked&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;所以Looper做的工作就是不断从MessageQueue总取出消息，然后调用Message的target，即Handler来处理（dispatchMessage）消息。取消息的时候，即queue.next()方法，如果当前queue里没有消息，它会在这里休眠等待，知道有消息过来。如果消息为空，就跳出循环返回了。重点在于MessageQueue，看它如何将消息发过来，又如何实现取消息的。&lt;/p&gt;
&lt;h4&gt;用Handler给Looper发消息&lt;/h4&gt;
&lt;p&gt;下面是通过mHandler给Looper发消息，mHandler是上面再LooperThread的run方法里创建的，并且实现了Handler的handleMessage方法。注意mHandler是通过没有参数的构造函数创建的，这样的话它会获取当前线程的Looper和Looper的MessageQueue当做成员变量保存起来。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;//发送消息&lt;/span&gt;
&lt;span class="n"&gt;mHandler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;obtain&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="n"&gt;mHandler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Runnable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="n"&gt;Override&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//TODO&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以给Handler发送Message或post一个Runable，我们也可以通过sendMessageDelayed方法发送延时消息，即指定消息多久后才执行。所有通过sendMessage或者它的重载方法发送的Message，最终都被传到上面的handleMessage中来处理。这样说来，Handler既是消息的发送者，也是消息的处理者，这样看起来好奇怪没有必要的样子。实际上不奇怪，你现在发出的消息，要下一个事件循环才会处理到，所以它的执行异步的。另外消息的执行是在Handler所绑定的那个Looper所在的线程，我们经常做的就是在子线程中调用在主线程Handler发送消息，这样就做到的线程切换。&lt;/p&gt;
&lt;h4&gt;Message&lt;/h4&gt;
&lt;p&gt;很早之前我想过一个问题，就是一个线程中我们可以创建多个Handler，每个Handler都有的它的handleMessage方法，我们怎么保证某个handler发消息不会发到别的handler的handleMessage中呢。看了源代码后发现这个问题很简单：每个Message发送出去前，会将发送它的那个Handler保存到一个叫target参数中，Looper中就使用这个target来处理消息。但是这个target参数向开发者隐藏的，我们不看源代码不知道它的存在。Message类中还有好几个这样的参数。例如我们通过Handler的post的Runable最终是封装在Message的callback参数中，还有一个when参数表明每个消息的执行时间，还有一个Bundle类型的data数据，还有一个next参数。没错，Message其实是一个单链表的节点数据结构，这一点的使用体现MessageQueue中，MessageQueue本身没有再实现队列，是借助Message是实现的。还有Message中还有一个消息缓存池，这就是大家都推崇使用Message.obtain()来获取消息的原因。还有Message中还有一个Messenger类型的参数replayTo，这个参数用来跨进程通信的,在Handler中实现了这个机制。所以Message和Handler还真是有不少东西，要了解更多请看源代码或者后面的参考资料。&lt;/p&gt;
&lt;h4&gt;MessageQueue和垃圾回收&lt;/h4&gt;
&lt;p&gt;MessageQueue算是这个机制的核心，因为消息都是通过它的enqueueMessage传进来，通过它的next方法取消息或者block等待。他还包含了一些native方法，这些方法就是对应了c++层的Looper,MessageQueue，这又是一个很深的知识点了。&lt;/p&gt;
&lt;p&gt;enqueueMessage方法不算复杂，主要是对Message参数检查和加入队列，最终调用nativeWake方法，通知底层列表有变化。而next方法，则比较复杂，它有一个for死循环，并调用了nativePollOnce方法进行阻塞等待。当被唤醒之后，它从队列里找消息，找到了需要处理的消息就返回，没有找到的话，处理IdleHandler，处理完进行下一次循环。这里的IdleHandler很有意思，我开始不知道是啥，后来看到资料说我们的主线程ActivityThread就实现了IdleHandler，在里面做垃圾回收工作。这恰恰是跟iOS的RunLoop里面的Observer机制一样。都是在进行两次休眠之前进行一次垃圾回收，真是异曲同工啊！&lt;/p&gt;
&lt;h4&gt;总结&lt;/h4&gt;
&lt;p&gt;Android的Looper机制说简单简单，说复杂复杂，但是好处是我们可以看到所有源码。我这里只讨论了上层我们常用的接口和机制，实际上有很多东西还值得我们研究。例如MessageQueue还可以放Barrier, MessageQueue相关的native方法涉及到的C++层的Looper机制，Handler和Messager是如何实现跨进程通信的，这些都是很高级的知识，以后有机会研究研究。&lt;/p&gt;
&lt;h4&gt;参考资料&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://my.oschina.net/youranhongcha/blog/492591"&gt;聊一聊Android的消息机制&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.cnblogs.com/angeldevil/p/3340644.html"&gt;Android消息处理机制(Handler、Looper、MessageQueue与Message)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.csdn.net/lmj623565791/article/details/47017485"&gt; Android 基于Message的进程间通信 Messenger完全解析&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;iOS和Android同为当今最流行的移动操作系统，在很多系统设计方面都是非常像。或许说他们彼此借鉴，技术本来就是这样样子。消息循环机制本来就是一种设计模式，只是Android和iOS根据自己的平台做了一套实现。通过对比学习，自己收获很多，但是我也感觉自己还不够深入，现在只是学到点皮毛而已。继续努力。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Sun, 04 Dec 2016 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2016-12-04:shi-jian-xun-huan-ji-zhi-zhi-yu-androidde-looperhe-iosde-nsrunloop.html</guid><category>Android iOS Looper NSRunLoop</category></item><item><title>iOS直接上传系统照片和视频（ALAsset）</title><link>https://szuwest.github.io/ioszhi-jie-shang-chuan-xi-tong-zhao-pian-he-shi-pin-alasset.html</link><description>&lt;h2&gt;iOS直接上传系统照片和视频（ALAsset）&lt;/h2&gt;
&lt;p&gt;我之前有一篇文章里讲过上传系统照片和视频的事（&lt;a href="http://szuwest.github.io/iosxi-tong-xiang-ce-shang-chuan-bu-de-bu-shuo-de-na-xie-shi-er.html"&gt;iOS系统相册上传不得不说的那些事儿&lt;/a&gt;），需要将ALAsset从系统相册里导出到沙盒文件里，然后再将这个文件上传。这里需要无端端写一次文件的时间就不说了，最要命的是还要占据额外的磁盘空间。我们的用户一般要备份相片视频的时候，往往是手机空间不足的时候。这个时候存储空间很紧张，你备份还需要额外的空间。如果一个视频很大，例如2G，那么手机上需要有空闲的2G空间才能导出视频，才能备份。真是硬伤。&lt;/p&gt;
&lt;p&gt;这个问题一直在我心头，卡了我很久，之前我有网上找解决方法，没有找到，很多都是说将ALAsset导出文件到沙盒的事。我自己也有想过要怎么解决。我想过从ALAsset中读取一段一段的NSData数据，然后分别将这些数据上传。这样也许是可以的，但貌似需要服务器那边能将这些包组合起来。另外客户端这些做起来也挺复杂。还有一种方法是我不使用AFN库，自己直接用NSURLConnection来写，跟服务器建立连接后不断的从ALAsset中读取数据写入跟服务器建立的连接。这个是参考Java的写法。可是我又不知从何动手。并且之前都很忙，没有时间想这么多。&lt;/p&gt;
&lt;p&gt;最近我比较闲了，我想正好有时间来解决这个问题。这是我心中的一块石头，我要把它拿掉。&lt;/p&gt;
&lt;p&gt;这次我直接在github上找，说不定能找到一些有用的代码。果真让我找到了 &lt;a href="https://github.com/formal-method/FMAssetStream"&gt;FMAssetStream&lt;/a&gt;这个库,这个库的做法很简单，定义了一个子类来扩展&lt;strong&gt;NSInputStream&lt;/strong&gt;，重载了一个最重要的方法 :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSInteger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt; &lt;span class="n"&gt;maxLength&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSUInteger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;NSUInteger&lt;/span&gt; &lt;span class="n"&gt;bytesRead&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assetRepresentation&lt;/span&gt; &lt;span class="n"&gt;getBytes&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt; &lt;span class="n"&gt;fromOffset&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;read&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;bytesRead&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// Update stream status when it&amp;#39;s consumed&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;streamStatus&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;NSStreamStatusAtEnd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;progressDelegate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;progressDelegate&lt;/span&gt; &lt;span class="n"&gt;progressBytes&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt; &lt;span class="n"&gt;totalBytes&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;bytesRead&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个方法做的事情很简单，就是读取一定长度的数据到buffer里。而这个buffer里数据就是上传文件的时候一次读取并写入的数据。&lt;strong&gt;我怎么就没有想到扩展NSInputStream类这种做法呢&lt;/strong&gt;，我心里大骂自己，这很自然的一种做法呀，理应就该这么做的。上传文件一般都是用流，文件流是系统提供的，但是我们自己也可以扩展它来处理特别的情况呀。而且我看过AFN库的源代码，它也是扩展了NSInputStream来做多部分数据上传。&lt;/p&gt;
&lt;p&gt;知道了扩展NSInputStream来从ALAsset中读取数据，还有一个问题需要注意，就是断点续传。关于断点续传我也写过一篇文章&lt;a href="http://szuwest.github.io/iosshang-chuan-wen-jian-zhi-chi-duan-dian-xu-chuan.html"&gt;iOS上传文件支持断点续传&lt;/a&gt;。然而FMAssetStream这个库写得很简单，没有支持断点续传，它也没有集成AFN。我想应该也有人做过这些事情，如果没有，那再自己写。&lt;/p&gt;
&lt;p&gt;果然我找到一个更加完善的库&lt;a href="https://github.com/pavelosipov/POSInputStreamLibrary"&gt;POSInputStreamLibrary&lt;/a&gt;，这个库既支持了断点续传，而且还可以很方便的跟AFN一起结合使用。这正是我要找的库，并且这个库更加完善和可配置，代码也写得很好。&lt;/p&gt;
&lt;p&gt;我最终使用了这个库，改完相关代码之后，上传文件起来飞快。感谢这个库的作者。我心中的横了很久的一块石头终于落地。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Thu, 01 Dec 2016 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2016-12-01:ioszhi-jie-shang-chuan-xi-tong-zhao-pian-he-shi-pin-alasset.html</guid><category>上传 ALAsset NSInputStream</category></item><item><title>iOS应用2017年强制应用HTTPS问题</title><link>https://szuwest.github.io/iosying-yong-2017nian-qiang-zhi-ying-yong-httpswen-ti.html</link><description>&lt;h2&gt;iOS应用2017年使用HTTPS问题&lt;/h2&gt;
&lt;p&gt;昨天一个朋友发了一篇介绍HTTPS方案文章给我看，文章提到2017年苹果强制所有APP使用HTTPS协议，问我是不是真的，还是说那只是一篇软文。他也很担心，因为他的APP不是使用HTTPS协议。&lt;/p&gt;
&lt;p&gt;其实应该说是这样：从2017年1月1日起，苹果强制&lt;strong&gt;新提交&lt;/strong&gt;的APP使用HTTPS协议。这里要强调&lt;strong&gt;新提交&lt;/strong&gt;，也就是说已经上线了的APP不受影响，新提交的APP或新版本提交才受影响。虽说强制，但是还是有方法不使用HTTPS协议的。&lt;/p&gt;
&lt;p&gt;我查了下，现在的资料有提到3种方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;1是APP里有一个配置开关NSAllowsArbitraryLoads，打开这个开关，所有网络请求都可以使用HTTP。现在所有没有用HTTPS协议的都是这么干的。这个开关现在用是没有问题的，但是2017年后苹果就不希望你这么用了。你再用的话，需要说明原因，而且理由不充分的话苹果有可能拒绝通过你的APP。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2是增加域名白名单（NSExceptionDomains），访问白名单之内的网站请求可以是HTTP请求。这种做法也要说明理由，苹果认为你的理由不充分仍然有可能拒绝通过你的APP&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当然还有一种方案，是在iOS10系统新加的属性NSAllowsArbitraryLoadsInWebContent，专门针对浏览器访问的开关。设想一个浏览器应用，用户可以输入任务网址，这个网址能不能支持HTTPS协议，没人知道。所以就有这么一个开关，打开之后，浏览器的访问就不受HTTPS限制。但是不好的消息是，这个浏览器必须是WKWebView，而不能是UIWebView(截止2016.10.18前，查到资料是这样的，但是不排除以后苹果会对UIWebView也可是使用这个属性)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;现在大家都担心2017年后该怎么支持HTTPS。我觉得大公司的话应该尽早全部支持HTTPS，小公司的话可以考虑使用上述方案。发挥聪明才智，给一些理由糊弄苹果让你的APP不支持HTTPS。我觉得针对中国的国情，苹果有可能会对中国的APP采用HTTPS审核宽松些，但也很难说。&lt;/p&gt;
&lt;p&gt;参考资料：&lt;/p&gt;
&lt;p&gt;&lt;a href="https://onevcat.com/2016/06/ios-10-ats/"&gt;关于 iOS 10 中 ATS 的问题&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://swiftcafe.io/2016/09/20/ats/"&gt;iOS 10 与 ATS - 更加安全的机制&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Tue, 18 Oct 2016 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2016-10-18:iosying-yong-2017nian-qiang-zhi-ying-yong-httpswen-ti.html</guid><category>HTTPS 2017 iOS10</category></item><item><title>iOS上传文件支持断点续传</title><link>https://szuwest.github.io/iosshang-chuan-wen-jian-zhi-chi-duan-dian-xu-chuan.html</link><description>&lt;h2&gt;iOS上传文件支持断点续传&lt;/h2&gt;
&lt;p&gt;在挺久之前我写过一篇文章里提到上传文件的断点续传的问题，我没有找到好的方法。以前我采用的方式是用&lt;strong&gt;NSFileHandl&lt;/strong&gt;的方法seekToFileOffset，移到已经文件已经上传了的部分，然后采用readDataToEndOfFile读取剩下部分到内存中NSData。但是这个方案问题是，如果文件很大，需读取的NSData很大，内存就会爆掉。所以最终没有采用这个方案。&lt;/p&gt;
&lt;p&gt;最近我们来个新同事，技术能力很不错。我让他去研究一下这个问题。开始他找到的方案跟我之前的那个是一样的，我说这个我之前有考虑过，不能采用。然后他继续研究，后来发现了原来&lt;strong&gt;NSInputStream&lt;/strong&gt;有相关按offset读取文件的接口。不，正确来说是&lt;strong&gt;NSStream的&lt;/strong&gt;接口，而且有点隐蔽性质的。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BOOL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;setProperty&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;property&lt;/span&gt; &lt;span class="n"&gt;forKey&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSStreamPropertyKey&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;NSStreamFileCurrentOffsetKey&lt;/span&gt;
&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;NSNumber&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt; &lt;span class="n"&gt;containing&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="n"&gt;absolute&lt;/span&gt; &lt;span class="n"&gt;offset&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;只要对NSInputStream指定它的NSStreamFileCurrentOffsetKey的值为你想要的offset，文件在读取的时候就会从这个offset开始读取。&lt;/p&gt;
&lt;p&gt;有了这个API，用AFN来支持上传的断点续传，也就很容易了。不过要支持这个时候AFN的progress就是需要上传部分的progress。要展示整个文件的progress的话，需要再转化一下。&lt;/p&gt;
&lt;p&gt;现在断点续传的问题已解决，就还剩下 看不导出系统相册里的视频文件，直接读取上传这个问题没有解决了。看看什么时候能把这个问题也解决掉^_^&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Fri, 30 Sep 2016 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2016-09-30:iosshang-chuan-wen-jian-zhi-chi-duan-dian-xu-chuan.html</guid><category>上传 断点续传 NSInputStream</category></item><item><title>升级Xcode8后Jenkins打包问题</title><link>https://szuwest.github.io/sheng-ji-xcode8hou-jenkinsda-bao-wen-ti.html</link><description>&lt;h2&gt;升级Xcode8后Jenkins打包问题&lt;/h2&gt;
&lt;p&gt;上次说升级Xcode8之后，Jenkins自动打包就不行了，今天终于弄好了。前前后后话的时间有一天的时间才搞好，不容易。尝试了30多次才成功了，说多了都是泪。。现在记录一下。&lt;/p&gt;
&lt;h3&gt;我们的需求&lt;/h3&gt;
&lt;p&gt;说一下我们的需求。我们开发人员采用的是正式签名，正式的BundleID，但是我们Jenkins自动打包出来的是企业版，用的是企业版BundleID。代码是同一份，但是Jenkins打包企业版时时要先修改BundleID和相关版本号之类的。在Xcode7时代，我已经将Jenkins配置好，可以正常打出企业版的安装包。但是升级到Xcode8之后，Jenkins打包会报错，即原来的配置已经不能打出企业包来了。&lt;/p&gt;
&lt;h3&gt;解决方法&lt;/h3&gt;
&lt;p&gt;先说不能打包的原因，主要是签名方式冲突。Jenkins的配置是指定签名，而我们Xcode8采用的是自动签名。我们开发时采用自动签名，而且打企业版安装采用的签名文件跟我们开发时的签名文件时不一样的。所以Jenkins打包肯定得采用手动签名方式。&lt;/p&gt;
&lt;p&gt;报错如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;xxxxx&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="n"&gt;conflicting&lt;/span&gt; &lt;span class="n"&gt;provisioning&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;xxxxx&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;automatically&lt;/span&gt; &lt;span class="kt"&gt;signed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;but&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="n"&gt;signing&lt;/span&gt; &lt;span class="n"&gt;identity&lt;/span&gt; &lt;span class="n"&gt;xxxxxxxxxxxxx&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="n"&gt;been&lt;/span&gt; &lt;span class="n"&gt;manually&lt;/span&gt; &lt;span class="n"&gt;specified&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; 
&lt;span class="n"&gt;Set&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="n"&gt;signing&lt;/span&gt; &lt;span class="n"&gt;identity&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;iPhone Developer&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt; &lt;span class="n"&gt;editor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;manual&lt;/span&gt; &lt;span class="n"&gt;signing&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;project&lt;/span&gt; &lt;span class="n"&gt;editor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;所以解决方法也很直接，就是不采用自动签名。可是我找遍了国内外网上资料，没有人提供 自动关闭 自动签名 的方法。倒是有人在苹果的网站上提问如何关闭自动签名。我在国内一些网站上也有一些人提到这个问题，其中有人用 bashsell 的sed 文本替换命令来修改project.pbxproj里面的内容。&lt;/p&gt;
&lt;p&gt;总之我的方向就是关闭自动打包，修改一些配置，然后让它可以打包。说起来简单，自动签名方式怎么关闭，需要改哪些配置，我不知道，只能摸索和不断的尝试。&lt;/p&gt;
&lt;p&gt;一开始我尝试按照网上的一个列子来关闭自动签名方式。它是采用 sed 命令。由于我本身对bash shell 也不是很熟悉，试了好多次都没有成功。而且到后面我发现要关闭自动签名，只将 ProvisioningStyle 改为 Manual是不够的。我自己手动的去关闭和开启自动签名，看看project.pbxproj到底哪些参数改变了，然后采用我比较熟悉的PlistBuddy命令，写了个脚本去改变这些值，来达到关闭自动签名的效果。&lt;/p&gt;
&lt;p&gt;最终我写出来的脚本大概是这样的：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;#修改ProvisioningStyle 
/usr/libexec/PlistBuddy -c “Set :objects:574F440C1AEE5EA3003F9BB5:attributes:TargetAttributes:574F44131AEE5EA3003F9BB5:ProvisioningStyle Manual”  &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;WORKSPACE&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/xxxxx/xxxxx.xcodeproj/project.pbxproj

#修改Distribution签名配置
/usr/libexec/PlistBuddy -c “Set :objects:2B888A201AFB4C3F005E1E12:buildSettings:CODE_SIGN_IDENTITY[sdk=iphoneos*] ‘xxxxxxxxxxxxxx’”  &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;WORKSPACE&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/xxxxx/xxxxx.xcodeproj/project.pbxproj

/usr/libexec/PlistBuddy -c “Set :objects:2B888A201AFB4C3F005E1E12:buildSettings:PROVISIONING_PROFILE  &amp;#39;xxxxxxxxxxxx&amp;#39;”  &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;WORKSPACE&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/xxxxx/xxxxx.xcodeproj/project.pbxproj

/usr/libexec/PlistBuddy -c “Set :objects:2B888A201AFB4C3F005E1E12:buildSettings:PROVISIONING_PROFILE_SPECIFIER xxxxxxxxxxxx”  &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;WORKSPACE&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/xxxxx/xxxxx.xcodeproj/project.pbxproj

#修改Debug签名配置
/usr/libexec/PlistBuddy -c “Set :objects:574F443B1AEE5EA4003F9BB5:buildSettings:CODE_SIGN_IDENTITY[sdk=iphoneos*] ‘iPhone Distribution’”  &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;WORKSPACE&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/xxxxx/xxxxx.xcodeproj/project.pbxproj

/usr/libexec/PlistBuddy -c “Set :objects:574F443B1AEE5EA4003F9BB5:buildSettings:PROVISIONING_PROFILE  &amp;#39;xxxxxxxxxxxx&amp;#39;”  &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;WORKSPACE&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/xxxxx/xxxxx.xcodeproj/project.pbxproj

/usr/libexec/PlistBuddy -c “Set :objects:574F443B1AEE5EA4003F9BB5:buildSettings:PROVISIONING_PROFILE_SPECIFIER xxxxxxxxxxxx”  &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;WORKSPACE&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/xxxxx/xxxxx.xcodeproj/project.pbxproj

#修改Release签名配置
/usr/libexec/PlistBuddy -c “Set :objects:574F443C1AEE5EA4003F9BB5:buildSettings:CODE_SIGN_IDENTITY[sdk=iphoneos*] ‘iPhone Distribution’”  &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;WORKSPACE&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/xxxxx/xxxxx.xcodeproj/project.pbxproj

/usr/libexec/PlistBuddy -c “Set :objects:574F443C1AEE5EA4003F9BB5:buildSettings:PROVISIONING_PROFILE  &amp;#39;xxxxxxxxxxxx&amp;#39;”  &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;WORKSPACE&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/xxxxx/xxxxx.xcodeproj/project.pbxproj

/usr/libexec/PlistBuddy -c “Set :objects:574F443C1AEE5EA4003F9BB5:buildSettings:PROVISIONING_PROFILE_SPECIFIER xxxxxxxxxxxx”  &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;WORKSPACE&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/xxxxx/xxxxx.xcodeproj/project.pbxproj
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;归纳起来，就是先将签名方式ProvisioningStyle改为手动的，然后将Distribution，Debug, Release 相关的CODE_SIGN_IDENTITY[sdk=iphoneos*]，buildSettings:PROVISIONING_PROFILE，PROVISIONING_PROFILE_SPECIFIER的值做对应的修改。另外BundleID和develop team我没有用PlistBuddy来修改，而是通过在Jenkins的配置&lt;strong&gt;Custom xcodebuild arguments&lt;/strong&gt; 加入参数 &lt;code&gt;DEVELOPMENT_TEAM=DLF3GQKP4Q PRODUCT_BUNDLE_IDENTIFIER=xxxxxxxxx&lt;/code&gt; 来指定。这样编译器会自动修改相关值&lt;/p&gt;
&lt;p&gt;配置完这些，ipa包是能打出来了，但是却最后失败了，报错是签名问题，还有找不到ResourceRules.plist。&lt;/p&gt;
&lt;p&gt;最终我发现只要 把Jenkins配置中的把 Sign IPA at build time 的勾选去掉，然后打包就没有问题了。然后我也把在Jenkins的配置&lt;strong&gt;Custom xcodebuild arguments&lt;/strong&gt; 参数中，原来有的参数 &lt;code&gt;CODE_SIGN_RESOURCE_RULES_PATH=$(SDKROOT)/ResourceRules.plist&lt;/code&gt; 去掉，打出来的安装包也没有问题。当时这个参数在Xcode7是必填的，现在Xcode8却可以去掉了。&lt;/p&gt;
&lt;p&gt;以上就是我被Xcode8折腾经验总结。&lt;/p&gt;
&lt;h2&gt;后记：补充&lt;/h2&gt;
&lt;p&gt;这篇文章写了不久，就收到了Soto同学的反馈。根据这篇文章他也成功打包了，而且他还总结了一些更方便的方法。我补充一下，后续有同样问题的人就可以不那么折腾了。&lt;/p&gt;
&lt;p&gt;可以通过Jenkins的配置&lt;em&gt;Custom xcodebuild arguments&lt;/em&gt; 参数来修改的参数有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PRODUCT_BUNDLE_IDENTIFIER&lt;/li&gt;
&lt;li&gt;DEVELOPMENT_TEAM&lt;/li&gt;
&lt;li&gt;PROVISIONING_PROFILE&lt;/li&gt;
&lt;li&gt;PROVISIONING_PROFILE_SPECIFIER&lt;/li&gt;
&lt;li&gt;CODE_SIGN_IDENTITY&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中CODE_SIGN_IDENTITY[sdk=iphoneos*]貌似不是必须的，在xcodebuild的参数指定&lt;strong&gt;CODE_SIGN_IDENTITY="iPhone Distribution"&lt;/strong&gt;就行了。&lt;/p&gt;
&lt;p&gt;那么只有&lt;strong&gt;ProvisioningStyle&lt;/strong&gt;要通过脚本来修改。而且 还可以通过 sed 命令来修改，不必用PlistBuddy来修改（用PlistBuddy要先找到相关UUID，很麻烦）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sed&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ProvisioningStyle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Automatic&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ProvisioningStyle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Manual&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pbxproj&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Soto同学就是采用这种方法成功打出了企业版包和AppStore包，成功避过了要查找UUID来定位修改相关参数值的麻烦做法。这是一种好方法。&lt;/p&gt;
&lt;p&gt;不过这种改法不能适应所有情况，我的项目就不能这么做。我的项目依赖于另外一个工程编译出来的framework，如果在xcodebuild参数里指定PROVISIONING_PROFILE和PROVISIONING_PROFILE_SPECIFIER，是不行的，会造成编译这个framework的时候报错。这个framework工程的配置也要注意，是要把自动签名关闭，并且team指定为none。所以我还是保持我原来的做法，虽然很笨，不灵活，但是能解决问题。&lt;/p&gt;
&lt;p&gt;如果谁跟我的情况类似，然后有更好的办法，麻烦告诉我^_^&lt;/p&gt;
&lt;h2&gt;升级macOS Sierra 后打包签名失败问题&lt;/h2&gt;
&lt;p&gt;这个问题是Soto同学遇到的，我没遇到，因为我还没升级到最新系统。这里也说一下，给有需要的人用。&lt;/p&gt;
&lt;p&gt;如果你打包出现签名错误，例如：&lt;/p&gt;
&lt;p&gt;Command /usr/bin/codesign failed with exit code 1, 并且还 returned: -25308, unknown error -1=fffffffffff 之类的关键字，很有可能就是因为升级到了最新系统macOS Sierra导致的。&lt;/p&gt;
&lt;p&gt;解决方式：&lt;/p&gt;
&lt;p&gt;打开keychain，然后找到你打包用到的那个证书，展开证书，选中那个密钥，右击--&amp;gt;显示简介--&amp;gt;访问控制，然后选择 &lt;strong&gt;允许所有应用程序访问此项目&lt;/strong&gt;,就可以了。&lt;/p&gt;
&lt;p&gt;感谢Soto同学的反馈&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;由于我的网络经常连不上评论系统Disqus，所以有问题想问我或者想跟我交流的，请直接给我发邮件或者加我QQ411084057.谢谢&lt;/strong&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Thu, 29 Sep 2016 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2016-09-29:sheng-ji-xcode8hou-jenkinsda-bao-wen-ti.html</guid><category>Jenkins Xcode8 iOS10 framework</category></item><item><title>升级Xcode8后需要注意的事项</title><link>https://szuwest.github.io/sheng-ji-xcode8hou-xu-yao-zhu-yi-de-shi-xiang.html</link><description>&lt;h2&gt;升级Xcode8后需要注意的事项&lt;/h2&gt;
&lt;p&gt;随着iPhone7开卖适配iOS10成了必不可少的事情。要适配iOS10，升级Xcode8又是必须的事情。可以一旦升级Xcode8之后会发现一堆坑在里面。每次升级Xcode或者iOS系统或者Mac系统都是有一堆的坑，每次都要折腾得你死去活来不罢休。这有点像飞蛾扑火，明明知道前面是火坑，也要往下跳。&lt;/p&gt;
&lt;h3&gt;升级第一坑，注释代码快捷键失效&lt;/h3&gt;
&lt;p&gt;当你经过漫长的等待Xcode下载和安装之后，满心欢喜打开Xcode，发现字体变了，貌似看上去还不错（有同事跟我说这很丑），然后开始写代码，发现可以高亮显示当前编辑行，不错嘛，写着写着突然想注释掉一行代码，发现command+/怎么按都没反应，十分恼火。这什么破玩意儿，这么明显的bug都有。然后网上搜解决方案，确实有人也遇到这个问题。貌似需要跑一个命令什么的。实际上不用那么费劲，重启一下Xcode就好了。&lt;/p&gt;
&lt;h3&gt;升级第二坑，iOS的字体变宽了&lt;/h3&gt;
&lt;p&gt;当我Run一下程序想看看我们的程序在iOS10上有没有问题，启动之后打开引导页，发现最底下的两个按钮字显示不全了：注册账号 变成了 注···号，登录账号变成了 登···号，这是什么鬼？我没有动过这块的任何代码，甚至连这个页面的xib也没有打开过。后来才知道，运来是iOS的字体变宽了，如果你一个按钮在iOS9原来刚好放下4个字，然后iOS10它就装不下了。现在的解决办法是手动调节控件的宽度，发现问题一个解决一个。&lt;/p&gt;
&lt;h3&gt;升级第三坑，xib不兼容Xcode7了&lt;/h3&gt;
&lt;p&gt;这个坑实在试太无良知了，怎么可以这样做。由于我比较早升级到Xcode8，其他同事还没升级，我在Xcode8上编辑过一个xib文件，提交了。另外一个同事更新代码后就编译不过了：提示要使用Xcode8.这不是强制升级么？你用Xcode8编辑xib后，Xcode会加入一行代码说明 &lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;plugIn identifier="com.apple.InterfaceBuilder.IBCocoaTouchPlugin" version="11161"/&amp;gt;
        &amp;lt;capability name="documents saved in the Xcode 8 format" minToolsVersion="8.0"/&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这就是说这是用Xcode8保存的，你必须要要用Xcode8打开。这给团队协作带来极大不便，逼着大家要升级。当然也有解决办法。在File Inspector里有个open in Latest Xcode 的选项，把它改为Xcode7.x就会重新保一下。&lt;/p&gt;
&lt;h3&gt;升级第四坑，sigining方式变了&lt;/h3&gt;
&lt;p&gt;这是个大坑，当然你可以说它是大好，如果它没有给你带来不便利的话。Xcode8里有个自动管理签名开发，即将签名改为自动管理签名后者手动管理签名。其实就是要你登录你的开发账号，然后选择你的develop team。可是一般团队里就一个开发者账号，你就必须给每个人的电脑上都登录一下这个开发者账号。如果能把账号密码公开给大家当然没问题，不能的话就只有管理者去每个人的电脑上登录一下账号。&lt;/p&gt;
&lt;p&gt;这都还是算好的，因为我们开发者自己弄两下就可以搞定。但是有个蛋疼的地方：我们给测试同事打包是在打包机上自动打包的，采用的是Jenkins持续集成环境，并且打包采用的证书是企业版证书，打包出来之后需要给大家随意安装的。当升级Xcode8之后，signing方式改变了，然后打包就失败了。因为打包机上我们是必须重新修改BundleID，然后指定签名文件。但是我们平时开发是Xcode配置是自动签名方式，打包机是通过Jenkins重新配置了打包方式，这样就出问题了。。。&lt;/p&gt;
&lt;p&gt;我现在尝试去解决这种冲突，但是还没搞定。develop team貌似Xcode8中新加的，以前不需要指定。我也网上找了一些资料，貌似有人想直接打包前直接用she'll脚本修改工程文件配置。这也是一个方向。接下来下周我估计要把这个问题研究一下。每次环境变动，Jenkins都要重新搞，折腾得我苦不堪言。什么时候苹果把签名和调试不要搞得那么复杂，造福一下开发者就好了。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Sat, 24 Sep 2016 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2016-09-24:sheng-ji-xcode8hou-xu-yao-zhu-yi-de-shi-xiang.html</guid><category>Jenkins Xcode8 iOS10</category></item><item><title>关于技术人员加班问题的看法</title><link>https://szuwest.github.io/guan-yu-ji-zhu-ren-yuan-jia-ban-wen-ti-de-kan-fa.html</link><description>&lt;h2&gt;关于技术人员加班问题的看法&lt;/h2&gt;
&lt;p&gt;身在IT行业，加班是永远绕不开的话题。互联网是以快速变化著称，加班似乎是成了名正言顺的。最近58同城加班996的问题也引起了广泛关注，而恰好最近两个星期，我们部门也一直在加班。我准备也谈谈这个问题。&lt;/p&gt;
&lt;h3&gt;我们加班的缘由&lt;/h3&gt;
&lt;p&gt;两个星期前，我们接到消息，要在两周之类上线3.0大版本。3.0版本改版非常大，虽然一部分功能已经开发了，但是一直在改，功能就从来没有稳定过。而且我们还正在开发2.7版本，突然间两周之类要上线3.0版本，是不可能的。但是这应该是老板的命令，我们应该没有还价的可能，所以加班是不可避免。还有一个更加不可避免加班的理由：我们的一个同事这个时候被借走了，借去别的子公司帮忙开发。这个借人也不是我们可以商量的，这个公司老板的要求，所以雪上加箱。&lt;/p&gt;
&lt;h3&gt;加班开发和家庭影响&lt;/h3&gt;
&lt;p&gt;为了能尽可能达成目标，我们每天都是工作到10点多，有些同事要搞到凌晨2点多，从产品，设计，到测试，所有人都需要加班。周末两天也需要加班。我老婆对我每天都很晚回家意见非常大，所以我尽量能10点多之后就回家，不然肯定闹家庭矛盾。周日我也不得不请假，留了另外两个同事在加班开发。其实我们已经非常高效了，我们的人力比Android客户端的人力还要少，大家都要努力加班赶进度。后来两个星期后，结果当然是新版上不了线的，所以拖后了几天。他们还想我们客户端周末来加班赶进度，可是我真的不想再加班了，因为我们的团队已经连续上了12天班了，所以我就没有要求加班，我觉得必须让大家停一下，因为后面半个月还有更艰巨的任务等着我们，我不想把我们的队伍搞残。&lt;/p&gt;
&lt;h2&gt;加班的伤害&lt;/h2&gt;
&lt;p&gt;本来我想说说加班是否有必要，但是想了想在这个行业貌似有时候加班是不可避免。就像我们现在的情况。但是造成需要加班来实现需求和赶进度是谁的过错？是技术人员无能，还是管理层的过错。我倾向于管理层的过错。管理层很多时候想不清楚，或者想清楚了计划没有做好，需要团队加班来开发。很多时候加班是可以避免的。就像我们现在的情况，其实3.0版本一早就开始规划了，为什么之前没有想好，而突然一句话就说要上线？之前那么多时间去干嘛了？就算有些变化不可避免，一定要加班才能解决，我希望管理层也有心里准备，长时间加班的造成伤害是很大，而且加班赶出来的东西，质量无法保证，有可能会造成一些技术债务。有些伤害可能无法弥补的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;给技术人员身体健康造成影响。每天加班给技术人员造成休息时间不足，没有时间锻炼，长期处于亚健康状体，一旦得病对身体影响很大&lt;/li&gt;
&lt;li&gt;造成家庭矛盾。每天很晚回家，陪伴家人的时间很短。夫妻很容易闹矛盾，这个影响家庭和谐，严重的话会影响婚姻。&lt;/li&gt;
&lt;li&gt;产品质量无法保证，有可能会造成一些技术债务。每天大量的工作，人很容易疲惫，大家为了赶进度，也会忽略质量。这样很难保证产品的质量是最优的，有些架构不好的话，会造成一些技术债务。后面需要花大量时间来偿还。&lt;/li&gt;
&lt;li&gt;容易造成人员流失。我觉得这可能对公司伤害最大的。因为长期的加班形态会造成上面3个不好的影响，然后员工就很有可能离开。尤其是时候没有做好弥补的情况。例如产品最终是做出来了，但是没有达到预期效果，虽然员工加班了，没有办法得到他们期望的薪酬或者奖励补偿，他们会对公司很失望，所以很容易就会选择离开。这个是非常自然的，我自己以前就经历一次。我们加班加点花了两个月将产品做出来了，最后很多人就离开了，我也自己当时还幻想公司会给我加薪或者给的年终奖多一些，最终的结果很失望，我也选择了离开。所以我对大部分的加班赶产品的形式都是不看好的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以我是反对长期加班的，对于那种996的上班时间，更是不看好，这简直是剥削，这是管理层的失职。如果是非加班不可，一定要做好计划，不能长期加班，给予调休和补偿。&lt;/p&gt;
&lt;p&gt;总之，能不加班就不要加班，其他方面做好，提高工作效率和协作效率，这才是正道。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Sun, 04 Sep 2016 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2016-09-04:guan-yu-ji-zhu-ren-yuan-jia-ban-wen-ti-de-kan-fa.html</guid><category>加班</category></item><item><title>iOS持续集成记(iOS+Jenkins+Cocoapods+蒲公英)</title><link>https://szuwest.github.io/ioschi-xu-ji-cheng-ji-iosjenkinscocoapodspu-gong-ying.html</link><description>&lt;h2&gt;iOS持续集成记（iOS+Jenkins+Cocoapods+蒲公英）&lt;/h2&gt;
&lt;p&gt;原来我们iOS项目是有持续集成环境的，但是有一次升级系统还是升级xcode后，Jenkins就打不出可用的安装包了。原来负责整个打包机的同事又离职了，有一段时间我们都是手动打包给QA同事安装测试，现在领导要求必须把持续集成环境弄好，我们花了大约两周才基本弄好整个持续集成环境，现在把我整个过程中遇到的坑记录一下。&lt;/p&gt;
&lt;h2&gt;重装系统&lt;/h2&gt;
&lt;p&gt;打包机自从某一次升级系统之后就变得非常慢，打个包需要1个小时左右，简直要命。所以新的环境必须要建立在重装后的系统上。因为要格式化硬盘，所以要制作系统启动盘，这个网上也有不少教程，这里有个需要注意的，下载macOS系统时，一定要从官方下载。我一开始是自己在百度云上下的，制作好安装盘后重启电脑，并且将硬盘格式化后安装系统，发现验证不通过，好在另外一个同事在官网下了一个，我在它的电脑上重新制作了一次安装盘。假设你只要一台Mac电脑，遇到这种情况你就悲剧了。&lt;/p&gt;
&lt;h2&gt;git拉取代码的坑&lt;/h2&gt;
&lt;p&gt;系统装好了，Jenkins也装好了，然后配置拉去代码，可是代码死活拉不下来，为此我的同事搞了差不多一天，试了各种方法，也搞不下来代码，都是在一半的时候失败了。后来我也去弄了半天，同样的错误。主要原因可能是代码量太大了，因为其他的小工程可以git clone 下来。我突然想到换一下拉取协议试试，不采用HTTP方式，而是采用git@host/xxxx.git的方式来拉取代码，果然成功了。采用这种方式后，在Jenkins里需要配置ssh的RSA秘钥，在gitlab上面要配置公钥，但是我在Jenkins里配置私钥时，拷贝私钥时，只拷贝了中间那部分，导致一直验证不过，也折腾了很长一段时间才发现，并改正了过来。&lt;/p&gt;
&lt;h2&gt;CocoaPods的坑&lt;/h2&gt;
&lt;p&gt;我们项目用了CocoaPods，而且pods里还有我们的私有库。虽然git clone代码下来了，但是pod install死活不成功。开始以为是pod环境问题，查了很多资料也解决不了。后来我问了一个遇到过这种情况同事，他说是Podfile的source问题，改成ssh协议拉取就可以了。看来仍然是git的问题。&lt;/p&gt;
&lt;p&gt;CocoaPods也能拉取到了，终于可以进入build步骤了。在Jenkins里配置有一个要特别注意的地方，因为使用CocoaPods的工程编译的是workspace，而不是普通的project。Jenkins里xcode配置需要指定workspace的名称，才能正确编译。&lt;/p&gt;
&lt;h2&gt;企业版编译和修改BundleID&lt;/h2&gt;
&lt;p&gt;由于我们打出来的包需要时外部可以随时安装的，所以需要是企业证书的安装包。然而企业包的BundleID是跟正常AppStore的包的BundleID不一样的。一般做法是在正常的AppStore包的BundleID后面直接加上Enterprise。我一开始修改了info.plist后，发现还是因为BundleID跟证书不匹配而编译失败，发现BundleID还是没有变。最终网上查资料才发现，光改了info.plist的BundleID还不够，还要修改project配置里的BundleID。我在网上找了很久也没有找到比较好的修改project里参数的方法。不过最终我在stackoverflow上找个一种方法，在xcodebuild的编译参数里，可以加入一个修改BundleID的参数，这个问题就这样解决了。&lt;br/&gt;
&lt;strong&gt;Custom xcodebuild arguments&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;CODE_SIGN_RESOURCE_RULES_PATH=$(SDKROOT)/ResourceRules.plist PRODUCT_BUNDLE_IDENTIFIER=BundleID&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;随便提一下，Jenkins的配置里有一个叫Change BundleID的配置项，貌似没有什么用。&lt;/p&gt;
&lt;h2&gt;上传和发邮件&lt;/h2&gt;
&lt;p&gt;安装包打出来了，要上传到共享服务器和发布到外网给大家安装，还要发邮件通知QA和相关人员。这一步网上很多都是通过编写Python脚本来实现。我试过Jenkins的FTP插件配置，将安装包上传到我们内部共享服务器，但是失败了，没有太多时间研究就放弃了。转而研究上传蒲公英。我试过网上的一些方法，但是只有通过curl方式上传才成功的。但是注意curl命令后的的file参数有个@。例如 curl -F "file=@path"&lt;/p&gt;
&lt;p&gt;为了上传ipa和发邮件成功，我还查阅了不少Python的语法和bash shell的语法，收获不少。每一次折腾都是进步。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Mon, 18 Jul 2016 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2016-07-18:ioschi-xu-ji-cheng-ji-iosjenkinscocoapodspu-gong-ying.html</guid><category>Jenkins Cocoapods 蒲公英</category></item><item><title>打印杨辉三角--编程算法系列之一</title><link>https://szuwest.github.io/da-yin-yang-hui-san-jiao-bian-cheng-suan-fa-xi-lie-zhi-yi.html</link><description>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;算法是程序员从职业开始到职业结束，估计都是绕不开的话题。所有大公司技术面试都会考算法题，不管国内国外。我一直想非得这样算法吗，没有别的更好的考察方式吗？有没有算法不行但是写程序很厉害的人？我没有答案。也许算法确实比较好的考察方法，如果你确实是个聪明人，你应该克服算法不行的问题。运用算法解决某些问题，或者编写程序去实现某个算法，对程序员是一个重要的能力。所以我要锻炼自己拥有这个能力。我准备将我以前遇到的一些面试题目，真正的完全靠自己去实现，并记录下来。&lt;/p&gt;
&lt;h2&gt;杨辉三角&lt;/h2&gt;
&lt;p&gt;如果你听说过杨辉三角，但是又不记得具体是什么规格，那你跟当年的我一样。大概一两年前，X公司某个项目招人，他们的HR找到我让我去试试，当时我想试试也无妨。前面的一，二技术面试都没太多问题，他们问的都是工作中的技术，后来有一面只面了我纯算法问题，就是打印杨辉三角，我一下懵了，结果是死得很难看。
先看看杨辉三角的数字排列是怎样的：&lt;br/&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;　&lt;/span&gt;                         &lt;span class="mi"&gt;1&lt;/span&gt;
                         &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   
                       &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;2&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   
                     &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;3&lt;/span&gt;   &lt;span class="mi"&gt;3&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   
                   &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;4&lt;/span&gt;   &lt;span class="mi"&gt;6&lt;/span&gt;   &lt;span class="mi"&gt;4&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   
                 &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;5&lt;/span&gt;   &lt;span class="mi"&gt;10&lt;/span&gt;  &lt;span class="mi"&gt;10&lt;/span&gt;  &lt;span class="mi"&gt;5&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   
               &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;6&lt;/span&gt;   &lt;span class="mi"&gt;15&lt;/span&gt;  &lt;span class="mi"&gt;20&lt;/span&gt;  &lt;span class="mi"&gt;15&lt;/span&gt;  &lt;span class="mi"&gt;6&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   
             &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;7&lt;/span&gt;   &lt;span class="mi"&gt;21&lt;/span&gt;  &lt;span class="mi"&gt;35&lt;/span&gt;  &lt;span class="mi"&gt;35&lt;/span&gt;  &lt;span class="mi"&gt;21&lt;/span&gt;  &lt;span class="mi"&gt;7&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   
           &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;8&lt;/span&gt;   &lt;span class="mi"&gt;28&lt;/span&gt;  &lt;span class="mi"&gt;56&lt;/span&gt;  &lt;span class="mi"&gt;70&lt;/span&gt;  &lt;span class="mi"&gt;56&lt;/span&gt;  &lt;span class="mi"&gt;28&lt;/span&gt;  &lt;span class="mi"&gt;8&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   
         &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;9&lt;/span&gt;   &lt;span class="mi"&gt;36&lt;/span&gt;  &lt;span class="mi"&gt;84&lt;/span&gt;  &lt;span class="mi"&gt;126&lt;/span&gt; &lt;span class="mi"&gt;126&lt;/span&gt; &lt;span class="mi"&gt;84&lt;/span&gt;  &lt;span class="mi"&gt;36&lt;/span&gt;  &lt;span class="mi"&gt;9&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   
       &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;10&lt;/span&gt;  &lt;span class="mi"&gt;45&lt;/span&gt;  &lt;span class="mi"&gt;120&lt;/span&gt; &lt;span class="mi"&gt;210&lt;/span&gt; &lt;span class="mi"&gt;252&lt;/span&gt; &lt;span class="mi"&gt;210&lt;/span&gt; &lt;span class="mi"&gt;120&lt;/span&gt; &lt;span class="mi"&gt;45&lt;/span&gt;  &lt;span class="mi"&gt;10&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;   
     &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;11&lt;/span&gt;  &lt;span class="mi"&gt;55&lt;/span&gt;  &lt;span class="mi"&gt;165&lt;/span&gt; &lt;span class="mi"&gt;330&lt;/span&gt; &lt;span class="mi"&gt;462&lt;/span&gt; &lt;span class="mi"&gt;462&lt;/span&gt; &lt;span class="mi"&gt;330&lt;/span&gt; &lt;span class="mi"&gt;165&lt;/span&gt; &lt;span class="mi"&gt;55&lt;/span&gt;  &lt;span class="mi"&gt;11&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;    
   &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;12&lt;/span&gt;  &lt;span class="mi"&gt;66&lt;/span&gt;  &lt;span class="mi"&gt;220&lt;/span&gt; &lt;span class="mi"&gt;495&lt;/span&gt; &lt;span class="mi"&gt;792&lt;/span&gt; &lt;span class="mi"&gt;924&lt;/span&gt; &lt;span class="mi"&gt;792&lt;/span&gt; &lt;span class="mi"&gt;495&lt;/span&gt; &lt;span class="mi"&gt;220&lt;/span&gt; &lt;span class="mi"&gt;66&lt;/span&gt;  &lt;span class="mi"&gt;12&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;   
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;面试时我很容易紧张，人在紧张情况下貌似是很难转起来的，这是我的一大弊端。
当时面试官只在纸上画了前5行，只告诉了我杨辉三角的特点就是每个数字都是它左上角的那个数字和右上角的那个数字相加得来，第一个数字是1。我当时只得出运用递归算法来解这道题会比较容易理解。但是该怎么写我写不出来。后来很长一段时间我并没有忘记这道题，但是我没有去查怎么解决，我偶尔会想一下该怎么做。最近这一两周我对解决这个到题的欲望越来越强烈，所以我开始在记事本上动手写代码解决。后来我发现了杨辉三角的一些规律，这些规律帮助我将代码写了出来。&lt;br/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.杨辉三角第n行有n个数字&lt;/li&gt;
&lt;li&gt;2.每个数字都是它左上角的那个数字和右上角的那个数字相加得来，更具体一点这个数字是a(i,j),那么它是a(i-1,j-1)和a(i-1, j)相加得来的&lt;/li&gt;
&lt;li&gt;3.第1个数字是1.如果这个数字的左上角或右上角的那个数字不存在，那么就当做0&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;我的分析过程&lt;/h3&gt;
&lt;p&gt;说实话，现在看起来这些规律显而易见，但是我还是在编写代码的过程中带才找到的。&lt;br/&gt;
我这个人在面试中真的无法做到像平时那样思考，这让我在面试中感觉自己是个无思考能力的人。还有我发现自己一定要先进入编程状态才能进行思考。所以我决定要解决这个问题时，我就打开一文本，开始写一些我已经想到的代码，直到现在，这个文本也还没有关闭过。&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;第3点很浅显，它是基础，如果用递归实现的话这是递归的出口。第1点让我写出了两个for循环，但是循环体内是怎么实现，我纠结了很久。最开始我想用最简单的方法，把已计算出的数字放入一个数组，然后就把数组中的数字相加得出所需数字。但是我发现这个数组也不太用，我不想用二维数组。后来我才想清楚，直接在循环体内用一个递归函数就这个数字的值，然后把它打印出来，这个是行得通的。然后关键是这个递归函数怎么实现。&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;一开始我把递归函数的参数设为n，发现怎么实现都不太对，后来发现其实应该是把参数设置为i,j，这样就跟循环体的下标对应起来，就很好解决了。最终要解决的就是递归的出口问题，这个也不是我一开始想的那么简单。我把下标设置成是以1开始的，i&amp;lt;1的话，它的值就是0，1的话就是1. 而对应j,为1的话，它是0，而且j是不能大于i的，大于i它的值也为0。
所以程序的最终实现是：&lt;/p&gt;
&lt;h3&gt;代码实现&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;\#&lt;/span&gt;&lt;span class="n"&gt;include&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;stdio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;yangHuiTriangle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;yangHuiTriangle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;yangHuiTriangle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;pringYangHuiTriangle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;yangHuiTriangle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%d   &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当我第一次写完代码时，并没有完全写对，j&amp;gt;i的情况没有处理好。我自己对照着杨辉三角的数字来检验的时候，发现了问题，然后改了过来，然后我就把代码拷贝到一个工程里运行，结果出来了，是对的！&lt;/p&gt;
&lt;h3&gt;打印结果&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mi"&gt;1&lt;/span&gt;   
&lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   
&lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;2&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   
&lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;3&lt;/span&gt;   &lt;span class="mi"&gt;3&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   
&lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;4&lt;/span&gt;   &lt;span class="mi"&gt;6&lt;/span&gt;   &lt;span class="mi"&gt;4&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   
&lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;5&lt;/span&gt;   &lt;span class="mi"&gt;10&lt;/span&gt;   &lt;span class="mi"&gt;10&lt;/span&gt;   &lt;span class="mi"&gt;5&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   
&lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;6&lt;/span&gt;   &lt;span class="mi"&gt;15&lt;/span&gt;   &lt;span class="mi"&gt;20&lt;/span&gt;   &lt;span class="mi"&gt;15&lt;/span&gt;   &lt;span class="mi"&gt;6&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   
&lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;7&lt;/span&gt;   &lt;span class="mi"&gt;21&lt;/span&gt;   &lt;span class="mi"&gt;35&lt;/span&gt;   &lt;span class="mi"&gt;35&lt;/span&gt;   &lt;span class="mi"&gt;21&lt;/span&gt;   &lt;span class="mi"&gt;7&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   
&lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;8&lt;/span&gt;   &lt;span class="mi"&gt;28&lt;/span&gt;   &lt;span class="mi"&gt;56&lt;/span&gt;   &lt;span class="mi"&gt;70&lt;/span&gt;   &lt;span class="mi"&gt;56&lt;/span&gt;   &lt;span class="mi"&gt;28&lt;/span&gt;   &lt;span class="mi"&gt;8&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   
&lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;9&lt;/span&gt;   &lt;span class="mi"&gt;36&lt;/span&gt;   &lt;span class="mi"&gt;84&lt;/span&gt;   &lt;span class="mi"&gt;126&lt;/span&gt;   &lt;span class="mi"&gt;126&lt;/span&gt;   &lt;span class="mi"&gt;84&lt;/span&gt;   &lt;span class="mi"&gt;36&lt;/span&gt;   &lt;span class="mi"&gt;9&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   
&lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;10&lt;/span&gt;   &lt;span class="mi"&gt;45&lt;/span&gt;   &lt;span class="mi"&gt;120&lt;/span&gt;   &lt;span class="mi"&gt;210&lt;/span&gt;   &lt;span class="mi"&gt;252&lt;/span&gt;   &lt;span class="mi"&gt;210&lt;/span&gt;   &lt;span class="mi"&gt;120&lt;/span&gt;   &lt;span class="mi"&gt;45&lt;/span&gt;   &lt;span class="mi"&gt;10&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   
&lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;11&lt;/span&gt;   &lt;span class="mi"&gt;55&lt;/span&gt;   &lt;span class="mi"&gt;165&lt;/span&gt;   &lt;span class="mi"&gt;330&lt;/span&gt;   &lt;span class="mi"&gt;462&lt;/span&gt;   &lt;span class="mi"&gt;462&lt;/span&gt;   &lt;span class="mi"&gt;330&lt;/span&gt;   &lt;span class="mi"&gt;165&lt;/span&gt;   &lt;span class="mi"&gt;55&lt;/span&gt;   &lt;span class="mi"&gt;11&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   
&lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;12&lt;/span&gt;   &lt;span class="mi"&gt;66&lt;/span&gt;   &lt;span class="mi"&gt;220&lt;/span&gt;   &lt;span class="mi"&gt;495&lt;/span&gt;   &lt;span class="mi"&gt;792&lt;/span&gt;   &lt;span class="mi"&gt;924&lt;/span&gt;   &lt;span class="mi"&gt;792&lt;/span&gt;   &lt;span class="mi"&gt;495&lt;/span&gt;   &lt;span class="mi"&gt;220&lt;/span&gt;   &lt;span class="mi"&gt;66&lt;/span&gt;   &lt;span class="mi"&gt;12&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;虽然这个打印出来的结果不是金字塔形状，但是它的数字都是对的。对于打印成金字塔形状，以后再研究吧。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Sun, 17 Jul 2016 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2016-07-17:da-yin-yang-hui-san-jiao-bian-cheng-suan-fa-xi-lie-zhi-yi.html</guid><category>算法 杨辉三角</category></item><item><title>浅谈VR</title><link>https://szuwest.github.io/qian-tan-vr.html</link><description>&lt;h2&gt;浅谈VR&lt;/h2&gt;
&lt;p&gt;最近VR火得不行，就连央视财经也有报道说“4年后VR市场规模高达550亿元！人才缺口达80万”。然后刚刚结束的高考，某一个省份的语文作文题也是跟VR相关。所以说，VR是今后几年最热门的一个话题和技术之一，没有人会反对。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;VR&lt;/strong&gt;, 是Virtual Reality的缩写，即虚拟现实，它其实不是最近新的技术，它只是因为移动互联网的兴起而变得热门起来。我记得真正被全世界人认识和讨论的触发事件是Facebook发重金收购了Oculus VR公司。而除了VR，实际上还有另外一个相近技术&lt;strong&gt;AR&lt;/strong&gt;. AR是Augmented Reality缩写，即增强现实。AR跟VR有挺大不同的，我现在研究得也不多，以后有机会我也想写一下AR相关的文字。&lt;/p&gt;
&lt;h2&gt;VR的应用&lt;/h2&gt;
&lt;p&gt;前几天我配老婆去海雅缤纷城逛街，然后发现那里有一个VR体验区，主要是VR电影和游戏结合的项目，还有一个是VR自行车。我体验了一下一个叫《地城游记》的游戏，感觉还可以。它主要是你坐在一个机器上，带上头盔，手可以握着一个杆，杆上有个按键，游戏中你可以按那个键来进行射击怪物。你坐在机器上，机器会根据游戏来进行晃动，例如我体验的是坐着过山车，它就会根据过山车来进行晃动，模拟你看到场景，就好像你真的在坐过山车一样。游戏中会有一些蝙蝠或者龙飞在你前面，然后有声音提示你射击它，你就会知道按那个键。无需任何人教，我看小朋友都会。体验时间大概10分钟，我老婆说我体验时笑得很开心，而同在一起体验的一个小朋友很镇定，没有太大反应。其实我笑的主要原因是我觉得这个游戏有点搞笑，没有很真实。一个原因是我看得模糊不清，我想是头盔里的分辨率不是很高，还有就是我近视，然后又没有带眼睛，加剧了这种不真实效果。还有就是游戏中的画面和那个晃动座椅结合的还不是很好，这也是个问题。这次体验价是30元。后来我发现还有一个VR体验店在负一层，那个看上去效果更好一些，有恐怖片的，鬼直接拿刀去捅你的那种，还有VR跑车，看上去比我之前体验的那个要好很多。不过价格也贵些，50元一次。&lt;/p&gt;
&lt;p&gt;类似的靠VR体验来收费赚钱的还真不少，我看到几乎每个大的商场都有。这是VR应用的一个方向。现在VR一体机设备都还比较贵，由企业做体验消费这种模式是先行者。我观察了一下，现在主要体验者是小孩，现在的爸妈都舍得发钱，也有像我这样的年轻人。所以未来VR应用的第一大行业应该是游戏行业。除此之外，我觉得VR电影也是一个重要的方向，3D电影的流行和普及也就是那么几年，未来VR技术成熟，肯定也很快普及。然后据说VR体育也是一个重要方向，因为有了VR，就好像现场看一下，这也是一个颠覆。不过什么时候能到来，很难说。不过VR现在已有一个方向很火了，那就是成人市场市场。性是人类永恒的主题，VR给成人市场带入一个新的方向。美国和日本这方面肯定会走在最前面，经常会看到一些美国或者日本的报道说VR技术如何应用到成人行业。&lt;/p&gt;
&lt;h2&gt;VR技术&lt;/h2&gt;
&lt;p&gt;作为技术人，必然争取要跟上技术的潮流。现在大公司都已布局和制定标准。Facebook的Oculus VR，Google的Cardboard，VR平台Daydream，微软的HoloLens，还有三星，HTC，索尼有有自己的VR产品。现在VR技术还处在初期阶段，不过Google已经赶先定制了一个标准，后面的反正肯定也越来越规范化和标准化。&lt;/p&gt;
&lt;p&gt;现在做VR开发，资料也很少，大都是针对特定平台来定制应用和游戏。不过这也是机会，越早进入，机会越多。就像当初智能手机看法那样。&lt;/p&gt;
&lt;p&gt;做VR开发，现在大都用Unity3D，我自己也曾有一段时间想学Unity开发，不过没有坚持下来。现在又不得不重新来了。不过现在有个大问题就是没有好的VR设备，虽然我有两个大朋VR眼镜，但是那简直玩具都不如，我估计国内的其他类似的VR眼镜例如暴风眼镜都差不多情况。暂时来说也只能走一步算一步了。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Sat, 11 Jun 2016 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2016-06-11:qian-tan-vr.html</guid><category>VR AR</category></item><item><title>关于H5和移动客户端开发的未来</title><link>https://szuwest.github.io/guan-yu-h5he-yi-dong-ke-hu-duan-kai-fa-de-wei-lai.html</link><description>&lt;h2&gt;关于H5和移动客户端开发的未来&lt;/h2&gt;
&lt;p&gt;&lt;br/&gt;从去年开始，我已经强烈感觉到移动端web开发的时候可能即将带来。我想为了避免以后找不到工作，我们客户端开发人员不得不开始学习移动端web开发或者混合开发。&lt;/p&gt;
&lt;p&gt;近一两年来，前端开发真的非常火，招不到人。就像前几年的移动客户端开发人才很热门一样。这不得不说得益于移动互联网快速的发展。web确实有它不可替代的好处，快速迭代和开发，不局限与特定平台，这是APP无法做到的。近来APP的开发趋近稳定饱和，而手机的处理能力越来越强，浏览器厂商也支持HTML5越来越完善，移动web开发必然崛起。现在H5已经成了所有技术小白人士都懂的一个词，这足以说明移动web开发已经到来。&lt;/p&gt;
&lt;h2&gt;我与H5的故事&lt;/h2&gt;
&lt;p&gt;HTML5技术早就开始了，但是一直没有完全普及，最近两年才真正的普及起来，H5也成了它的缩写代名词。早在2010我做毕业设计的时候，我就有研究过它。那是HTML5标准已经制定完毕，浏览器厂商已经开始慢慢的支持。我当时开始学习web开发，学习了JavaScript，学习了HTML，学习了CSS。我的毕业设计题目是《基于Google APP Engine 系统的web开发》当时GAE刚发布不久，然后我还采用了当时Google Web Tookit框架来开发我将要做的web即时通讯系统。当时Google还没推出中国，谷歌的各种服务都还在（只有一些些东西需要翻墙）。我用GWT开发我的即时通讯系统，用Google搜索资料和参与Google group讨论和学习，那真是一段充实的时光。那是我了解到ajax技术，采用ajax轮询做了一个简单的即时通讯网页。然后有学习到comet技术，采用comet技术开发了一个更好的即时通讯系统，这个就是我的毕业设计主要内容。当时我也研究到了HTML5的websocket技术，所以顺带把HTML5研究了一下，感觉到这个东西就是未来。当时很想采用websocket也做一个即时通信系统，但是时间不太够，而且当时浏览器也不支持不好，很不好做，就放弃了。因为这段经历，我了解到了HTML5, 也自学了一下JavaScript语言，接触了一下当时刚刚出来的jQuery库。现在这些年H5普及起来了，JavaScript库也发展很快，而且发展到了后端开发，真是没有想到。&lt;/p&gt;
&lt;h2&gt;移动客户端开发的未来&lt;/h2&gt;
&lt;p&gt;现在移动客户端的开发已经受到了web开发的影响。随着微信，淘宝这种超级APP的发展，我觉得移动端的web开发会越来越重要。以前移动端native开发是绝对主流，当年Facebook把它的应用完全采用native开发就是明证。但是现在越来越多混合开发的需求，微信的公众号就是一个例子，未来会更多这种例子。现在也越来越多混合开发技术或者直接采用web技术来开发APP。像我听说过了JSPatch, hybrid, 阿里最近主推的weex(但愿没写错)和Facebook主导的react-native。这些技术我真正有去接触和学习的就只有react-native，原因当然是这是Facebook在主导的，有保障。现在国内移动客户端的开发实际上还没有受这些技术影响很大，大家都还是以native为主。但是现在技术发展这么快，所不定半年或者一年后情况就变了。&lt;/p&gt;
&lt;p&gt;那么移动开发的未来是怎样的呢，会不会被web开发完全替代。我想这不太可能。我们可以类比PC系统，我们大部分时间都是以浏览器为主，但是我们仍然会安装一些其他客户端软件，使用一些客户端软件。未来的移动开发，APP开发会越来越艰难，入口基本都是被超级APP和浏览器占据着，并且超级APP可能分流了一部分浏览器的入口。未来的移动开发以跨品台的web开发为主，技术APP开发里面，web开发占据很大比例。APP开发技术可能主要是混合开发，或者纯采用类似react-native技术的跨平台开发。真正是纯native技术开发的应用应该非常少。&lt;/p&gt;
&lt;p&gt;所以，意识到这一点，学习前端知识就有一些迫切和必要了。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Thu, 02 Jun 2016 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2016-06-02:guan-yu-h5he-yi-dong-ke-hu-duan-kai-fa-de-wei-lai.html</guid><category>前端开发 H5 ReactNative</category></item><item><title>生活琐事</title><link>https://szuwest.github.io/sheng-huo-suo-shi.html</link><description>&lt;h2&gt;生活杂谈&lt;/h2&gt;
&lt;p&gt;最近好长时间没有写博客了，貌似差不多一年了。竟然想不到是那么久没有写过东西。&lt;/p&gt;
&lt;p&gt;去年年底买了车，现在也差不多要领结婚证了，时间的脚步根本停不下来，一眨眼该来的基本上都要来了。&lt;/p&gt;
&lt;p&gt;技术上没有太大的长进，也还有没得到有效的晋升，不过心没有太大的彷徨，因为已经麻木了吗？&lt;/p&gt;
&lt;p&gt;不过我还是一直想提升能力的，不管是技术上的，还是工作上的，生活上的。人的生活不单单是工作和技术，还有很多以外的东西。要在这个世界上好好的生活，需要掌握很多方面的能力，要接触很多的东西。&lt;/p&gt;
&lt;p&gt;我们要抱以开放的心态 接受和学习 生活中的方方面面，去掉浮躁，最终才能成功。
技术也一样。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Fri, 13 May 2016 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2016-05-13:sheng-huo-suo-shi.html</guid><category>杂谈</category></item><item><title>同一个应用的安卓版本和iOS版本开发杂谈</title><link>https://szuwest.github.io/tong-yi-ge-ying-yong-de-an-zhuo-ban-ben-he-iosban-ben-kai-fa-za-tan.html</link><description>&lt;h2&gt;同一个应用的安卓版本和iOS版本开发杂谈&lt;/h2&gt;
&lt;p&gt;我前段时间帮朋友做了一个应用，当然说的更实在一点可以时候就是做外包应用，包括安卓版本和iOS版本。现在想谈一谈感想和总结。
&lt;br/&gt;&lt;br/&gt;
从1月份开始正式开发，最终在5月底完成所有交互，前后算起来就5个月的时间，当然中间有断断续续的开发和沟通。总的来说，这个时间超出了我的预期，所以总得来说我觉得价格有点不合适，稍微便宜了一些。但是因为这是我第一次做这种事情，而且也总体也还在我可接受的范围内，所以就当做一个经验了。个人做外包开发 不能低估工作量和沟通时间。越不正式的外包（朋友间的）需要的沟通和反复修改的情况会越多。千万不要低估这些情况。
&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;Android版本开发&lt;/h2&gt;
&lt;p&gt;我是先开发安卓版本的，原因当然是安卓开发调试方便，修改方便，还有就是我比较熟悉Android开发。一开始朋友想先开发iPhone版本，我说这个调试不方便，说服他先开发安卓版本，我觉得我这个决策是对的。我的开发主要时间都是周末或者平时的空闲时间。了解了需求之后，安卓的第一个包含主要功能的初级版本一个月之后就出来了。然后我就打了个包给朋友用。当然会有很多问题，然后反复沟通和修改，几个星期之后，主要版本出来了。这时候已经是2月多了，我记得是在我放春节假之前改了改了一个版本给他，这个版本做了一些小细节修改和bug修复。由于朋友他没有测试人员，只能靠他自己测试，我自己测试得也不多，开始难免会有些bug，不过他会集中反馈，然后我集中修改，年后回来又改了一两个版本，3月多终于基本完成安卓版本的开发。总的来说，安卓版本开发是方便版本发布和调试。代码的话，程序架构我一开始就基本想好，程序不复杂，界面层和model层我都有比较好的重用，开源库也不少，我自己又对安卓很熟悉，没有遇到特别的难点，总体开发比较顺利。&lt;/p&gt;
&lt;h2&gt;iPhone版本的开发&lt;/h2&gt;
&lt;p&gt;春节的时候，由于没什么特别的事可做，我就做了一些iOS版本准备开发开发工作和基本架构搭建。由于有了Android版本的经验，iOS的基本架构就是对Android版本的基本架构的迁移。特别是model层，几乎是一一对应的。但是iOS版本的界面缺不是那么好做。因为这个应用的需求有些部分比较古怪，我觉得在iOS界面上不太好做。当然，主要原因还是我对iOS开发不算是特别精通，特别是UI层，经验不算很丰富。例如说有一个功能是这样的：主页面要根据上下滑动列表有将导航条收起和展开，还有几个tab页面还可以滑动切换。这两个功能分开做都不难，但是集中在一个页面都要支持这两个功能，就不好做了。最终我暂时只做了滑动切换tab。有了Android开发的经验，iOS开发做起来比较快，但是iOS和Android界面开发差异还是比较大，然后iOS界面开发代码量要比Android的要少，并且更容易重用。例如iOS的ViewController很容易重用，但是Android的Activity就比较难重用，所以Android开发的重复代码要多一些，我觉得这只要是由于Activity的机制造成的。
&lt;br/&gt;&lt;br/&gt;
iOS的开发是比较顺畅，但是调试就麻烦多了。由于朋友没有开发账号，我帮他申请了一个，然后我做了开发，怎么给他安装使用是个大问题。我在我们公司有企业版证书，安装调试很方便，但是没有企业版开发证书就相当麻烦了。你说把他的手机序列号加入开发证书，然后给他安装，我觉得这也很麻烦。所以我最终采用的是：打包应用上传到iTunesconnect，然后通过内部测试（Testflight）发给他安装。之前没怎么做过这种方式，我花了很多时间才最终走通整个流程。最大的一个坑是，我上传了ipa包到iTunesconnect，但是它死活不再内部测试哪里显示出来，我开始以为包还在处理中，等了两天还不行，我又上传了一个，还是不行，但是这次有提示缺少出口规格证明，然后晚上找了不少资料，才知道要在info.plist文件里加一个字段，说明没有使用加密功能。最终才走通整个流程，这里耗费我很多时间和精力，就算是一个经验吧。&lt;/p&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;第一次将一个应用的安卓版本和iOS版本完整的做了一遍，虽然我以前也做过同一个应用的安卓版和iOS版，但是不是完成从头到尾参与。还有早在2011年我就从一个安卓应用的代码开发，到应用上架商店，一条龙下来我都完整经历过，但是iOS应用的完整一条龙这是第一次。从代码开发，注册开发者账号，下载证书，打包上传，应用测试，上架应用，真的是每一个环节都是自己亲身经历的，所以收获不少。总结如下：
&lt;br/&gt;&lt;br/&gt;
&lt;strong&gt;开发流程上&lt;/strong&gt;，Android开发要完胜iOS开发。Android开发是用Java语言开发，然后Android是开源的，Java也是跨平台的，都有很多开源库支持，很多功能可能Android本身不支持，但是hack起来比较容易。Java做架构也比较容易，有很多开源库支持，现在Android方面的开源库也越来越多，质量也越来越好。对于合作开发或者外包，Android开发有很大优势，因为因为分发很容易，随意就可以打包，安装，日志跟踪与收集非常方便。这点真的很赞。反观iOS，Objective-C基本上是只能限制于Mac OS的平台，iOS也是闭源的。要给别人安装调试那真是比较难：要先有开发者证书，要先把对方的设备的序列号登记入证书中。总之各种麻烦。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;代码重用上&lt;/strong&gt;，iOS更胜一筹。iOS的界面开发挺不错的，而且iOS应用整体性能要比Android要好，整体流畅性比较好（这是我朋友的直观感受）。我看整体代码，iOS端确实比Android端代码重用比较容易，特别是界面模块的代码，iOS的界面代码具有很多的可重用性，Android则不太行。不过鉴于Android端界面开发支持适配更多的设备，某些时候Android的界面开发要比iOS的界面开发便捷很多。另外Android端的动画开发现在也越来越方便，越来越接近iOS的动画开发了。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Fri, 13 May 2016 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2016-05-13:tong-yi-ge-ying-yong-de-an-zhuo-ban-ben-he-iosban-ben-kai-fa-za-tan.html</guid><category>Android开发 iOS开发 外包</category></item><item><title>iOS系统相册上传不得不说的那些事儿</title><link>https://szuwest.github.io/iosxi-tong-xiang-ce-shang-chuan-bu-de-bu-shuo-de-na-xie-shi-er.html</link><description>&lt;p&gt;最近在开发手机相册自动备份的功能，这就需要用到上传文件的功能。
其实我一年前也做过同样的功能，当时也做得不算很好。这次是别人做了，然后那人离职了。我来接受这块，然后发现有问题，然后准备认真的研究一下这个问题，顺便学习更多的iOS开发的知识。&lt;/p&gt;
&lt;h2&gt;系统相册概述&lt;/h2&gt;
&lt;p&gt;首先说一下iOS相册的问题。iOS的相片都是存放在系统库ALAssetLibrary中，开发者从这个库中读取到的是一个个ALAsset对象，而不是一个文件系统的File文件。当然iOS8系统新增了Photo Framework,但是只是增强了相关功能，还是不能直接取到File。 这个Android平台或者PC平台很不一样的。&lt;/p&gt;
&lt;p&gt;我们知道一般的上传文件流程就是，将本地的文件转换为二进制数据或流，通过HTTP协议或者socket协议，本地和服务器之间建立一个连接，本地将流写入这个连接，服务器那边接收这个流，并将接收到的流写入文件，直接客户端那边将整个文件传完，传输就结束了。上传文件这个过程一般会被封装库，使用者只需传入必要的参数就可以了。我以前做自动备份相册的时候，就是使用了别人提供的静态库，它上传文件API就是需要传一个文件的本地路径。这就麻烦了，因为我们的应用从iOS系统库读取到的对象是ALAsset, 所以我需要先将ALAsset从系统中导出，写入我们应用的沙盒中，然后再把它在沙盒中路径传给上传库进行上传。&lt;/p&gt;
&lt;h2&gt;导出ALAsset&lt;/h2&gt;
&lt;p&gt;据我所知，iOS系统cocoa层网络传输基本上只有&lt;strong&gt;NSURLConnection&lt;/strong&gt;和基于&lt;strong&gt;NSURLSession&lt;/strong&gt;一套API。它们提供的接口基本上都是基于NSData，或者文件路径或者NSInputStream。网上有很多库或者框架都是基于这两套API来做上传，我们一般也使用第三方的框架来减少工作量。这里最有名的当然就是AFNetWorking。AFNetWorking库提供给使用的接口就是有NSData接口，文件路径接口，由于我们上传的照片或者视频可能很大，所以就不能直接使用NSData的接口，所以必须使用文件接口。那么就得考虑如何将ALAsset导出为一个文件了。&lt;/p&gt;
&lt;p&gt;将ALAsset从系统中导出的方法如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;BOOL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;exportAsset:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ALAsset&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;asset&lt;/span&gt; &lt;span class="nf"&gt;toFilePath:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;path&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;NSFileManager&lt;/span&gt; &lt;span class="n"&gt;defaultManager&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;createFileAtPath&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;nil&lt;/span&gt; &lt;span class="n"&gt;attributes&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;NSFileHandle&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;handle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;NSFileHandle&lt;/span&gt; &lt;span class="n"&gt;fileHandleForWritingToURL&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;fileUrl&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;NO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;ALAssetRepresentation&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;rep&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;asset&lt;/span&gt; &lt;span class="n"&gt;defaultRepresentation&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;calloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BufferSize&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;NSUInteger&lt;/span&gt; &lt;span class="n"&gt;offset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bytesRead&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;@try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;bytesRead&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;rep&lt;/span&gt; &lt;span class="n"&gt;getBytes&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt; &lt;span class="n"&gt;fromOffset&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;offset&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;BufferSize&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;handle&lt;/span&gt; &lt;span class="n"&gt;writeData&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;NSData&lt;/span&gt; &lt;span class="n"&gt;dataWithBytesNoCopy&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;bytesRead&lt;/span&gt; &lt;span class="n"&gt;freeWhenDone&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;NO&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;
            &lt;span class="n"&gt;offset&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;bytesRead&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;@catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSException&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;NO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bytesRead&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;YES&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个方法有个地方是特别要说明的，就是将ALAsset从系统库中读出来不是一下子读到内存中的，而是每次读一个buffer大小的数据，然后将这个buffer中的数据写入文件中，不断读取和写入，直到读完。这主要是避免一个文件（如视频）一下子读到内存中导致内存问题。
相册里大部分都是图片，而图片大部分也就是几MB, 一般就算一次性直接读取二进制数据到内存，不拷贝文件出来，也不会产生内存问题。可是视频就不行了，因为一般视频都比较大，几百MB甚至几个GB。所以上面这个导出方法十分重要。&lt;/p&gt;
&lt;p&gt;可是这个方法也有一个致命的问题，就是必须要有足够的剩余空间给你拷贝一份相片或者视频出来。特别是视频。空间问题是个大问题，因为正是因为用户的手机剩余空间不足了，才想要备份，而备份又需要额外的拷贝空间。设想一个用户拍了一个3GB的视频，他要备份这个视频，至少要预留3GB以上的剩余空间才能备份，这显然很不合理。那有没有别的不导出ALAsset直接上传的方法呢。我也一直在思考这个问题。我能想到的是：一种是边读取边上传，也就是通过ALAssetRepresentation的"getBytes:fromOffset:error"方法读取出来就上传。这样的话需要自己先建立连接，传输HTTPheader相关准备数据（boundary），然后就传输从ALAssetRepresentation读取的数据，读完之后再自己做一些结尾的工作。这一系列的操作都是自己来实现。貌似这样的工作量也挺大的，而且最重要的是我没想好这一整体过程实现起来是怎样的。还有一种就以chuck方式上传，即一段一段的上传给服务器，服务器那边收到之后自己组装成一个完成的文件。这样客户端这边传输可以利用已有的API，但是服务器那边需要额外的支持。我们的服务器这边比较弱，不能支持这种方式。&lt;/p&gt;
&lt;p&gt;所以我最终还是选择了导出ALAsset的方式，开发相对来说容易一些。不过这种方式被其他人吐槽和耻笑。。&lt;/p&gt;
&lt;h2&gt;上传的坑&lt;/h2&gt;
&lt;p&gt;我们项目里用的是&lt;strong&gt;AFNetWorking&lt;/strong&gt;库，所以我用它来上传。一开始我们用的是2.0版本，它有基于NSURLConnection的API，也有基于NSURLSession一套API。默认都是用NSURLConnection的API。但是iOS9不是不再推荐使用NSURLConnection了吗，所以AFN3.0版本直接就把NSURLConnection的相关API去掉了，全部都使用基于NSURLSession的API。本来我们用2.0版本好好的，但是更新到3.0版本后就出问题了。在iOS7.0系统上上传失败。经过和服务器调试，发现客户端的网络请求header里面没有contentLength，所以服务器那边失败了。就算你自己给它设置这个contentLength，它还是会丢弃掉，因为这是苹果API底层做的事！这实在是太蛋疼了，想改还改不了。所以我只能寻求别的方法。最终我用了ASIHTTPRequest库，为什么我没有采用旧的NSURLConnectionAPI呢。因为这个API也有它的缺陷，否则苹果也不会再最新的系统把它废弃掉。我自己在项目中遇到的问题是它改变不了HTTP header中connection连接方式，默认的是keep-alive方式，但是我们有一种情况是需要服务器中转HTTP请求，如果是keep-alive方式的话很容易出现问题，所以必须是设为close方式。蛋疼的问题来了，你改变不了！你在HTTP request头中设置了，到底层还是被系统覆盖掉，苹果实在是太霸道了。。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ASIHTTPRequest&lt;/strong&gt;库是基于CFNetwork框架实现的，它很底层，你可以控制各种东西，所以我就采用了它，而且它也挺高效。唯一不足的就是这个库已经早就不维护了。只能自己维护。所以我最终的方式是，如果是iOS8以下系统，就采用ASI方式上传，否则就采用AFNetWorking方式上传。这里顺表ASI的另一个优点，它可以做到真正的断点续传下载，iOS系统提供NSURLSessionTask的断掉续传不是真的断掉续传，因为强退应用之后NSURLSessionTask会重新从头开始下载，它只能做到应用生命周期内的断掉续传。而ASI是真个下载过程你可以干涉，并且它本来已经把你保存好文件并且强退后重启也可以还原。虽然这个原理一点都不复杂，但是不知道为啥NSURLSessionTask就是不这样做，估计是外国人的使用习惯和思维和我们不同，人家不屑于实现这个？&lt;/p&gt;
&lt;h2&gt;后台上传&lt;/h2&gt;
&lt;p&gt;由于系统相册里有可能很多图片，上传又是一个比较慢的过程，所以很自然就想到要做后台上传。要做后台任务，iOS7以后当然是用基于NSURLSession的NSURLSessionTask，这也是苹果一直力推使用NSURLSession API的原因吧。可是NSURLSession相关API的坑也很多。
一般来说，只要生成一个具有后台任务配置的NSURLSession，然后由它来创建NSURLSessionUploadTask，然后基于这个task来上传就可以做到后台也能上传。实际的代码运行中崩溃了。
在网上搜了很多资料，最终发现说iOS的后台上传任务不支持NSData方式上传，它只支持file的方式上传。我们是基于AFN的mutiPart方式来上传，即你设置好相关的信息和文件地址，然后AFN会转换为输入流来上传，但是这种方式是后台上传不了的。&lt;/p&gt;
&lt;p&gt;既然后台只能支持文件方式上传，那就只能将所有的信息写入一个文件，最后将这个文件来上传，AFN确实也提供了这样一种方法。&lt;/p&gt;
&lt;p&gt;支持后台上传的方法如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;uploadFile3:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;filePath&lt;/span&gt; &lt;span class="nf"&gt;withURL:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;urlString&lt;/span&gt; &lt;span class="nf"&gt;withSaveName:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;saveName&lt;/span&gt; &lt;span class="nf"&gt;andFileItem:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FileItem&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;fileItem&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="n"&gt;NSString&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;finalFile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;NSTemporaryDirectory&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;stringByAppendingPathComponent&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fileItem&lt;/span&gt; &lt;span class="n"&gt;getFileName&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;
    &lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fileType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fileItem&lt;/span&gt; &lt;span class="n"&gt;contentType&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="c1"&gt;// Prepare a temporary file to store the multipart request prior to sending it to the server due to an alleged&lt;/span&gt;
    &lt;span class="c1"&gt;// bug in NSURLSessionTask.&lt;/span&gt;
    &lt;span class="c1"&gt;// Create a multipart form request.&lt;/span&gt;
    &lt;span class="n"&gt;AFHTTPRequestSerializer&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;requestSerizlizer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;AFHTTPRequestSerializer&lt;/span&gt; &lt;span class="n"&gt;serializer&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;NSMutableURLRequest&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;multipartRequest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;requestSerizlizer&lt;/span&gt; &lt;span class="n"&gt;multipartFormRequestWithMethod&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;POST&amp;quot;&lt;/span&gt;
                                                                                    &lt;span class="nl"&gt;URLString:&lt;/span&gt;&lt;span class="n"&gt;urlString&lt;/span&gt;
                                                                                   &lt;span class="nl"&gt;parameters:&lt;/span&gt;&lt;span class="nb"&gt;nil&lt;/span&gt;
                                                                    &lt;span class="nl"&gt;constructingBodyWithBlock:&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;AFMultipartFormData&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                                             &lt;span class="p"&gt;{&lt;/span&gt;
                                                 &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;formData&lt;/span&gt; &lt;span class="n"&gt;appendPartWithFileURL&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;NSURL&lt;/span&gt; &lt;span class="n"&gt;fileURLWithPath&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;filePath&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;saveName&lt;/span&gt; &lt;span class="n"&gt;fileName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;saveName&lt;/span&gt; &lt;span class="n"&gt;mimeType&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;fileType&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                                             &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;multipartRequest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timeoutInterval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// Dump multipart request into the temporary file.&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;requestSerizlizer&lt;/span&gt; &lt;span class="n"&gt;requestWithMultipartFormRequest&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;multipartRequest&lt;/span&gt;
                                              &lt;span class="nl"&gt;writingStreamContentsToFile:&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;NSURL&lt;/span&gt; &lt;span class="n"&gt;fileURLWithPath&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;finalFile&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                                                        &lt;span class="nl"&gt;completionHandler:&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSError&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                                                            &lt;span class="c1"&gt;// Once the multipart form is serialized into a temporary file, we can initialize&lt;/span&gt;
                                                            &lt;span class="c1"&gt;// the actual HTTP request using session manager.&lt;/span&gt;
                                                            &lt;span class="n"&gt;_currentTask&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;_manager&lt;/span&gt; &lt;span class="n"&gt;uploadTaskWithRequest&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;multipartRequest&lt;/span&gt; &lt;span class="n"&gt;fromFile&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;NSURL&lt;/span&gt; &lt;span class="n"&gt;fileURLWithPath&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;finalFile&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;progress&lt;/span&gt;&lt;span class="o"&gt;:^&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSProgress&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;_Nonnull&lt;/span&gt; &lt;span class="n"&gt;uploadProgress&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                                                                &lt;span class="n"&gt;NSLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;progress = %f&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;uploadProgress&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fractionCompleted&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                                                                &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fileItem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uploadedSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fileItem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fileSize&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;uploadProgress&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fractionCompleted&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                                                                &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt; &lt;span class="n"&gt;notifyStateChanged&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                                                            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;completionHandler&lt;/span&gt;&lt;span class="o"&gt;:^&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSURLResponse&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;_Nonnull&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;id&lt;/span&gt;  &lt;span class="n"&gt;_Nullable&lt;/span&gt; &lt;span class="n"&gt;responseObject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;NSError&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;_Nullable&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                                                                &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;NSFileManager&lt;/span&gt; &lt;span class="n"&gt;defaultManager&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;removeItemAtURL&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;NSURL&lt;/span&gt; &lt;span class="n"&gt;fileURLWithPath&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;finalFile&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                                                                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                                                                    &lt;span class="n"&gt;NSLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;Upload image failure......&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;%@&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,[&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="c1"&gt;//                                                                    [[NSFileManager defaultManager] removeItemAtPath:filePath error:nil];//上传失败保留文件下次上传&lt;/span&gt;
                                                                    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt; &lt;span class="n"&gt;onUploadFailure&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;fileItem&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                                                                &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                                                                    &lt;span class="n"&gt;NSLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;Upload image Success......&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;%@&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,[[&lt;/span&gt;&lt;span class="n"&gt;_currentTask&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
                                                                    &lt;span class="n"&gt;NSLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;Response Data:&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;%@&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,[&lt;/span&gt;&lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="n"&gt;stringWithData&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;responseObject&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;UTF-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;&lt;span class="c1"&gt;//返回是空&lt;/span&gt;
                                                                    &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;NSFileManager&lt;/span&gt; &lt;span class="n"&gt;defaultManager&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;removeItemAtPath&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;filePath&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                                                                    &lt;span class="n"&gt;Partition&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;partition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt; &lt;span class="n"&gt;backupPartition&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                                                                    &lt;span class="n"&gt;partition&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;usedSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;NSNumber&lt;/span&gt; &lt;span class="n"&gt;numberWithLongLong&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;partition&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;usedSize&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;longLongValue&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fileItem&lt;/span&gt; &lt;span class="n"&gt;getAsset&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;defaultRepresentation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;
                                                                    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt; &lt;span class="n"&gt;onUploadSuccess&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;fileItem&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                                                                &lt;span class="p"&gt;}&lt;/span&gt;
                                                            &lt;span class="p"&gt;}];&lt;/span&gt;
                                                            &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;_currentTask&lt;/span&gt; &lt;span class="n"&gt;resume&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

                                                        &lt;span class="p"&gt;}];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个方式在iOS7及以上的系统都有效，但是在iOS7系统还是有点小问题：上传进度不回调。这。。这。。我无话可说了，所以我项目中iOS7还是只能用ASI来上传。&lt;/p&gt;
&lt;p&gt;后台上传可以了，但是实际测试中貌似上传效率也不高，最主要还是要将所有数据再写入一个文件，这个是硬伤。因为前面导出ASAsset的时候已经临时生成了一个文件，在AFN后台上传的时候再一次写多一个临时文件，这样一次上传就生成了两个临时文件，如果这个文件是个很大的视频，那必然很容易导致磁盘空间不足而失败。&lt;/p&gt;
&lt;p&gt;所以，后台上传看上去很美好的事情，实际过程中却是那么残酷的过程。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参考&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/AFNetworking/AFNetworking/issues/1398"&gt;AFN issue&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/27154006/how-to-upload-task-in-background-using-afnetworking"&gt;StackOverflow相关问题&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Mon, 02 May 2016 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2016-05-02:iosxi-tong-xiang-ce-shang-chuan-bu-de-bu-shuo-de-na-xie-shi-er.html</guid><category>iOS网络编程 系统相册上传 导出视频 NSURLConnection NSURLSession 大文件上传 后台上传</category></item><item><title>Android下载器开发</title><link>https://szuwest.github.io/androidxia-zai-qi-kai-fa.html</link><description>&lt;h1&gt;Android下载器开发&lt;/h1&gt;
&lt;p&gt;最近因为项目需要，我开发了一个Android下载管理器，我觉得很有必要记录一下，谈谈我是怎么开发的，遇到了什么问题以及如何解决的。算是一个总结吧。&lt;/p&gt;
&lt;h2&gt;需求分析&lt;/h2&gt;
&lt;p&gt;我们项目包含了一个功能：将文件下载手机上，并且要支持断点下载，因为我们下载的文件主要是图片和视频，其中视频基本上都是大文件，然后下载可能随时会被中断，所以首要一点就是要支持断点续传，然后要支持任务管理，例如暂停下载和继续下载，再然后就是要下载速度尽量快。不过这最后一点估计所有人都会这样要求。&lt;/p&gt;
&lt;h2&gt;为什么要自己开发&lt;/h2&gt;
&lt;p&gt;需求已经较清楚了，然后再看怎么实现。一般来说，像下载这么通用的功能，因为很多开源库可用才对。不过在开始之前我要说明一下，这个功能一开始不是我做的，是另外一个同事负责的，但是他离职了，我来接手。问题在于他离职之前这个功能算是实现了，但是很多问题，例如断点续传有问题，任务管理有问题，下载速度很慢。我接手之后，我特意去网上查找了有没有可用的较好的开源库。经过一轮搜索之后，我发现，很多博客上介绍的下载都是同一下载，就是黎活明老师的下载，估计这个下载是他讲课的案例，主要特点是多线程断点下载。而我们之前那个同事的实现就是把网上的例子弄来的。他这个下载确实还可以，支持断点下载，还支持多线程分片下载来提高下载速度。不足之处就是不支持任务管理，还有数据库很容易出现多线程问题。也就是说核心的东西它有了。如果你要在一个项目中用它，然后还有通过测试同事的各种测试，那是不行的。还有很多工作要做。&lt;/p&gt;
&lt;p&gt;再说说我找库的问题，下载库到是找到了几个，但是发现都有点小问题。例如有一个貌似是阿里巴巴的技术人员写的，支持断点下载和任务管理，但是不支持多线程分块下载。然后我发现很少外国人有写下载库，我的想法是 是不是因为他们的网速比较好，下载文件都比较快，像断点续传和多线程分块下载，任务管理需求也比较少（也比较少下大文件，因为他们不能下载视频）。所以我最终决定自己来实现一个下载器。&lt;/p&gt;
&lt;h1&gt;实现&lt;/h1&gt;
&lt;h3&gt;1断点续传&lt;/h3&gt;
&lt;p&gt;第一个要点是断点续传。这个不难，因为这是HTTP协议支持，通过range这个header字段。这个字段可以指定要从文件的哪个地方开始传，到哪里结束。下载的部分要写入文件，这里用到了一个Java类：RandomAccessFile。这个类你可以指定创建一个指定大小的文件，然后随机读写任何部分。断点下载一个要点就是，在下载之前，我们要先创建一个指定大小的RandomAccessFile文件，然后再把下载下来的部分写入这个文件中。已下载的部分要记录到配置文件或者数据库中，下载要从哪里下载就从配置文件中读取。这里要注意的就是每次将下载部分写入文件的时候，同时也要保存已下载到哪里的信息。这里的额外的保存操作会拖慢一点下载速度，但是为了避免程序被强杀或者突然崩溃导致已下载部分丢失，也只能这么做。如果为了追求速度，可以容易这种异常情况的丢失，这里是可以改进的。&lt;/p&gt;
&lt;h3&gt;多线程分块下载&lt;/h3&gt;
&lt;p&gt;为了加快速度，我们可以将一个大文件分成几块，每块分配一个线程来下载，这样速度就翻倍了。这里就有一个要点：我们将文件分成N块，然后这每一块都按照断点续传来实现。所以基本的下载流程是这样的：首先获取文件的大小，然后在本地创建一个该大小RandomAccessFile文件，然后分成N块来下载，设置好每一块的下载起始位置和结束位置，分配一个线程来下载，而且每一块的下载都要几好下载到哪里，以便以后支持继续下载。要判断文件是不是下载完成了，只要检查每块是不是已经正常下载完成或者已下载的部分就是等于文件大小，就可以了。&lt;/p&gt;
&lt;h3&gt;任务管理&lt;/h3&gt;
&lt;p&gt;任务管理就是你可以随时中断下载，可以创建多个任务，同时可能只支持X个文件进行下载，其他的任务等待。然后失败的任务可以重启，也可以对任务进行删除。这个倒不是很难，但是如果要加入任务优先级，会复杂很多。现在我的实现是没有优先级的，先进先出机制。不过我已预览这个设计，要扩展起来也很容易。任务管理实现起来不难，就是有一个线程池来下载，下载中和等待中的任务加入线程池，当任务被暂停时，如果是正在下载，就cancel掉线程，如果是等待中，就设置cancel标记。删除和暂停差不多，只是要对数据库进行删除操作。这里对正在下载的任务停止有一个要点。有很多人对停止线程掌握的不好。大部分人都知道设置一个布尔标记，当这个标志为true时就不做任务了，这样线程的run方法可以结束了。问题是很多人不知道这个布尔变量是有要求的。我之前的那个同事就犯了个错误。他发现把那个标记设置为true时，线程不能立即结束。他就在线程里加了个sleep方法，然后进入判断这个标示的逻辑。这样做可以起到一点的作用，但是还是不能解决根本问题，而且会导致无需的程序睡眠时间，导致下载速度变慢。解方法很简单，对这个布尔值变量声明时用volatile修饰就可以了，而且不用在线程里sleep。&lt;/p&gt;
&lt;h3&gt;遇到的问题&lt;/h3&gt;
&lt;p&gt;前面说了前同事的实现有问题，断点下载有问题，我检查代码时发现是因为它的数据库有问题，下载的时候没有把已下载的进度写到数据库。他采用的一个数据库框架叫litepal。这是一个对象型数据库，我并不反对用框架，就沿用了他的做法，修改了他的bug。然后修改了他停止线程的bug，基本上就能实现断点续传的功能，并且因为线程少了sleep方法，速度有了明显提升。&lt;/p&gt;
&lt;h4&gt;对速度提升的优化&lt;/h4&gt;
&lt;p&gt;经我的研究，下载速度主要受限于网络，还有下载你设置的缓冲区buffer的大小。当然网络是前提，网络不好，你设置的下载buffer再大也没有用。但是我们的应用因为是局域网内，网络不是问题。所以这个时候buffer的大小就起作用了。当初我看很多的下载例子他们设置的buffer是8KB,我跟其他讨论之后，设置512KB的大小，速度果然提升不小。然后我们配置了每个文件分两块进行下载，总速度可达10MB每秒。如果还有提升的话，可以再加大这个buffer，还可以从优化每个线程下载时写文件之后更新数据库那个操作。&lt;/p&gt;
&lt;h4&gt;HTTP协议content-length问题&lt;/h4&gt;
&lt;p&gt;测试同事发现下载大文件有问题。我一看那个失败的文件是超过2GB。第一反应是是不是整数溢出。因为Java中int类型是不超过2GB的（Java的都是有符号数）。我一看在获取文件大小的时候，协议返回的竟然是0，然后发现Android的HTTP协议getContentLength返回的是一个int类型！。我通过断点调试发现服务器返回的协议的文件大小是正确的，只是在经过getContentLength获取的值就变了，因为溢出了。所以我改成自己去从header里解析这个contentLength。这下获取的文件大小就正常了。&lt;/p&gt;
&lt;h4&gt;Android4.4系统写大文件bug&lt;/h4&gt;
&lt;p&gt;改正了getContentLength的问题后，下载还是失败，我就纳闷了。然后跟踪发现异常发生在RandomAccessFile的setLength方法。我就到网上搜这个异常，找了很多终于在Google groud发现有人也遇到这个问题，说事Android4.4系统的一个bug。Google的人也回应了，是在SD卡相关的类中的一个bug，没有用的是32位的方法，他们已修复这个bug。搞了半天，原来是系统的bug，然后我然测试同事测试了替他系统，都没有问题，确实只有4.4才有。而且发现了更奇怪的问题，下载4GB的文件竟然可以！我至今还没搞清楚这是啥原因。知道是系统问题后，将这个问题先是放了一段时间，后来我想不能下载对用户来说确实不好，有没有什么办法可以绕过这个bug。所以我针对这一种特殊的情况，采用另外一种写文件的方式，用FileChannel来建立一个指定大小的文件，这种方法比RandomAccessFile的setContentLen方法效率低很多，但是总比不能用好吧。至此这个bug告一段落。&lt;/p&gt;
&lt;h4&gt;其他问题&lt;/h4&gt;
&lt;p&gt;我们在下载文件之前是先要在磁盘创建一个同样大小的文件，然后下载时就是写入到这个文件中。如果你要下载A.MOV文件，网上的很多下载例子都是直接建立一个A.MOV文件。这样是不好的，因为如果用户用别的文件管理应用去查看文件的时候，看到这个文件就想消费，可实际上这个文件可能根本没有下载完，是消费不了的。所以通常的做法就是开始创建的是A.MOV.TMP文件，等真正下载完之后再重命名为A.MOV。&lt;/p&gt;
&lt;p&gt;还有另外一个问题就是，测试同学很喜欢做压力测试，他们会疯狂下载文件，最终磁盘满了，就出现问题了。虽然我一早就做了错误提示，也定义各种可能出现的错误提示。但是有些系统在SD卡满了之后会卡死，特别是小米的系统。我一开始以为是我的程序问题造成系统卡死，经过研究之后我发现是系统问题，而且不同的系统不同反应。我测试发现一般留足20MB空间就不会有太大的问题。所以在每次问下下载之前，我都检查一下是否有足够的空间可以下载，这里预留了额外的20MB空间。&lt;/p&gt;
&lt;h1&gt;总结&lt;/h1&gt;
&lt;p&gt;这一次写下载器给我的收获很多。从前同事的一堆烂摊子开始，bug无数，到我接手之后功能完善，各种bug解决，我自己还是比较满意的。我觉得你做事的态度决定了你能把事情做成怎样。不过这个库也还有其他问题，例如还没有任务优先级，速度应该还可以提升。现在暂时够用，就告一段落了。我已经将这块独立成一个库，放到了github上面。希望有需要的人可以用它，并且改善它。&lt;/p&gt;
&lt;p&gt;以下是github地址，欢迎使用。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/szuwest/DownloadLib"&gt;Android Downlaoder&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Sat, 18 Jul 2015 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2015-07-18:androidxia-zai-qi-kai-fa.html</guid><category>Android Download</category></item><item><title>再谈iOS开发和Android开发之间的切换</title><link>https://szuwest.github.io/zai-tan-ioskai-fa-he-androidkai-fa-zhi-jian-de-qie-huan.html</link><description>&lt;h1&gt;再谈iOS开发和Android开发之间的切换&lt;/h1&gt;
&lt;p&gt;由于项目变化的原因，Android开发增加了很多人手，而iOS开发团队又被调走，只留下了两个人。所以iOS开发负责人找我谈话希望我过去帮忙做iOS。出于对项目整体进度而言，我去帮忙iOS开发是最好的。我可以在iOS和Android开发之间随意切换，而Android开发确实有点多人，iOS人手严重不足，招人很难，其他人转iOS开发也需要时间，所以我就答应了。&lt;/p&gt;
&lt;p&gt;说起我的Android和开发经历，真是很多感概。从我决定离开第一家做芯片的公司开始，我就想进入iOS开发或者Android开发。其实我最开始是想做iOS开发的，但是当时很难找，我不但没有经验，还是从一家芯片公司刚跳出来（虽然我是软件工程专业出身，但是一开始却进入了芯片行业，说多了都是泪）。最终一家小公司接受了我做Android开发，那时候是2011年初。但是做了大半年多的Android开发之后，公司发现Android很难赚钱，就想转做iOS开发，因为它的生态环境好。开始是我们老大去做，但是他搞了半天还没搞出个helloworld列子，所以就让我去做了。由于我大学的时候就学过Object-C，也接触Object-C开发，所以很快就上手了。再后来，苦于小公司技术进步慢，就跳槽来了现在的X公司。&lt;/p&gt;
&lt;p&gt;我是以Android技术面进入X公司的，但是进来之后，我的老大跟我说，你想做Android还是iOS开发，因为我本身也在做iOS开发，也像往这个方向，就选了iOS开发。那个时候，项目采用的方式全编码方式，没有用xib，然后那个时候还是MRC。想想那个时候那种方式还真是学到了不少东西。但是又是做了大半年之后，iOS项目没有了，Android的项目反而很紧张，我们整个团队就转去做Android开发了。。。当时整个团队只有我懂Android开发。X公司的基因就是这样子，随意切换和调动团队的开发方向和项目。这么多年了，我算经历了几次这种转换。&lt;/p&gt;
&lt;p&gt;转做Android开发之后没有多久，我就出来加入了一个创业公司，在创业公司负责Android项目的重构与开发。这次重构与开发由我独自一人操刀，所以收获还是挺大的。不过一年之后，我最终还是离开了那个创业公司，我留下的框架我觉得够他们迭代两个大版本了。前段时间我看了他们最新的版本，整体架构还是没有太大变化，我觉得我那个架构还在支撑他们。离开创业公司之后，我又回到了X公司。&lt;/p&gt;
&lt;p&gt;回到X公司，我也可以选择方向。因为当时的项目是将公司的通用的公共业务封装成SDK来给各个项目用。Android的SDK已经有团队在做并且做得差不多了。而iOS的因为我们想做跨平台的，所以用c++来做SDK，然后再封装一个Object—C的接口给iOS用。而c++这边很缺人，我就加入了。因为我很愿意写C++，想挑战一下自己。大概写了一个多月的C++，也封装了Object-C接口，我们写的SDK马上用到了项目中。因为有一个iOS项目功能很庞大，他们要用我们的SDK，并且我加入了他们项目，我又转入了iOS开发。我自己写c++SDK，然后写Object-C接口转接，然后直接用到项目中，一条龙我都做了。实际上，我很喜欢写c++那一个多月，我学到了很多东西，对c++有了进一步的了解和有了c++和Object-C混合编程经验。&lt;/p&gt;
&lt;p&gt;然后又做了大半年iOS的项目，这个项目突然解散了，失败了。大部分的人员离职，原来的项目经理重组项目，吸取经验教训，小团队作战。他的想法是组织小部分人来重做项目，开始只做Android端。而当时留下来的人不多，而且项目经理只想要精英。他们找到了我。说实话，不大不小的X公司，我还真没发现有几个Android开发经验丰富和技术真的很好的。以前我刚来X公司的时候的那个团队，已经基本都离开了，他们都去大公司或创业。我绝对是团队了的Android经验最丰富和技术比较好的人。刚死掉的项目的Android端烂得我都不忍心看。新项目我加入了Android开发。&lt;/p&gt;
&lt;p&gt;新项目的Android开发整个框架，有大部分是我搭建的，UI部分估计有90%是我写的。使用起来体验还不错，也得到了一些人的认可和赞赏。但是整个项目有些地方我还是不太满意，特别是项目package的命名和划分，因为这个最开始不是我做的。我又不能进行大改动，只好忍了。这留下了隐患。&lt;/p&gt;
&lt;p&gt;又做了大半年，公司决定将这个项目升级，跟另外一个公司战略产品合并，形成一个新项目。也就是现在这个项目。我又转入了iOS开发，到今天为止，也有半个月了。实际上，在项目合并之前，老项目的iOS本的项目工程和基础架构是我建的。我当时是参考了Android的框架并改良了来做的。搭好框架之后，因为有新的团队进来接手，我就转交给他们了。可是现在我一看，原来的框架只留下了一点，很多都被干掉了。我当时搭建框架确实有点大，那是因为我考虑到了之后的业务和功能来做的。但是我估计是因为iOS负责人不了解我们项目的整体规划，看着我搭框架层次有点多，就简化了。这一简化就使得框架的可扩展行大大降低，现在要做新业务了，我觉得再这个被阉掉的框架上不好做。。而且我还发现这里面代码很多重复的，同一个协议竟然在不同的模块都实现了，而且是完全没有必要的那种。这说明开发人员之间沟通不多，都是各干各的。另外一个就是这个项目框架有问题，协议的时候竟然不是专门集中在一个地方，大家各自实现，重复了也不知道。如果项目结构划分得好话，有专门的groud,有什么协议已实现了一目了然。项目负责人不作为也脱不了干系。&lt;/p&gt;
&lt;p&gt;因为项目问题，我偶尔还会打开Android的项目来做参考。我发现新加入开发者后，项目被搞得面目全非。每个新人可能觉得老项目有些地方看着不爽，都想自己重新实现一遍。改的最恐怖的是协议层，这个开始由别人搭建的。UI层变动得还好，因为这个是完全是我搭建的，模块划分失败清楚，命名也还好，大家都遵循。协议层开始我们都是自己写得框架，新人一来，他们非常不爽。在最初项目开始的时候，我也有点不爽协议层的这种实现，但是我认为换成别的框架也不见得有多好，并且做项目要考虑时间成本和其他的学习成本。我就保留了。但是新加入的其他同事他们觉得不爽，就想换成Volley，然后还有人说要用Retrofit，还要用EventBus。原来的项目数据库用得少，他们又加入了GreenDao之类的，有人要用注解。其实用这些新框架新技术我并不反对，我没想到他们会这么热衷用。有些用了框架确实省了事，可是我看到有些用了框架之后代码结构一团糟，我有点受不了。&lt;/p&gt;
&lt;p&gt;才半个多月，我就已经不太能认出这个项目的框架了。。我发现技术人员都是很自我，看到不爽的功能每个人都想自己来实现一把。我觉得成熟成技术人和普通技术人员的一个重要区别是：当加入一个新项目的时候，他要实现一个功能或者方法，他们去该项目中是不是已经有实现，有的话就直接拿来用，或者扩展它。还有他会尽量去适应新项目的代码风格，不是不管三七二十一就用自己的风格。我觉得每个人都能这么想这么做的话，代码管理会变得容易很多。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;本来我是想写iOS和Android开发的技术心得，写着就变成了吐槽。。。我想说的是经历这多iOS开发和Android开发切换之后，我对Android开发和iOS开发有了较大的提升，以前我基本上比较看好iOS开发的，但是现在我觉得这两者并没有本质的却别，iOS开发是生态环境比较好，但是Android开发也有很多好处。IDE的话Android studio也越来越好。至于Java和Object-C语言，各有优劣。Java的优势之一是它很好做框架，也有很多开源库支持。Object-C的缺点是它没有命名空间和没有泛型，这导致一个不好就是文件名和方法名很长。当然Object-C也有很多好处。&lt;/p&gt;
&lt;p&gt;项目的架构其实很重要，一个好的架构可以让参与其中的开发人员很乐意按照其中的规则办事，反之就会很乱，可能有很多重复代码，后面的项目变大之后扩展很困难。 &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Sat, 18 Jul 2015 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2015-07-18:zai-tan-ioskai-fa-he-androidkai-fa-zhi-jian-de-qie-huan.html</guid><category>Android iOS</category></item><item><title>Android图片缓存和相关开源项目</title><link>https://szuwest.github.io/androidtu-pian-huan-cun-he-xiang-guan-kai-yuan-xiang-mu.html</link><description>&lt;h1&gt;Android图片缓存和相关开源项目&lt;/h1&gt;
&lt;p&gt;现在几乎所有大一点的Android项目都会用到图片缓存。而Android应用的内存占用大户就是图片，几乎所有内存问题都会涉及到图片问题，而已图片为主的应用也会涉及到性能问题。我觉得每一个资深的Android工程师都要对图片缓存技术有所了解，并且有自己想法。图片缓存是在面试别人时必问的问题。&lt;/p&gt;
&lt;p&gt;图片缓存可以分为两点：内存缓存和磁盘缓存，当然还有必然要涉及的图片解码，图片下载，这里主要讲讲内存缓存和磁盘缓存，附带说一下图片解码和下载。&lt;/p&gt;
&lt;h2&gt;内存缓存&lt;/h2&gt;
&lt;p&gt;由于一张图片基本上会被重用或者在多个界面显示，而图片的下载和解码都是比较耗时的动作，要给用户比较好的体验，将一张图片缓存在内存中就尤为必要。如果一个应用图片比较多，要将所有图片都缓存在内存中显然不现实，特别是比较低端的机器上，内存非常有限。所以这个内存缓存必然有所限制，那么问题来了，缓存池设置多大，并且满了之后怎么处理成了要点。我们知道Android系统中给每个应用设置了最大堆，超出了这个最大堆限制就会报OutOfMemory错误。所以一般就是根据这个最大堆来设置图片缓存池的大小，业内普遍做法是取最大堆内存的8分之一，这个经验值，我觉得可以应用情况做调整。而缓存池满了之后该又要加入新的图片，怎么对已在池中的图片移除，有很多方法。最常用的是LRU（least recently used）算法。我一般会问面试者这个算法是怎么实现的，看过代码的人或者算法学得比较好的人就能答出。还有用的比较多大算法是使用频率算法，移除最大图片算法等。然而我认为比较好的内存缓存技术还应结合弱引用来用。这里涉及到什么事强引用，软引用和弱引用也是我必考项。为什么还要结合弱引用来使用比较好呢？如果一个应用要显示的图片比较多，而强引用池又比较小，那么强应用池中的图片可能很快被移除，但是这时这张图片又还在某个界面中显示着，然后在一个新的界面中又要显示同一张图片，这时强引用池中已被移除，它就会重新去磁盘或网络中加载。而有弱引用池的话就可以避免这个问题。&lt;/p&gt;
&lt;p&gt;内存缓存还有一个要注意的问题就是图片的解码和重用。例如说一张超大图片的话解码是不能直接解码到内存中的，还有可能要根据图片最终在界面上显示的大小来进行解码，还有就是针对不需要alpha值的图片采用RGB_565来解码，对一张已解码的不再需要图片内存重复利用起来，不用重新开辟内存，这些就是非常细但是很重要的点。&lt;/p&gt;
&lt;h2&gt;磁盘缓存&lt;/h2&gt;
&lt;p&gt;磁盘缓存主要是针对网络图片，因为网络下载是比较耗时，对于已经下载的图片没有必要再下载一次。磁盘缓存主要涉及图片保存和磁盘缓存空间大小问题。图片从网络下载下来时，以什么文件保存，还有要不要对图片质量进行压缩也是讲究的。普遍做法是将图片的URL进行一次hash，将这个hash字符串作为文件名保存起来。下次只要对某个图片URL计算出它的hash字符串，看看对应的文件存不存在，就知道图片是否已存在磁盘缓存里。由于用户的磁盘也不是无限的，对于已图片为为主的应用，是要考虑对这个磁盘缓存空间做限制的。这里同样也有LRU算法等。&lt;/p&gt;
&lt;h2&gt;多线程问题&lt;/h2&gt;
&lt;p&gt;对于多图片的应用，特别是在ListView或GridView中显示图片的应用来说，多线程加载图片是必然涉及的。因为图片不能在主线程中解码，否者在滑动列表的会被卡死。解码图片和下载图片都是很耗时的动作，必须放在子线程中进行。如何做一个滑动起来很流畅的图片列表，也是我必问的问题。这里可以涉及很多知识就不讲了。但是在图片加载环节，必然要考虑采用一个线程池来加载和解码图片。&lt;/p&gt;
&lt;hr /&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;图片的加载和缓存是一个很复杂的问题，如果这些都要自己写，要考虑东西很多，要做得好相当不容易。想起在&lt;/span&gt;&lt;span class="mi"&gt;2012&lt;/span&gt;&lt;span class="err"&gt;年的时候，那个时候开源项目还没有现在那么多，我们就是自己写的。但是现在基本上不自己写了，因为有很多相关的优秀的开源项目可以采用。我只要选一个开源框架，加一些配置，或者根据自己项目的需要进行改写或者改造就行了。这里最受欢迎的开源项目应该是&lt;/span&gt;&lt;span class="n"&gt;Universal&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Loader&lt;/span&gt;&lt;span class="err"&gt;了，其他用得比较多的还有&lt;/span&gt;&lt;span class="n"&gt;glide&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IoUtils&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Volley&lt;/span&gt;&lt;span class="err"&gt;等，还有&lt;/span&gt;&lt;span class="n"&gt;Facebook&lt;/span&gt;&lt;span class="err"&gt;最近开源的&lt;/span&gt;&lt;span class="n"&gt;Fresco&lt;/span&gt;&lt;span class="err"&gt;。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Universal-Image-Loader&lt;/h2&gt;
&lt;p&gt;UIL&lt;a href="https://github.com/nostra13/Android-Universal-Image-Loader"&gt;github地址&lt;/a&gt;是我正在用的图片缓存开源项目。这是一个很优秀的项目，代码结构很好，配置性非常高，非常灵活，使用也非常简单。这也许就是它流行的原因。来看看它的经典结构：&lt;/p&gt;
&lt;p&gt;&lt;img alt="框架图" src="https://github.com/nostra13/Android-Universal-Image-Loader/raw/master/wiki/UIL_Flow.png" /&gt;&lt;/p&gt;
&lt;p&gt;有人将这种结构称为三级缓存（内存缓存，磁盘缓存，网络缓存？），UIL的结构很清晰，也很经典。我觉得其他图片缓存框架也是大同小异。我已在至少两个项目用这个框架了，不过我都有修改。第一项目中因为我们的图片下载是要经过安全校验的，所以我在UIL的download engine里加入了一个回调，通过回调获取校验的参数，然后设置到cookie中，ImageLoader不用关心校验方法。现在这个项目也在用UIL，由于我们项目的特殊性，对UIL做了更多改动。不过UIL框架很灵活，很好改动。这就是开源项目好处，我们站在巨人们的肩膀上。&lt;/p&gt;
&lt;p&gt;虽然好处多多，但是我发现UIL也有不足之处。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;框架太过灵活，相对的性能降低了。&lt;/li&gt;
&lt;li&gt;不支持gif图片解码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第一个算不上太大问题，但是对于追求高效率的应用来说，特别是GridView中，用UIL会有性能影响。因为UIL的每次调用都创建很多对象，有些对象因为最求框架灵活引入的，实际是可以减少的。第二个是硬伤，不过现在支持框很少。貌似只有Facebook新开源的Fresco。&lt;/p&gt;
&lt;h2&gt;Fresco&lt;/h2&gt;
&lt;p&gt;Fresco是Facebook刚开源不就的项目，我看了它的介绍非常兴奋。首先它解决UIL不支持gif图片解码的问题。然后它对图片进行重用，还有它的解码是在native中的，内存效率非常高。我最近非常想试试这个新框架。不过实在太忙没有时间。我打算找个时间研究一下它，并用它替换掉UIL。&lt;/p&gt;
&lt;p&gt;先说到这吧，我也翻译这个项目官方介绍的那篇博客，再说。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Sat, 16 May 2015 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2015-05-16:androidtu-pian-huan-cun-he-xiang-guan-kai-yuan-xiang-mu.html</guid><category>Android源码学习 图片缓存 ImageLoader Fresco</category></item><item><title>Android开发中何时使用多进程？</title><link>https://szuwest.github.io/androidkai-fa-zhong-he-shi-shi-yong-duo-jin-cheng.html</link><description>&lt;h1&gt;问答-Android开发中何时使用多进程？&lt;/h1&gt;
&lt;p&gt;我在github上回答了一个问题：
&lt;code&gt;Android开发中何时使用多进程？&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="err"&gt;要想知道如何使用多进程，先要知道&lt;/span&gt;&lt;span class="n"&gt;Android&lt;/span&gt;&lt;span class="err"&gt;里的多进程概念。一般情况下，一个应用程序就是一个进程，这个进程名称就是应用程序包名。我们知道进程是系统分配资源和调度的基本单位，所以每个进程都有自己独立的资源和内存空间，别的进程是不能任意访问其他进程的内存和资源的。那如何让自己的应用拥有多个进程？很简单，我们的四大组件在&lt;/span&gt;&lt;span class="n"&gt;AndroidManifest&lt;/span&gt;&lt;span class="err"&gt;文件中注册的时候，有个属性是&lt;/span&gt;&lt;span class="n"&gt;android&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="err"&gt;，这里可以指定组件的所处的进程。默认就是应用的主进程。指定为别的进程之后，系统在启动这个组件的时候，就先创建（如果还没创建的话）这个进程，然后再创建该组件。你可以重载&lt;/span&gt;&lt;span class="n"&gt;Application&lt;/span&gt;&lt;span class="err"&gt;类的&lt;/span&gt;&lt;span class="n"&gt;onCreate&lt;/span&gt;&lt;span class="err"&gt;方法，打印出它的进程名称，就可以清楚的看见了。再设置&lt;/span&gt;&lt;span class="n"&gt;android&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="err"&gt;属性时候，有个地方需要注意：如果是&lt;/span&gt;&lt;span class="n"&gt;android&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;:deamon&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;，以&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="err"&gt;开头的名字，则表示这是一个应用程序的私有进程，否则它是一个全局进程。私有进程的进程名称是会在冒号前自动加上包名，而全局进程则不会。一般我们都是有私有进程，很少使用全局进程。他们的具体区别不知道有没有谁能补充一下。&lt;/span&gt;

&lt;span class="mf"&gt;2.&lt;/span&gt;&lt;span class="err"&gt;使用多进程显而易见的好处就是分担主进程的内存压力。我们的应用越做越大，内存越来越多，将一些独立的组件放到不同的进程，它就不占用主进程的内存空间了。当然还有其他好处，有心人会发现&lt;/span&gt;&lt;span class="n"&gt;Android&lt;/span&gt;&lt;span class="err"&gt;后台进程里有很多应用是多个进程的，因为它们要常驻后台，特别是即时通讯或者社交应用，不过现在多进程已经被用烂了。典型用法是在启动一个不可见的轻量级私有进程，在后台收发消息，或者做一些耗时的事情，或者开机启动这个进程，然后做监听等。还有就是防止主进程被杀守护进程，守护进程和主进程之间相互监视，有一方被杀就重新启动它。应该还有还有其他好处，这里就不多说了。&lt;/span&gt;

&lt;span class="mf"&gt;3.&lt;/span&gt;&lt;span class="err"&gt;坏处的话，多占用了系统的空间，大家都这么用的话系统内存很容易占满而导致卡顿。消耗用户的电量。应用程序架构会变复杂，应为要处理多进程之间的通信。这里又是另外一个问题了。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;详见：&lt;a href="https://github.com/android-cn/interview-questions/issues/7"&gt;问答-Android开发中何时使用多进程？&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Tue, 10 Mar 2015 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2015-03-10:androidkai-fa-zhong-he-shi-shi-yong-duo-jin-cheng.html</guid><category>技术问答 github 进程</category></item><item><title>Android源码学习之ViewGroup</title><link>https://szuwest.github.io/androidyuan-ma-xue-xi-zhi-viewgroup.html</link><description>&lt;h1&gt;Android源码学习之ViewGroup&lt;/h1&gt;
&lt;p&gt;android继承于View，同时它包含了一个View数组存储它的子View，也就是说它是一个容器。这就是经典的设计模式中的组合模式。在Android的视图结构中，容器一定是ViewGroup，只有ViewGroup才能包含其他视图，像TextView，ImageView这些View是不能包含子视图的，它们是单一控件。这一点跟iOS的视图结构很不一样的。在iOS中所有的视图都是继承于UIView，同时UIView也是一个容器，能包含其他UIView。从这一点来说iOS的视图结构更简单。&lt;/p&gt;
&lt;p&gt;是什么使得ViewGroup具有了容易功能呢？ViewGroup除了继承View外，还是实现了两个接口：&lt;code&gt;ViewManager&lt;/code&gt;和&lt;code&gt;ViewParent&lt;/code&gt;。ViewManager主要定义了addView和removeView的方法，ViewParent主要定义了刷新容器的接口requestLayout和其他一些焦点事件的处理等接口。除此之外，还有非常重要的一点，ViewGroup是一个抽象类。我们知道View并不是抽象类，为什么ViewGroup继承了View反而成了抽象类呢，是增加了什么新的抽象方法吗？不是，ViewGroup中的抽象方法是继承于View的onLayout方法。onLayout方法在View中并不是抽象方法，只是一个空方法，但是在ViewGroup中它被定义为了抽象方法。我第一次发现原来还可以这样做。onLayout的主要作用是放置子View的位置，而不同的布局方式算法不一样，所有留给子类实现比较合理。&lt;/p&gt;
&lt;p&gt;ViewGroup中并没有覆盖onMeasure方法，但是增加了一些计算子View大小的方法：measureChildren方法就是将所有的子View都遍历一遍，并调用他们的measure方法。ViewGroup中同样没有覆盖onDraw方法，但是覆盖了dispatchDraw方法。dispatchDraw方法主要作用是调用每个子View的draw方法。看来onXXX方法在ViewGroup中并不重要，它更多的在调用子View的方法。&lt;/p&gt;
&lt;h2&gt;LayoutParams&lt;/h2&gt;
&lt;p&gt;布局参数LayoutParams是ViewGroup的一个重要内部类。我们在做布局时必不可少的两个属性就是这个类的属性：width和height。程序运行时任何一个控件都有这两个值，当然就是必不可少。LayoutParams这个类非常简单，处理width和height，还有一个LayoutAnimationController.AnimationParameters 属性，用于布局动画的。几乎所有的ViewGroup类的子类都有自己的内部类LayoutParam，但是他们都不是直接继承于LayoutParams，而是MarginLayoutParams，MarginLayoutParams同样是ViewGroup的内部类。MarginLayoutParams无非就是加入了各个方向的margin，这个很好理解，我们布局时都是带margin的。初学者开始搞不懂margin和padding的区别。其实只要记住margin是不属于View的空间的，它是用于每个View与父View或者兄弟View之前的间距，而padding是属于View内部空间的，是View自己的内容跟View边框之间的间距。从代码角度来看，padding是View的属性，LayoutParams是ViewGroup的属性。&lt;/p&gt;
&lt;h2&gt;dispatchTouchEvent触摸事件的分发&lt;/h2&gt;
&lt;p&gt;基本上我每次面试别人，事件的分发是我必问的问题。这个其实没什么难的，网上很多资料说这个，但是看没看过源代码的人看他的回答基本就能知道。Android的触摸事件分发是自上而下的，是通过dispatchTouchEvent来分发的。ViewGroup的dispatchTouchEvent方法还是挺复杂的。ViewGroup在分发事件给子View前，会先调用自身的onInterceptTouchEvent方法来判断自己是否要拦截掉事件，如果拦截了则不会再分发给子View了。没有拦截的话就会在自己的子View中寻找事件接收者，并且组成一个TouchTarget链表，将事件传给他们处理（dispatchTransformedTouchEvent）。简而言之，ViewGroup在分发触摸事件之前会先看自己是否要拦截该事件，不拦截的话在子View中寻找没有隐藏并且在触摸点范围内的子View，将能处理这个事件的加入TouchTarget链表，分发事件给他们处理。我一般面试会问触摸事件会涉及哪些方法，每个方法大概做了什么，哪些是ViewGroup的方法，哪些是View的方法。只要能答出有dispatchTouchEvent， onInterceptTouchEvent，onTouchEvent方法，onInterceptTouchEvent是ViewGroup独有的方法，其他两个是View的方法 就过关。能说明如果一个View设置了OnTouchEventListener，就先调用OnTouchEventListener的回调更好。&lt;/p&gt;
&lt;h2&gt;自定义ViewGroup&lt;/h2&gt;
&lt;p&gt;自定义ViewGroup的需求比较少。一般将已有的ViewGroup子类做组合基本足够。不过真要自定义的话，至少知道该怎么做。必须重写的方法是onLayout方法。这个方法就是对子View布局，即放在哪里。还有一个一般都要重写的方法是onMeasure方法。View的onMeasure比较简单，但是要布局类的话，需要自上而下来计算子View的大小，然后才能在onLayout中根据子View的大小放置。还有可能要重写的是dispatchDraw和drawChild方法。当然跟根据需求可能对dispatchTouchEvent重写。&lt;/p&gt;
&lt;p&gt;关于ViewGroup就先写到这吧。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Mon, 02 Feb 2015 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2015-02-02:androidyuan-ma-xue-xi-zhi-viewgroup.html</guid><category>Android源码学习 ViewGroup</category></item><item><title>股票投资总结</title><link>https://szuwest.github.io/gu-piao-tou-zi-zong-jie.html</link><description>&lt;h1&gt;股票投资总结&lt;/h1&gt;
&lt;p&gt;自从  去年从8月份开始入市美股，11月中入市A股，后来入市港股，真是认识到股市的钱真不是那么容易赚的。为什么很多人劝说不要踏入股市，为什么股市是一赢二平七输，都是很有道理的。要想通过股市一夜暴富也是基本不可能。不过不管怎样，学一下理财和投资，还是不错的。这也算是为以后铺路。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Sun, 01 Feb 2015 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2015-02-01:gu-piao-tou-zi-zong-jie.html</guid><category>生活 投资</category></item><item><title>Android源码学习系列开篇</title><link>https://szuwest.github.io/androidyuan-ma-xue-xi-xi-lie-kai-pian.html</link><description>&lt;h1&gt;Android源码学习开篇&lt;/h1&gt;
&lt;p&gt;最近一直觉得自己后劲不足，很多想做的效果都觉得很艰难，不知道怎么下手。从很早的时候我就想学习Android源代码。第一次下载Android的源代码是2011年四季度的时候，那时候在公司的电脑上安装了Linux系统，也把源码下载下来了。但是后来一段时间后，我离开那个公司。后来几年时间都没有下过Android源码，因为一直在Android和iOS直接切换开发。不过我确实下载了Android SDK源码。其实一般的应用开发只要了解Android SDK开发就够。这些年断断续续看过一些SDK的源码。&lt;/p&gt;
&lt;p&gt;这段时间，我终于下定决心要好好学习一下Android源码，原因之一是我拥有了一部自己的MacBook Pro，不再为电脑而烦恼。为了下载Android源代码，我试了很多方法下载，人生第一次为软件付费，买了一个VPN。但是我电脑硬盘比较小，源码很大，我下载了好几次要么下载到一部分就中断了没法继续下载，要么是我的电脑磁盘装不下。。最后我还是在百度网盘下载了一个别人已经下载好的。&lt;/p&gt;
&lt;p&gt;当然我的学习还是以framework的源码为主，然后逐渐往底层学习。要学习framework根本不必下载Android源码，直接下载Android SDK的源码就行，Google提供的SDK Manager就有下载源码功能，然后在Eclipse或者Android Studio关联即可。为了鞭策自己学习，我决定写一个自己Android源码学习系列文章，记录自己的学习心得。另外最近作为面试官，面了一些Android的求职者，感觉很多人都是满足实现功能，不能自己去探究实现原理。想当年自己也是这样。越早摆脱这种情况，越有优势。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Sat, 20 Dec 2014 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2014-12-20:androidyuan-ma-xue-xi-xi-lie-kai-pian.html</guid><category>Android源码学习</category></item><item><title>Android源码学习之View</title><link>https://szuwest.github.io/androidyuan-ma-xue-xi-zhi-view.html</link><description>&lt;h1&gt;Android源码学习之View&lt;/h1&gt;
&lt;p&gt;在Android中，View是所有视图控件的基类。Android的视图控件的设计采用了经典的设计模式--组合模式。View是基础控件，而ViewGroup是可以包含子View和管理子View的空间，ViewGroup同时也是一个View。这跟iOS的视图空间设计有很大不同。在iOS的视图框架中，所有视图都是继承UIView,而UIView本身是可以包含和管理子UIView的。我不知道这两种设计有什么优劣，感觉iOS的设计更简单直接。&lt;/p&gt;
&lt;p&gt;View的源代码超过2万行，当然包括了很多注释。这里面定义了很多基本的方法，主要是视图渲染的相关方法和事件的相关方法，不过有一点我不是很明白的就是里面有不少是根scrollbar相关的方法。我们实际应用中貌似有scrollbar的控件貌似只有AdapterView的子控件，ScrollView和TextView，scrollbar的特性为什么不直接放到这些类中，或者专门为这些类专门建立一个父类来处理scrollbar。View中的scrollbar特性应该大部分视图控件都不需要吧。当然这些只是我的疑问罢了，Google这样设计也许有他的道理。&lt;/p&gt;
&lt;h2&gt;重要方法&lt;/h2&gt;
&lt;p&gt;一个View要渲染到屏幕上，有几个重要的方法：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;onMeasure系方法&lt;/li&gt;
&lt;li&gt;onLayout系方法&lt;/li&gt;
&lt;li&gt;onDraw系方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3&gt;onMeasure系方法&lt;/h3&gt;
&lt;p&gt;每一个onXXX方法又有若干个相关XXX方法。例如onMeasure方法，相关的方法是measure(int widthMeasureSpec, int heightMeasureSpec)方法，setMeasuredDimension(int measuredWidth, int measuredHeight)方法，MeasureSpec内部类。其中measure(int widthMeasureSpec, int heightMeasureSpec)是final方法，由系统调用，这个方法会调用onMeasure方法，这个方法需要子类覆盖实现来计算本身的大小，而且覆盖这个方法的时候必须调用setMeasuredDimension方法。这里跟计算大小相关密切的是MeasureSpec内部类，这里要结合ViewGroup类讲解才比较清楚。View中这个相关方法的实现是比较简单的，更多定义一个框架，需要子类自己定制实现。我之前总是搞不太清这些方法的关系，看这篇 &lt;a href="http://blog.csdn.net/a396901990/article/details/36475213"&gt;ANDROID自定义视图——onMeasure，MeasureSpec源码 流程 思路详解&lt;/a&gt;才比较清楚。这个我在ViewGroup学习中再讲。简单来讲View通过onMeasure来确定自己的大小。&lt;/p&gt;
&lt;h3&gt;onLayout系方法&lt;/h3&gt;
&lt;p&gt;onLayout(boolean changed, int left, int top, int right, int bottom)方法在View中是一个空实现，子类需要自己覆盖。跟这个类密切相关的方法是layout(int l, int t, int r, int b)方法，这个给外部调用的，一般是父控件来给它设定位置。还有setFrame(int left, int top, int right, int bottom) 和 onSizeChanged(int w, int h, int oldw, int oldh)方法。onSizeChanged(int w, int h, int oldw, int oldh）方法也是一个空方法。onLayout方法我用的比较少，一般貌似在需要动态滚动视图时用这个方法比较多。以后加深学习这个方法。&lt;/p&gt;
&lt;h3&gt;onDraw系方法&lt;/h3&gt;
&lt;p&gt;onDraw方法也是一个空实现。一般来说这个方法用得比较多，大家都知道要自定义View就需要重载这个方法。一开始我很奇怪，既然View的onDraw方法是空实现，而我经常用View来做一些线控件，即给View设置一个背景颜色，宽或者高设置为1像素。那它的背景是怎么画上去的？答案是在draw(Canvas canvas)方法中画的。onDraw系方法还有draw(Canvas canvas, ViewGroup parent, long drawingTime)方法，dispatchDraw(Canvas canvas)方法。dispatchDraw(Canvas canvas)方式是空实现，而draw(Canvas canvas, ViewGroup parent, long drawingTime)的实现相当复杂，这两个方法都是由ViewGroup来调用的。真正的重头戏在draw(Canvas canvas)方法中。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt; * Manually render this view (and all of its children) to the   given Canvas.&lt;/span&gt;
&lt;span class="cm"&gt; * The view must have already done a full layout before this function is&lt;/span&gt;
&lt;span class="cm"&gt; * called.  When implementing a view, implement&lt;/span&gt;
&lt;span class="cm"&gt; * {@link #onDraw(android.graphics.Canvas)} instead of overriding this method.&lt;/span&gt;
&lt;span class="cm"&gt; * If you do need to override this method, call the superclass version.&lt;/span&gt;
&lt;span class="cm"&gt; *&lt;/span&gt;
&lt;span class="cm"&gt; * @param canvas The Canvas to which the View is rendered.&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;

&lt;span class="kr"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nx"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Canvas&lt;/span&gt; &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kr"&gt;final&lt;/span&gt; &lt;span class="kr"&gt;int&lt;/span&gt; &lt;span class="nx"&gt;privateFlags&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mPrivateFlags&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kr"&gt;final&lt;/span&gt; &lt;span class="kr"&gt;boolean&lt;/span&gt; &lt;span class="nx"&gt;dirtyOpaque&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;privateFlags&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;PFLAG_DIRTY_MASK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;PFLAG_DIRTY_OPAQUE&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mAttachInfo&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;mAttachInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mIgnoreDirtyState&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;mPrivateFlags&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;privateFlags&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="nx"&gt;PFLAG_DIRTY_MASK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;PFLAG_DRAWN&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;     * Draw traversal performs several drawing steps which must be executed&lt;/span&gt;
&lt;span class="cm"&gt;     * in the appropriate order:&lt;/span&gt;
&lt;span class="cm"&gt;     *&lt;/span&gt;
&lt;span class="cm"&gt;     *      1. Draw the background&lt;/span&gt;
&lt;span class="cm"&gt;     *      2. If necessary, save the canvas&amp;#39; layers to prepare for fading&lt;/span&gt;
&lt;span class="cm"&gt;     *      3. Draw view&amp;#39;s content&lt;/span&gt;
&lt;span class="cm"&gt;     *      4. Draw children&lt;/span&gt;
&lt;span class="cm"&gt;     *      5. If necessary, draw the fading edges and restore layers&lt;/span&gt;
&lt;span class="cm"&gt;     *      6. Draw decorations (scrollbars for instance)&lt;/span&gt;
&lt;span class="cm"&gt;     */&lt;/span&gt;

    &lt;span class="c1"&gt;// Step 1, draw the background, if needed&lt;/span&gt;
    &lt;span class="kr"&gt;int&lt;/span&gt; &lt;span class="nx"&gt;saveCount&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;dirtyOpaque&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;drawBackground&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// skip step 2 &amp;amp; 5 if possible (common case)&lt;/span&gt;
    &lt;span class="kr"&gt;final&lt;/span&gt; &lt;span class="kr"&gt;int&lt;/span&gt; &lt;span class="nx"&gt;viewFlags&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mViewFlags&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kr"&gt;boolean&lt;/span&gt; &lt;span class="nx"&gt;horizontalEdges&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;viewFlags&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;FADING_EDGE_HORIZONTAL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kr"&gt;boolean&lt;/span&gt; &lt;span class="nx"&gt;verticalEdges&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;viewFlags&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;FADING_EDGE_VERTICAL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;verticalEdges&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;horizontalEdges&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Step 3, draw the content&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;dirtyOpaque&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;onDraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// Step 4, draw the children&lt;/span&gt;
        &lt;span class="nx"&gt;dispatchDraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// Step 6, draw decorations (scrollbars)&lt;/span&gt;
        &lt;span class="nx"&gt;onDrawScrollBars&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mOverlay&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;mOverlay&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isEmpty&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;mOverlay&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getOverlayView&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;dispatchDraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// we&amp;#39;re done...&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;     * Here we do the full fledged routine...&lt;/span&gt;
&lt;span class="cm"&gt;     * (this is an uncommon case where speed matters less,&lt;/span&gt;
&lt;span class="cm"&gt;     * this is why we repeat some of the tests that have been&lt;/span&gt;
&lt;span class="cm"&gt;     * done above)&lt;/span&gt;
&lt;span class="cm"&gt;     */&lt;/span&gt;

    &lt;span class="kr"&gt;boolean&lt;/span&gt; &lt;span class="nx"&gt;drawTop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kr"&gt;boolean&lt;/span&gt; &lt;span class="nx"&gt;drawBottom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kr"&gt;boolean&lt;/span&gt; &lt;span class="nx"&gt;drawLeft&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kr"&gt;boolean&lt;/span&gt; &lt;span class="nx"&gt;drawRight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kr"&gt;float&lt;/span&gt; &lt;span class="nx"&gt;topFadeStrength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kr"&gt;float&lt;/span&gt; &lt;span class="nx"&gt;bottomFadeStrength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kr"&gt;float&lt;/span&gt; &lt;span class="nx"&gt;leftFadeStrength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kr"&gt;float&lt;/span&gt; &lt;span class="nx"&gt;rightFadeStrength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// Step 2, save the canvas&amp;#39; layers&lt;/span&gt;
    &lt;span class="kr"&gt;int&lt;/span&gt; &lt;span class="nx"&gt;paddingLeft&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mPaddingLeft&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kr"&gt;final&lt;/span&gt; &lt;span class="kr"&gt;boolean&lt;/span&gt; &lt;span class="nx"&gt;offsetRequired&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;isPaddingOffsetRequired&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;offsetRequired&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;paddingLeft&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;getLeftPaddingOffset&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kr"&gt;int&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mScrollX&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;paddingLeft&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kr"&gt;int&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;mRight&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;mLeft&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;mPaddingRight&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;paddingLeft&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kr"&gt;int&lt;/span&gt; &lt;span class="nx"&gt;top&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mScrollY&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;getFadeTop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;offsetRequired&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kr"&gt;int&lt;/span&gt; &lt;span class="nx"&gt;bottom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;top&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;getFadeHeight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;offsetRequired&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;offsetRequired&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;right&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;getRightPaddingOffset&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nx"&gt;bottom&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;getBottomPaddingOffset&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kr"&gt;final&lt;/span&gt; &lt;span class="nx"&gt;ScrollabilityCache&lt;/span&gt; &lt;span class="nx"&gt;scrollabilityCache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mScrollCache&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kr"&gt;final&lt;/span&gt; &lt;span class="kr"&gt;float&lt;/span&gt; &lt;span class="nx"&gt;fadeHeight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;scrollabilityCache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fadingEdgeLength&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kr"&gt;int&lt;/span&gt; &lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;fadeHeight&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// clip the fade length if top and bottom fades overlap&lt;/span&gt;
    &lt;span class="c1"&gt;// overlapping fades produce odd-looking artifacts&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;verticalEdges&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;top&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;bottom&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bottom&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;top&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// also clip horizontal fades if necessary&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;horizontalEdges&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;verticalEdges&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;topFadeStrength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.0f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.0f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getTopFadingEdgeStrength&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;
        &lt;span class="nx"&gt;drawTop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;topFadeStrength&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;fadeHeight&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;1.0f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;bottomFadeStrength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.0f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.0f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getBottomFadingEdgeStrength&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;
        &lt;span class="nx"&gt;drawBottom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;bottomFadeStrength&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;fadeHeight&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;1.0f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;horizontalEdges&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;leftFadeStrength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.0f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.0f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getLeftFadingEdgeStrength&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;
        &lt;span class="nx"&gt;drawLeft&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;leftFadeStrength&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;fadeHeight&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;1.0f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;rightFadeStrength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.0f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.0f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getRightFadingEdgeStrength&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;
        &lt;span class="nx"&gt;drawRight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;rightFadeStrength&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;fadeHeight&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;1.0f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;saveCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getSaveCount&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="kr"&gt;int&lt;/span&gt; &lt;span class="nx"&gt;solidColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getSolidColor&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;solidColor&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kr"&gt;final&lt;/span&gt; &lt;span class="kr"&gt;int&lt;/span&gt; &lt;span class="nx"&gt;flags&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HAS_ALPHA_LAYER_SAVE_FLAG&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;drawTop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;saveLayer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;top&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;top&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;flags&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;drawBottom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;saveLayer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;bottom&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;flags&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;drawLeft&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;saveLayer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;top&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;flags&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;drawRight&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;saveLayer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;top&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;flags&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;scrollabilityCache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setFadeColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;solidColor&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// Step 3, draw the content&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;dirtyOpaque&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;onDraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Step 4, draw the children&lt;/span&gt;
    &lt;span class="nx"&gt;dispatchDraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Step 5, draw the fade effect and restore layers&lt;/span&gt;
    &lt;span class="kr"&gt;final&lt;/span&gt; &lt;span class="nx"&gt;Paint&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;scrollabilityCache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;paint&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kr"&gt;final&lt;/span&gt; &lt;span class="nx"&gt;Matrix&lt;/span&gt; &lt;span class="nx"&gt;matrix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;scrollabilityCache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kr"&gt;final&lt;/span&gt; &lt;span class="nx"&gt;Shader&lt;/span&gt; &lt;span class="nx"&gt;fade&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;scrollabilityCache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shader&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;drawTop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setScale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fadeHeight&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;topFadeStrength&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;postTranslate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;top&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;fade&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setLocalMatrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setShader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fade&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;drawRect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;top&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;top&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;drawBottom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setScale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fadeHeight&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;bottomFadeStrength&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;postRotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;180&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;postTranslate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;fade&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setLocalMatrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setShader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fade&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;drawRect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;bottom&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;drawLeft&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setScale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fadeHeight&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;leftFadeStrength&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;postRotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;postTranslate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;top&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;fade&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setLocalMatrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setShader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fade&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;drawRect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;top&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;drawRight&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setScale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fadeHeight&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;rightFadeStrength&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;postRotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;postTranslate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;top&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;fade&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setLocalMatrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setShader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fade&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;drawRect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;top&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;restoreToCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;saveCount&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Step 6, draw decorations (scrollbars)&lt;/span&gt;
    &lt;span class="nx"&gt;onDrawScrollBars&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mOverlay&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;mOverlay&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isEmpty&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;mOverlay&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getOverlayView&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;dispatchDraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个方法中说得很清楚，View的渲染分6步，也可以省略第2和第5步。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;第一步，画背景&lt;/span&gt;
&lt;span class="err"&gt;第二步，可能的话（一般是要做动画），把&lt;/span&gt;&lt;span class="n"&gt;canvas&lt;/span&gt;&lt;span class="err"&gt;保存起来&lt;/span&gt;
&lt;span class="err"&gt;第三步，画内容&lt;/span&gt;
&lt;span class="err"&gt;第四步，画子控件&lt;/span&gt;
&lt;span class="err"&gt;第五步，还原第二部保存的&lt;/span&gt;&lt;span class="n"&gt;canvas&lt;/span&gt;
&lt;span class="err"&gt;第六步，画装饰（&lt;/span&gt;&lt;span class="n"&gt;scrollbar&lt;/span&gt;&lt;span class="err"&gt;）&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样就把整个视图画出来了。&lt;/p&gt;
&lt;h2&gt;Touch事件&lt;/h2&gt;
&lt;p&gt;在View中有很大部分是处理事件，包括按键事件，滚动球事件，触摸事件。这里主要讲触摸事件，因为这个用得最多。
这里主要有onTouch方法，dispatchTouch方法。dispatchTouch是个重要的方法，我们的触摸事件都是经过dispatchTouch分发下去的，但是View是子控件它的分发其实就是发送给自己。我看到源码里有这么一段：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;onFilterTouchEventForSecurity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;//noinspection SimplifiableIfStatement&lt;/span&gt;
        &lt;span class="n"&gt;ListenerInfo&lt;/span&gt; &lt;span class="n"&gt;li&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mListenerInfo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;li&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;li&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mOnTouchListener&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;
                &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mViewFlags&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;ENABLED_MASK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;ENABLED&lt;/span&gt;
                &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;li&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mOnTouchListener&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;onTouch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;onTouchEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里说明如果你重载了一个View的onTouch方法，并且设置了它的OnTouchListener，那么它将调用OnTouchListener的方法，而不会调用本身的onTouch方法。
而onTouch的实现，主要是焦点处理，点击和安装事件的处理，并没有太多特别的东西。我一般考面试者View的touch事件哪些，从屏幕中点击一个按钮，事件是怎么传递的，相关的方法有哪些。这里ViewGroup有一个拦截事件方法（忘了单词怎么打），是View里没有的，又是怎么工作。这里很考面试者对触摸事件的理解，后续我会说。&lt;/p&gt;
&lt;p&gt;View还有一些重要的方法，这里就不一一列举，而且View的方法要结合ViewGroup的实现理解，下次写ViewGroup.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Sat, 20 Dec 2014 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2014-12-20:androidyuan-ma-xue-xi-zhi-view.html</guid><category>Android源码学习 View</category></item><item><title>当做了一段时间的Android的困惑</title><link>https://szuwest.github.io/dang-zuo-liao-yi-duan-shi-jian-de-androidde-kun-huo.html</link><description>&lt;h1&gt;当做了一段时间的Android的困惑&lt;/h1&gt;
&lt;p&gt;当做一门技术到达一定的时间之后，就会陷入一个困境。不知道如何提高。任何一门技术，都是刚开始的时候，进步非常快，然后收获非常多，但是越往后越难有进步。因为因为任何一门技术都有一定的瓶颈，如何打破这个瓶颈，是很重要的。一旦打破这个瓶颈，就会进入下一个平台，下一个级别。然而第二个级别也还是会重复第一个级别的步骤。如此重复。&lt;/p&gt;
&lt;p&gt;我们大多数人都是会在第一个第二个级别上挣扎前进，无法突破。我不知道自己的Android技术现在时处在第一还是第二个级别，但是我现在确实遇到了瓶颈，感觉突破很艰难。最近产品上又有些需求比较难做，自己感觉可以实现，但是真要做出来，需要花很多时间和精力，还不能确定完全实现产品所需效果。而项目本身是比较紧急的，如果既要实现效果又要保证进度，估计我要不吃饭不睡觉才可以实现，这真是不可能的。其实这总结到一句话就是自己的实力还没达到随心所用的地步，特别是一些需要定制的动画交互方面的。这些效果别人都都能做出来了，但是自己要做同样的效果，需要绞尽脑汁。&lt;/p&gt;
&lt;p&gt;鸟厂的Android人才真的很少，有Android技术三年以上的人全公司估计少之又少。鸟厂其实人才不少，但是留不住，很多人呆了一年就离开，真是件令人悲伤的事，可是互联网行业还真是大部分公司都是这样子。有时候人真需要沟通交互才可以进步 更快。我已经很久没有试过这个感觉了。那种进步很快，跟大家交流碰出火花的情形少之又少，还是两年前刚来鸟厂的时候有这个感觉。有时候觉得挺孤独的。技术那时候的兄弟都离开了。项目最近两个月三个水平相当的兄弟离开了，这让我感觉到很寂寞。&lt;/p&gt;
&lt;p&gt;也许人前进的时候是注定是孤独的。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Sun, 14 Dec 2014 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2014-12-14:dang-zuo-liao-yi-duan-shi-jian-de-androidde-kun-huo.html</guid><category>困惑，Android</category></item><item><title>关于Pelican上Disqus无法加载的问题</title><link>https://szuwest.github.io/guan-yu-pelicanshang-disquswu-fa-jia-zai-de-wen-ti.html</link><description>&lt;p&gt;最近发现我的博客Disqus加载不出来，以前是好好的。后来根据它的提示去找问题，找了半天也找不出问题所在。然后网上search，发现了一篇跟我类似的问题文章&lt;a href="http://whilgeek.github.io/posts/2014/07/we-were-unable-to-load-disqus/"&gt;这里&lt;/a&gt;。我的配置文件里确实有 &lt;code&gt;RELATIVE_URLS = True&lt;/code&gt;,把它设置为False也没用。检查了N遍shortname，到Disqus设置里各种试各种检查，都还是没有解决。&lt;/p&gt;
&lt;p&gt;没有办法，我只好在Disqus上重新创建一个新的site，然后回来配置相应的改了。run起来了，可以了。神了。&lt;/p&gt;
&lt;p&gt;不过经过这一次的折腾，我还学到不少别的东西。前段不太懂的人，真是悲剧。以后在这方面好好补补&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Mon, 01 Dec 2014 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2014-12-01:guan-yu-pelicanshang-disquswu-fa-jia-zai-de-wen-ti.html</guid></item><item><title>快速滚动条(FastScroll)的定制</title><link>https://szuwest.github.io/kuai-su-gun-dong-tiao-fastscrollde-ding-zhi.html</link><description>&lt;p&gt;最近项目中因为要做定制快速滚动条功能而研究这块，发现还不是那么好做。&lt;/p&gt;
&lt;p&gt;我首先找了网上有类型功能应用，暂时只发现小米自动相册和腾讯的相册管家做了这个功能。然后网上找快速滚动条的定制的相关资料。最后发现只能通过style或者反射机制去改变快速滚动条，而且能改的东西非常有限----只能替换图片。但是小米和腾讯为什么能定制的那么好呢？小米可能是系统层面上改的，那腾讯的总不能也是吧。我只能去下载相册管家的包来反编译了。&lt;/p&gt;
&lt;p&gt;经过我反复看他们的代码和资源文件，终于找到了相关的类--ExpandableListView，这个跟系统的ExpandableListView不是同一个，只是单纯的名字相同而已。因为代码混淆过了，我花了很大力气虽然看懂了个大概，却是，没办法完全搞清一些细节性的东西。原理大致是这样：他们并没有去定制FastScroll，而是自己生成了一个叫ScrollPanel的View，然后把这个View画上去，并且对这个View设置了OnTouchListener，对用户的触摸事件处理，拖动的时候不断去滚动ListView，实现类型FastScroll的效果。&lt;/p&gt;
&lt;p&gt;由于它们的源代码混淆了很多细节看不了，我只好去参考系统的FastScroll源代码。虽然大致看懂了，但是自己去实现的时候，还是达不到想要的效果。因为时间和精力问题，我现在只能暂时放一放，之后有时间再研究，实在不行我心里也有其他曲线救国的方案可以试试。&lt;/p&gt;
&lt;p&gt;今天发现了一个类型功能的库，很不错。记录一下.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/szuwest/quickscroll"&gt;QuickScroll&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Thu, 27 Nov 2014 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2014-11-27:kuai-su-gun-dong-tiao-fastscrollde-ding-zhi.html</guid><category>Android View Scroll</category></item><item><title>自定义DateView控件</title><link>https://szuwest.github.io/zi-ding-yi-dateviewkong-jian.html</link><description>&lt;p&gt;最近因为项目需要自定义一个日期控件，我花了一个多小时写了这个控件。虽然跟设计效果图还有点细微差别，但是这个可以慢慢修改。&lt;/p&gt;
&lt;p&gt;&lt;img alt="效果图1" src="http://image16-c.poco.cn/mypoco/myphoto/20141128/01/17538075320141128010028044.png" /&gt; &lt;img alt="效果图1" src="http://image16-c.poco.cn/mypoco/myphoto/20141128/01/17538075320141128010051063.png" /&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;DateView&lt;/span&gt; &lt;span class="n"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;View&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;DAY_TEXT_SIZE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;MONTH_TEXT_SIZE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;mDay&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;mMonth&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;mYear&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="n"&gt;TextPaint&lt;/span&gt; &lt;span class="n"&gt;mDayPaint&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="n"&gt;TextPaint&lt;/span&gt; &lt;span class="n"&gt;mMonthPaint&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;DateView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;initView&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;DateView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AttributeSet&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;initView&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;DateView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AttributeSet&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;defStyleAttr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;defStyleAttr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;initView&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;initView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;mDayPaint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;TextPaint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TextPaint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ANTI_ALIAS_FLAG&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;mDayPaint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xff333333&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;mMonthPaint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;TextPaint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mDayPaint&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;mDayPaint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setTextSize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dip2px&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getContext&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;DAY_TEXT_SIZE&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;//        setBackgroundColor(Color.TRANSPARENT);&lt;/span&gt;
        &lt;span class="n"&gt;setDate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Calendar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getInstance&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;getTimeInMillis&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;setMinimumWidth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dip2px&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getContext&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="n"&gt;setMinimumHeight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dip2px&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getContext&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;     * 显示年月日&lt;/span&gt;
&lt;span class="cm"&gt;     * @param timeInSeconds 以秒为单位&lt;/span&gt;
&lt;span class="cm"&gt;     */&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setDate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;timeInSeconds&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Calendar&lt;/span&gt; &lt;span class="n"&gt;ca&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Calendar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getInstance&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;ca&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;ca&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setTimeInMillis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timeInSeconds&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;mMonth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ca&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Calendar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MONTH&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;mYear&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ca&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Calendar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;YEAR&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;mDay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ca&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Calendar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DAY_OF_MONTH&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;mMonthPaint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setTextSize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dip2px&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getContext&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;MONTH_TEXT_SIZE&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="n"&gt;invalidate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;     * 设置时间，当year为0时，表示不需要显示年，只显示月日&lt;/span&gt;
&lt;span class="cm"&gt;     * @param day 1-31&lt;/span&gt;
&lt;span class="cm"&gt;     * @param month 1-12&lt;/span&gt;
&lt;span class="cm"&gt;     * @param year &amp;gt;= 0，0表示不显示年&lt;/span&gt;
&lt;span class="cm"&gt;     */&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setDate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;mDay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;mMonth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mMonth&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;mMonth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;mYear&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mYear&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;mMonthPaint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setTextSize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dip2px&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getContext&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;MONTH_TEXT_SIZE&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;mMonthPaint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setTextSize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dip2px&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getContext&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;MONTH_TEXT_SIZE&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;invalidate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;dip2px&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;dpValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getResources&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;getDisplayMetrics&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;density&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dpValue&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.5f&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setTextColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;mDayPaint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;mMonthPaint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;invalidate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;Override&lt;/span&gt;
    &lt;span class="n"&gt;protected&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;onDraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Canvas&lt;/span&gt; &lt;span class="n"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;onDraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;dayText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;valueOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%02d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mDay&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;dayTextLen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;mDayPaint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;measureText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dayText&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;canvasWith&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getWidth&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;canvasHeight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getHeight&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="n"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drawLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;canvasWith&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mf"&gt;0.75f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;canvasHeight&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mf"&gt;0.25f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;canvasWith&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mf"&gt;0.25f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;canvasHeight&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mf"&gt;0.75f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mDayPaint&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drawText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dayText&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;canvasWith&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dayTextLen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;canvasHeight&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;mDayPaint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getFontMetrics&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;descent&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mDayPaint&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;


        &lt;span class="n"&gt;Paint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FontMetrics&lt;/span&gt; &lt;span class="n"&gt;fontMetrics&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mMonthPaint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getFontMetrics&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;


        &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;monthText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;valueOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mMonth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;月&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;//        int monthTextLen = (int)mMonthPaint.measureText(monthText);&lt;/span&gt;
        &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;textHeight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fontMetrics&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ascent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fontMetrics&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;descent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fontMetrics&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leading&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mYear&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;yearText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;valueOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mYear&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drawText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;yearText&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;canvasWith&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;mMonthPaint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getTextSize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mf"&gt;0.5f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;canvasHeight&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;mMonthPaint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getTextSize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mf"&gt;1.5f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mMonthPaint&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drawText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;monthText&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;canvasWith&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;mMonthPaint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getTextSize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;canvasHeight&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;mMonthPaint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getTextSize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mf"&gt;0.5f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mMonthPaint&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drawText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;monthText&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;canvasWith&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;canvasHeight&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;mMonthPaint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getTextSize&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;mMonthPaint&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这最不好做的就是算字的位置，文字的渲染是基于baseline的，我的理解是Rect的左下角。关于canvas的draw还有很多不懂，好好学习&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Fri, 21 Nov 2014 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2014-11-21:zi-ding-yi-dateviewkong-jian.html</guid><category>Android 自定义控件 日期控件</category></item><item><title>Activity动画（二）</title><link>https://szuwest.github.io/activitydong-hua-er.html</link><description>&lt;h1&gt;Activity动画（二）&lt;/h1&gt;
&lt;p&gt;如果要统一所有的Activity的打开可关闭动画，可以有一个很简便的方法：就是设置Application的theme。在Application的theme里有一个Android:windowAnimationStyle的属性，可以定义了一个Activity的打开和关闭动画。例如下面的例子就自定义了一个theme。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;````
&lt;style name="ThemeLightNoTitle" mce_bogus="1" parent="@android:style/Theme.Light.NoTitleBar"&gt;
        &lt;item name="android:windowAnimationStyle"&gt;@style/AnimationActivity&lt;/item&gt;
    &lt;/style&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;style&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;AnimationActivity&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;mce_bogus=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;parent=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@android:style/Animation.Activity&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;item&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;android:activityOpenEnterAnimation&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;@anim/translate_between_interface_right_in&lt;span class="nt"&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;item&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;android:activityOpenExitAnimation&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;@anim/translate_between_interface_left_out&lt;span class="nt"&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;item&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;android:activityCloseEnterAnimation&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;@anim/translate_between_interface_left_in&lt;span class="nt"&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;item&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;android:activityCloseExitAnimation&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;@anim/translate_between_interface_right_out&lt;span class="nt"&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;item&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;android:taskOpenEnterAnimation&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;@anim/translate_between_interface_right_in&lt;span class="nt"&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;item&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;android:taskOpenExitAnimation&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;@anim/translate_between_interface_left_out&lt;span class="nt"&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;item&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;android:taskCloseEnterAnimation&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;@anim/translate_between_interface_left_in&lt;span class="nt"&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;item&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;android:taskCloseExitAnimation&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;@anim/translate_between_interface_right_out&lt;span class="nt"&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;````&lt;/p&gt;
&lt;p&gt;将这个theme运用到Application的theme里，所以的Activity就会按照你定义的动画来交互了。&lt;/p&gt;
&lt;p&gt;不过，现实的需求往往是更复杂的动画或者交互，不可能所有的界面的交互动画都一致的。有些页面需要特别定制，而且可能很复杂。例如我们要实现类似于iOS的NavigationViewController的页面右滑关闭页面的交互动画，或者要实现点击一张图片缩略图，然后它渐渐放大，点击关闭它又慢慢缩回原处的动画，按照之前介绍的方法，都无法实现。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;在iOS自带相册APP里，点击一个缩略图，缩略图渐渐放大进入大图查看。这个交互基本成了一个相册必备的标准交互。Android上的相册很多也用了这种动画交互。如果缩略图的查看和大图查看都是在同一个Activity中完成的话，还是可以比较容易实现的。但是如果缩略的查看和大图的查看分处在不同的Activity中的话，那这就不是很好实现了。这里我准备讲讲可以怎么实现这个功能。而且这个方法可以推广出去，很多类型的Activity切换动画都可以按照这种方式实现。&lt;/p&gt;
&lt;p&gt;现在假设查看缩略图的Activity是A，查看大图的Activity是B。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;一 设置B的的theme为透明的transparent。&lt;/li&gt;
&lt;li&gt;二 在A中，启动B前，把一些必要的信息打包成Bundle传给B，启动B后把默认的启动动画覆盖,overridePendingTransition(0, 0)。例如把被点击的ImageView的在屏幕中的坐标，还有该ImageView的width和height，还有该ImageView所显示的图片资源id，或者URL，都存入Bundle中，讲该Bundle放入Intent中，启动B时传给B。&lt;/li&gt;
&lt;li&gt;三 在B的onCreate方法中，把Bundle中的信息取出来，并且对你想要做动画的ImageView中，获取ViewTreeObserver实例，加入一个OnPreDrawListener，在OnPreDrawListener的onPreDraw方法中，对ImageView做放大动画，初始位置就是从Bundle中获取，最终位置根据要显示的图片的大小来定。&lt;/li&gt;
&lt;li&gt;四 关闭B Activity时，对ImageView做一个缩小的动画，初始位置就是它现在的位置，最终位置是最开始从Bundle中获取的那个位置。覆盖Activity的finish方法，同样要将Activity的默认动画覆盖掉overridePendingTransition(0, 0)。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们看一下具体怎么实现，有什么要注意的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一· 设置B的的theme为透明的transparent&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;style&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Transparent&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;item&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;android:windowNoTitle&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;true&lt;span class="nt"&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;item&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;android:windowIsTranslucent&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;true&lt;span class="nt"&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;item&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;android:windowBackground&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;@android:color/transparent&lt;span class="nt"&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;activity&lt;/span&gt; &lt;span class="na"&gt;android:name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;com.example.android.activityanim.PictureDetailsActivity&amp;quot;&lt;/span&gt;
            &lt;span class="na"&gt;android:label=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@string/subactivity_name&amp;quot;&lt;/span&gt;
            &lt;span class="na"&gt;android:theme=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@style/Transparent&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/activity&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里主要是将B Activity的window和它的背景设置成透明的。所有的Activity都有一个默认的样式，默认样式不是透明的。设置成透明的话，在启动B Activity时它的背景是透明的，并且调用overridePendingTransition(0, 0)覆盖掉默认动画，你不会觉察到已经从A进入到B界面。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;二. 在A中，启动B前，把一些必要的信息打包成Bundle传给B，启动B后把默认的启动动画覆盖,overridePendingTransition(0, 0)。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// Interesting data to pass across are the thumbnail size/location, the&lt;/span&gt;
        &lt;span class="c1"&gt;// resourceId of the source bitmap, the picture description, and the&lt;/span&gt;
        &lt;span class="c1"&gt;// orientation (to avoid returning back to an obsolete configuration if&lt;/span&gt;
        &lt;span class="c1"&gt;// the device rotates again in the meantime)&lt;/span&gt;
        &lt;span class="k"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;screenLocation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="k"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLocationOnScreen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;screenLocation&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;PictureData&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mPicturesData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;Intent&lt;/span&gt; &lt;span class="n"&gt;subActivity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Intent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ActivityAnimations&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;PictureDetailsActivity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;orientation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getResources&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;getConfiguration&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;orientation&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;subActivity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
                &lt;span class="n"&gt;putExtra&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;PACKAGE&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;.orientation&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;orientation&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
                &lt;span class="n"&gt;putExtra&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;PACKAGE&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;.resourceId&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resourceId&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
                &lt;span class="n"&gt;putExtra&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;PACKAGE&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;.left&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;screenLocation&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;
                &lt;span class="n"&gt;putExtra&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;PACKAGE&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;.top&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;screenLocation&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;
                &lt;span class="n"&gt;putExtra&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;PACKAGE&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;.width&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getWidth&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;
                &lt;span class="n"&gt;putExtra&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;PACKAGE&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;.height&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getHeight&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;

        &lt;span class="n"&gt;startActivity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subActivity&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// Override transitions: we don&amp;#39;t want the normal window animation in addition&lt;/span&gt;
        &lt;span class="c1"&gt;// to our custom one&lt;/span&gt;
        &lt;span class="n"&gt;overridePendingTransition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里有个关键点，获取被点击的View的在屏幕上的位置是通过getLocationOnScreen()方法。这个位置在B中很重要。另外还有宽高也是必须信息，被点击的图片resId或者URL等其他信息。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;二. 在B的onCreate方法中，把Bundle中的信息取出来，并且对你想要做动画的ImageView中，获取ViewTreeObserver实例，加入一个OnPreDrawListener，在OnPreDrawListener的onPreDraw方法中，对ImageView做放大动画，初始位置就是从Bundle中获取，最终位置根据要显示的图片的大小来定。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因为第一步，在用户觉察不到的情况下已进入Activity B,接下来只要在B的视图出现的时候，以一个缩略图放大的动画效果出现就行了。用户看到的效果是点击了A的一个缩略图，缩略图逐渐放大的过程，用户很容易认为这是在A中完成的，实际上这所有的动画都是在B中完成的。看看B中相关的代码:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// Retrieve the data we need for the picture/description to display and&lt;/span&gt;
    &lt;span class="c1"&gt;// the thumbnail to animate it from&lt;/span&gt;
    &lt;span class="n"&gt;Bundle&lt;/span&gt; &lt;span class="n"&gt;bundle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getIntent&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;getExtras&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;Bitmap&lt;/span&gt; &lt;span class="n"&gt;bitmap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BitmapUtils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getBitmap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getResources&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="n"&gt;bundle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;PACKAGE_NAME&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;.resourceId&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bundle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;PACKAGE_NAME&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;.description&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;thumbnailTop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bundle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;PACKAGE_NAME&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;.top&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;thumbnailLeft&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bundle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;PACKAGE_NAME&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;.left&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;thumbnailWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bundle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;PACKAGE_NAME&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;.width&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;thumbnailHeight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bundle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;PACKAGE_NAME&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;.height&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;mOriginalOrientation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bundle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;PACKAGE_NAME&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;.orientation&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;mBitmapDrawable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;BitmapDrawable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getResources&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;bitmap&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;mImageView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setImageDrawable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mBitmapDrawable&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;ViewTreeObserver&lt;/span&gt; &lt;span class="n"&gt;observer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mImageView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getViewTreeObserver&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addOnPreDrawListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ViewTreeObserver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OnPreDrawListener&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

            &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="n"&gt;Override&lt;/span&gt;
            &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;onPreDraw&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;mImageView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getViewTreeObserver&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;removeOnPreDrawListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

                &lt;span class="c1"&gt;// Figure out where the thumbnail and full size versions are, relative&lt;/span&gt;
                &lt;span class="c1"&gt;// to the screen and each other&lt;/span&gt;
                &lt;span class="k"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;screenLocation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="k"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                &lt;span class="n"&gt;mImageView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLocationOnScreen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;screenLocation&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;mLeftDelta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;thumbnailLeft&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;screenLocation&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                &lt;span class="n"&gt;mTopDelta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;thumbnailTop&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;screenLocation&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

                &lt;span class="c1"&gt;// Scale factors to make the large version the same size as the thumbnail&lt;/span&gt;
                &lt;span class="n"&gt;mWidthScale&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;thumbnailWidth&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;mImageView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getWidth&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="n"&gt;mHeightScale&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;thumbnailHeight&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;mImageView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getHeight&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

                &lt;span class="n"&gt;runEnterAnimation&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ViewTreeObserver是View树监听类，可以监听View的一些变化。其中ViewTreeObserver.OnPreDrawListener内部类，是当视图要被绘制时会被回调的类。我们只要在创建一个ViewTreeObserver.OnPreDrawListener实例，传给ViewTreeObserver，就可以在View被绘制时回调onPreDraw方法，我们所要做的就是在这个方法中开始动画。这里注意在动画开始前已经把要显示的图片设置上去了。
runEnterAnimation方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// Set starting values for properties we&amp;#39;re going to animate. These&lt;/span&gt;
    &lt;span class="c1"&gt;// values scale and position the full size version down to the thumbnail&lt;/span&gt;
    &lt;span class="c1"&gt;// size/location, from which we&amp;#39;ll animate it back up&lt;/span&gt;
    &lt;span class="n"&gt;mImageView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setPivotX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;mImageView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setPivotY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;mImageView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setScaleX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mWidthScale&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;mImageView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setScaleY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mHeightScale&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;mImageView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setTranslationX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mLeftDelta&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;mImageView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setTranslationY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mTopDelta&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Animate scale and translation to go from thumbnail to full size&lt;/span&gt;
    &lt;span class="n"&gt;mImageView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;animate&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;setDuration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
            &lt;span class="n"&gt;scaleX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;scaleY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
            &lt;span class="n"&gt;translationX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;translationY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
            &lt;span class="n"&gt;setInterpolator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sDecelerator&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这段代码先将ImageView从大图缩小到我们点击的那个缩略图的大小和位置，然后开始放大动画到它大图显示的样子。这样就实现了我们想要的点击缩略图放大到大图的效果。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;关闭B Activity时，对ImageView做一个缩小的动画，初始位置就是它现在的位置，最终位置是最开始从Bundle中获取的那个位置。覆盖Activity的finish方法，同样要将Activity的默认动画覆盖掉overridePendingTransition(0, 0)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;Override&lt;/span&gt;
&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;finish&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;finish&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// override transitions to skip the standard window animations&lt;/span&gt;
    &lt;span class="n"&gt;overridePendingTransition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt; * Overriding this method allows us to run our exit animation first, then exiting&lt;/span&gt;
&lt;span class="cm"&gt; * the activity when it is complete.&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;Override&lt;/span&gt;
&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;onBackPressed&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;runExitAnimation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Runnable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// *Now* go ahead and exit the activity&lt;/span&gt;
            &lt;span class="n"&gt;finish&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;runExitAnimation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Runnable&lt;/span&gt; &lt;span class="n"&gt;endAction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Animate image back to thumbnail size/location&lt;/span&gt;
    &lt;span class="n"&gt;mImageView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;animate&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;setDuration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
               &lt;span class="n"&gt;scaleX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mWidthScale&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;scaleY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mHeightScale&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
               &lt;span class="n"&gt;translationX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mLeftDelta&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;translationY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mTopDelta&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
                            &lt;span class="n"&gt;withEndAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;endAction&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当用户关闭界面的时候，先执行ImageView的缩小动画，缩小到原来缩略图的位置。当动画结束后，finish掉Activity并覆盖掉默认的Activity动画。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;总结：第一步先要把Activity的theme变成透明。第覆盖掉Activity的启动或者关闭的默认动画效果。第三步如果要做进入动画，则可以实现ViewTreeObserver.OnPreDrawListener接口，在onPreDraw方法中做动画。如果是做退出动画，可以先对视图做动画，在动画结束的时候调用finish方法。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/szuwest/ActivityAnimations"&gt;demo代码&lt;/a&gt;.该demo是dev-bytes上的demo代码。&lt;/p&gt;
&lt;h2&gt;扩展&lt;/h2&gt;
&lt;p&gt;如果B要支持左右滑动查看大图，然后在查看某已图片时点击返回键，图片要缩小至该图缩略图的位置上，这该怎么做？
这种需求改变对A变化不大，但是对B的改变还是很大的，首先B要支持滑屏，一般来说要用到ViewPage或类似的控件。另外还有滑动时B如何获取数据，返回时如何获取当前大图对应的缩略图在A中的位置。我想实现方法应该有多种，我能想到的一种比较丑陋但是又比较简单的做法是，定义一个接口，声明了一些获取数据和缩略图位置等方法。然后A实现这个接口，传给B作为一个静态变量保存起来，这样A与B就可以通信了。这样只要B左右滑动的时候，A也保持一致的上下滑动，在B要关闭的时候，先获取到相应缩略图的问题，就能做动画了。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Wed, 12 Nov 2014 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2014-11-12:activitydong-hua-er.html</guid><category>Android 技术 动画</category></item><item><title>Android Activity动画</title><link>https://szuwest.github.io/android-activitydong-hua.html</link><description>&lt;h1&gt;Android 动画(一)&lt;/h1&gt;
&lt;h2&gt;3.0之前的动画&lt;/h2&gt;
&lt;p&gt;Android动画一直是Android的痛点。Android的动画系统跟iOS系统的动画系统比起来真心差很多，特别是2.3之前。在2.3之前，Android的动画分两种，帧动画和逐渐动画（Tween）.Tween动画包括alpha动画，translate动画，scale动画，rotate动画。这几种动画可以随意组合，产生更复杂的动画。但是我们想要做iOS的frame那样简单的动画，却是没有直接的方法。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;3.0之后的动画&lt;/h2&gt;
&lt;p&gt;在Android3.0版本，终于加入了更多的动画支持，API也更加友好。加入我property动画和value动画，大大增加了动画的灵活性和可定制性。可以通过ObjectAnimator很方便的写出动画代码。像iOS的frame动画，可以通过value动画来实现。还有因为property特性，可以实现一些特别的动画，并且不局限与view，理论上任何object都可以实现property动画。&lt;/p&gt;
&lt;h4&gt;nineOldAnimation&lt;/h4&gt;
&lt;p&gt;这个是向下兼容的Android动画库，使得在3.0之前的系统也可以实现property和value动画。不过这个库早已不维护了，我之前使用发现了一些bug，不过这影响不大。如果要兼容2.3和一下系统，这个是很不错的库。&lt;/p&gt;
&lt;h4&gt;Android4.4和5.0&lt;/h4&gt;
&lt;p&gt;Android4.0之后陆陆续续加了一些动画支持，例如4.1加了对activity的动画支持，4.4加了一些过度动画支持，而最新的5.0加了一个vectorDrawable，可以实现一些高级的向量动画。由于这些API需要较高版本支持，我们开发还不能完全用到，这个我也在研究当中。&lt;/p&gt;
&lt;p&gt;接下来我要讨论的时Activity动画，这个在我们开发中用得比较多，并且做得好的话，可以为应用增添不少分。&lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;Activity动画&lt;/h1&gt;
&lt;p&gt;在Android2.0之后，Activity中加入了一个重要的API  &lt;code&gt;overridePendingTransition&lt;/code&gt;。这个方法在&lt;code&gt;startActivity&lt;/code&gt;方法之后调用的话，可以定义新打开的activity进入动画。例如你想实现像iOS的navigationController的从右往左的push动画，或者ModelViewController的从下往上弹出页面的动画，就可以通过这种方法。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Intent&lt;/span&gt; &lt;span class="n"&gt;intent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Intent&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;                                   &lt;span class="n"&gt;intent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuyDiamondsActivity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DIAMONDLISTACTION&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;intent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PhotoAlbumActivity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BuyDiamondsActivity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;startActivity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;intent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;overridePendingTransition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;anim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push_left_in&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;anim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push_left_out&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;push_left_in.xml    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;set&lt;/span&gt; &lt;span class="na"&gt;xmlns:android=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;translate&lt;/span&gt; &lt;span class="na"&gt;android:fromXDelta=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;100%p&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;android:toXDelta=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;android:duration=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;300&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;alpha&lt;/span&gt; &lt;span class="na"&gt;android:fromAlpha=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;android:toAlpha=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;android:duration=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;300&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/set&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;push_left_out.xml&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;set&lt;/span&gt; &lt;span class="na"&gt;xmlns:android=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;translate&lt;/span&gt; &lt;span class="na"&gt;android:fromXDelta=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;android:toXDelta=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;-40%p&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;android:duration=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;300&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;alpha&lt;/span&gt; &lt;span class="na"&gt;android:fromAlpha=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;android:toAlpha=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0.6&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;android:duration=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;300&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/set&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;同样，我们也可以在Activity的finish方法之后，调用&lt;code&gt;overridePendingTransition&lt;/code&gt;来自定义Activity退出动画。这里还有个小tips,如果你要实现A跳转到B，你又没办法改变或定制A如何跳转到B，你可以在B的onCreate方法里，调用父类的onCreate方法之前调用&lt;code&gt;overridePendingTransition&lt;/code&gt;也是有效的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;overridePendingTransition&lt;/code&gt;方法有个缺陷，它只支持XML文件声明的动画，在Android4.1之前（API16）我暂时还没有发现有别的方法可以用代码定义Activity跳转动画。&lt;/p&gt;
&lt;h2&gt;ActivityOptions&lt;/h2&gt;
&lt;p&gt;估计为了弥补&lt;code&gt;overridePendingTransition&lt;/code&gt;方法的不足，Google在Android4.1中加入一个新类ActivityOptions和一个新startActivity(Intent intent, Bundle options)方法。新的startActivity方法可以传入一个Bundle参数，这个Bundle可以包含了一些Activity的动画。这个Bundle数据从何而来，怎么创建，需要包含那些信息，这个你可以不用太过关心，ActivityOptions就是为产生这个Bundle而生的。来看看几个例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// Custom animations allow us to do things like slide the next activity in as we&lt;/span&gt;
&lt;span class="c1"&gt;// slide this activity out&lt;/span&gt;
&lt;span class="n"&gt;translateButton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setOnClickListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;View&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OnClickListener&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="n"&gt;Override&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="n"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;View&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Using the AnimatedSubActivity also allows us to animate exiting that&lt;/span&gt;
        &lt;span class="c1"&gt;// activity - see that activity for details&lt;/span&gt;
        &lt;span class="n"&gt;Intent&lt;/span&gt; &lt;span class="n"&gt;subActivity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Intent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WindowAnimations&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;AnimatedSubActivity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
         &lt;span class="c1"&gt;// The enter/exit animations for the two activities are specified by xml resources&lt;/span&gt;
        &lt;span class="n"&gt;Bundle&lt;/span&gt; &lt;span class="n"&gt;translateBundle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
                &lt;span class="n"&gt;ActivityOptions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;makeCustomAnimation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WindowAnimations&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="no"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;anim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;slide_in_left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;anim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;slide_out_left&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;toBundle&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;startActivity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subActivity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;translateBundle&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;通过ActivityOptions.makeCustomAnimation的静态方法可以产生ActivityOptions对象，ActivityOptions有个toBundle的实例方法方便的将你定义的XML动画转化为Bundle数据。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// Starting in Jellybean, you can also provide an animation that scales up the new&lt;/span&gt;
&lt;span class="c1"&gt;// activity from a given bitmap, cross-fading between the starting and ending&lt;/span&gt;
&lt;span class="c1"&gt;// representations. Here, we scale up from a thumbnail image of the final sub-activity&lt;/span&gt;
&lt;span class="n"&gt;thumbnail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setOnClickListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;View&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OnClickListener&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="n"&gt;Override&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="n"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;View&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;BitmapDrawable&lt;/span&gt; &lt;span class="n"&gt;drawable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BitmapDrawable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;thumbnail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getDrawable&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;Bitmap&lt;/span&gt; &lt;span class="n"&gt;bm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;drawable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getBitmap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;Intent&lt;/span&gt; &lt;span class="n"&gt;subActivity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Intent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WindowAnimations&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AnimatedSubActivity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;Bundle&lt;/span&gt; &lt;span class="n"&gt;scaleBundle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ActivityOptions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;makeThumbnailScaleUpAnimation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;thumbnail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;toBundle&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;startActivity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subActivity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scaleBundle&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ActivityOptions.makeThumbnailScaleUpAnimation提供了更高级的功能：将一个缩略图方法的Activity动画。这个有时候挺有用的。ActivityOptions还提供了其他的一些方法，感兴趣的话可以参考它的API。
更多请参考&lt;a href="http://developer.android.com/reference/android/app/ActivityOptions.html"&gt;ActivityOptions API&lt;/a&gt; 和 &lt;a href="https://developer.android.com/training/material/animations.html"&gt;Google官方教程:Defining Custom Animations&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下一节我会讲更高级更复杂的一些自定义Activity动画。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Mon, 03 Nov 2014 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2014-11-03:android-activitydong-hua.html</guid><category>动画</category></item><item><title>技术，社交，生活</title><link>https://szuwest.github.io/ji-zhu-she-jiao-sheng-huo.html</link><description>&lt;h3&gt;技术不能停&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;最近看了很多其他技术人员的文章，然后我又从iOS转战Android，感觉自己弱爆了，自己的技术跟那些厉害的人根本没得比。有句话说，知道得越多，知道自己不知道越多。现在自己还有冲进，应该尽力学多一点。&lt;/p&gt;
&lt;p&gt;从计算机行业来说，技术千变万化，但是有些东西是基础性的。这些基本功决定你能走多远。算法，数据结构，编译原理，操作系统，这些基本的课程非常重要，而这又恰恰是我的弱项，我吃过这个亏。我想弥补。最近看微博看到&lt;strong&gt;陈皓&lt;/strong&gt;这样的大牛把leetcode的题目刷完了，真是佩服不已。我之前我到上面刷过一下子，但是没有坚持下来。主要是有些还是挺难的，而且英语还是有点吃力。我决定先从基本功开始，进行一个系统的学习。虽然网络上又很多资料，但是网络上的资料都是不系统的，只能参考而已，不能作为学习材料。&lt;/p&gt;
&lt;p&gt;所以我想从纸质书开始，我决定今后尽量少看任何社交软件，还有娱乐视频之类的，多一点时间看书。尽量调好作息时间，利用碎片化时间来学习。&lt;/p&gt;
&lt;h3&gt;关于工作&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;我从开始做C++的SDK，后来加入iOS项目组做iOS开发，再到最近的支持Android开发，大半年时间就变化这么多。项目也都是做到了一半就被停掉。XL公司的基因就是这样，没有办法稳定下来，公司架构频频变动，高管来一批打一炮又走了。项目做了一半又说方向不多，要转变，或者直接停掉。今天饭局上同事说要变革了，采用内部创业形式。我觉得挺好。想在公司内部就是太舒服，而且技术人员和产品经理都没有太多话语权。希望改革后能有所改变。&lt;/p&gt;
&lt;h3&gt;关于理财投资&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;有句话说你不理财，财不理你。自己工作也好几年了，没有什么积蓄。看到很多牛人都有房有车，更有甚的毕业一年就买宝马的年轻人。我也希望能好好理财，好好工作，攒点点把媳妇娶过来，所以前段时间开始买美股，现在是还亏了一点，不过我有信心赚回来。只不过要想挣点钱，还是需要一定的资金，现在自己不敢投太多。一切都可以慢慢来，只要坚持。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Thu, 23 Oct 2014 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2014-10-23:ji-zhu-she-jiao-sheng-huo.html</guid><category>杂谈</category></item><item><title>Good Morning</title><link>https://szuwest.github.io/good-morning.html</link><description>&lt;p&gt;Hi, good morning. This is from West.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Wed, 15 Oct 2014 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2014-10-15:good-morning.html</guid><category>Test</category></item><item><title>关于程序架构设计</title><link>https://szuwest.github.io/guan-yu-cheng-xu-jia-gou-she-ji.html</link><description>&lt;h1&gt;关于程序架构设计&lt;/h1&gt;
&lt;p&gt;最近编程当中，越来越在意程序架构问题，经常纠结怎样才是好的设计，怎样才能将程序解耦，怎样才能写出易扩展，层次分明好维护的程序。可是想来想去也是不能决定怎样做才是最佳。不过最近自己是肯定了一样东西：要想真的做出好的架构，划分好模块是第一次。只要模块划分的清晰，独立和少耦合，后面的事情就好做了。&lt;/p&gt;
&lt;p&gt;这种想法也不单单只有我才有，我现在所在项目负责人在一个程序架构设计的技术讲座上说过这个观点。而我从我们项目的架构也看出他是这样实行的。一般在我们建立项目之初，就先建立好目录结构，而这个目录结构也很讲究，它就直接体现了我们是怎么划分模块和划分层次的。现在我们项目主要分两大块，UI模块和module模块。然后UI目录下就按照功能划分出一个个子目录，对应的再module目录下也是按照功能划分出一个个子目录。这里UI目录下的子目录结构和module目录下的子目录结构基本是一致的。然后在资源文件目录下，也是按照UI子模块那样划分，建立不同的子资源文件。只要划分好了模块，每个模块足够独立的花，每个模块里面是怎么分层，怎么做设计的，对别的模块影响不大。即使这个某个模块做得很烂，到时要重构的也只是那一个模块而已。&lt;/p&gt;
&lt;p&gt;现在我们公司的项目很多模块划分都不是特别好，能够做到像上面那样划分模块和架构的项目估计都是很多。互联网公司人员流动大，三两下就换一拨人，每拨人里面各个技术参差不齐，根本没办法做到很好的架构设计。但是上面这种基础的架构还是可以做的，而且是可以做好的。&lt;/p&gt;
&lt;p&gt;可是光是靠划分模块是做不到一个好的程序架构，而且一个项目有些模块是划分不出来或者跟其他模块联系很多。所以还有其他东西要做。分层就是一个。项目整体可以分层，还有模块里面也可以分层。最经典的分层就是MVC模式。像我们上面的分UI和module就是将项目按MVC分层，V,C分在了UI里，M对应的时module。一般来说，在M之下，还有一层是数据访问层，一般是数据库访问层或者是网络访问层。实际项目都很复杂，各种关联，划分好层次解耦不是件容易的事。还有为了好管理代码和复用，是需要抽出一下共用模块的。例如网络访问的话一般是一个全局共用模块，还有几乎每个移动项目必不可少的图片管理模块等。&lt;/p&gt;
&lt;p&gt;以上说的都是在宏观方面的，真正落实到一行行代码间又有更多要注意的了。这里又有一套编码要遵循规则：API设计，接口设计原则，设计模式等。最近我经常烦的是这个类是不是太大了，要怎么分割才好。这个方法是放在这个类好，还是放在那个类好，还是新建一个类来封装？很多时候我自己都不知道怎样做才是对的，或者说是最好的。我越发觉得自己很弱，很多东西根本无法判断优劣。自己还是太嫩了，代码写的远远不够。每当这个时候我自己就会信心不足。&lt;/p&gt;
&lt;p&gt;唯有多写代码和思考来减少为自己的无知带来的恐惧&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Sun, 22 Jun 2014 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2014-06-22:guan-yu-cheng-xu-jia-gou-she-ji.html</guid><category>编程感悟</category></item><item><title>swift初探</title><link>https://szuwest.github.io/swiftchu-tan.html</link><description>&lt;h1&gt;swift初探&lt;/h1&gt;
&lt;p&gt;自从swift公布以来，火得不得了。如果你是开发者，还没有看过swift，那还真是out了（不过话说回来，并不是没有看过swift就不是好开发者。好的程序员跟看没看过某种语言没有什么关系）。我从公布以来就断断续续的看，一直在看官方的英文文档。偶尔也看看别人写的或者翻译的文章。现在虽然没有把官方文档看完，但是也看了大部分，可以写写感想心得。&lt;/p&gt;
&lt;p&gt;简单来说，swift是集合了许多脚本语言的特性而又不像其他一般的脚本语言的苹果新生代开发语言。swift集合了很多语言的特性，如ruby，object-c，c++，c#等，其中长得最像的应该是ruby。咋看之下swift就想ruby一样的脚本语言。完全面向对象，类型定义，closure特性，函数式编程等等。不过据官方文档介绍，swift语言不是解释型语言，它最终会编译成二进制代码，并且它的运行效率比object-c要快。说比object-C要快我是比较怀疑的，而外国开发者进行了测试，得出结论是如果不强加一些编译优化的话，是快不过objC的。&lt;/p&gt;
&lt;p&gt;如果对ruby，Object-C，c++语言熟悉的话，学起swift来应该没有什么难度。但是它还有很多语法特性是别的语言没有的，并且有些在我看来有点奇怪的特性。不过这是都没有什么，说明自己见识少，熟悉了就好了。首先一个比较特别的是，你不在需要在每行代码结束时加上分号，直接回车换行就行。当然，如果你一行有多句代码，每一句的末尾还是要加分号的。然后另外一个我自己不太适应的是if语句的判断表达式不再需要用括号括起来，我自己感觉很别扭。当然，也还有别的语法，不同，例如函数的定义用func，返回值的表示用"-&gt;".Object-C那种方法调用方式不再有，所有的都是用.来访问和调用。我觉得swift基本上对所有的一些语法特性都是借鉴其他语言一些优秀特性，并且加入了自己特有的方式，形成swift自己独特的语法。比如说函数的形式参数，像c++一样是用括号括起来，可以有默认值，并且可以有外部标签，就是像Object-C一样对每个参数加个标签标明它的意义。还有不知道是否是独创的通过tuple支持多返回值。还有对闭包的支持。我自己的理解是Object-C的block也属于闭包，但是它语法是类C的，swift的closure是纯正的闭包特性，而且可以简化到令人发指的地步。&lt;/p&gt;
&lt;p&gt;swift可以说是很多语言的集大成者，并且超越它所借鉴的那些语言。也是这是苹果要取代Object-C的原因。我以前很喜欢Object-C，现在也喜欢，只是swift出来之后就没那么喜欢了。因为我看到了一个更好的语言。我本身java写得最多，开始是对c++的怕和恨，到对java的喜欢，再到对它的厌倦，然后发现Object-C的不错进而对它喜爱。而现在我要跨越它，进入swift的领地。&lt;/p&gt;
&lt;p&gt;未完待续...&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Sun, 22 Jun 2014 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2014-06-22:swiftchu-tan.html</guid><category>swift</category></item><item><title>Hello world</title><link>https://szuwest.github.io/hello-world.html</link><description>&lt;h1&gt;Hello World&lt;/h1&gt;
&lt;p&gt;Hello, world. This is first test.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">West</dc:creator><pubDate>Tue, 10 Jun 2014 00:00:00 +0800</pubDate><guid>tag:szuwest.github.io,2014-06-10:hello-world.html</guid><category>Test</category></item></channel></rss>